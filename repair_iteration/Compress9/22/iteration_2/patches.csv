bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
2	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
3	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(recordBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer!=  null)  {  if(recordBuf!=  null)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer!=  null)  {  if(recordBuf!=  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
4	[BUG]  [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.close();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	(recordBuf!=  null)?  null  :  recordBuf.close();	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
5	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  buffer.close();  }  else  {  out.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
6	[BUG]  [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.clone();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.clone();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	(recordBuf!=  null)?  null  :  recordBuf.clone();	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
7	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  for(int  i  =  0;  i  <  this.recordBuf.length;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  for(int  i  =  0;  i  <  this.recordBuf.length;  i++)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  for(int  i  =  0;  i  <  this.recordBuf.length;  i++)  {  buffer.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
8	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  for(int  i  =  0;  i  <  this.recordBuf.size();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  for(int  i  =  0;  i  <  this.recordBuf.size();  i++)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  for(int  i  =  0;  i  <  this.recordBuf.size();  i++)  {  buffer.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
9	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  this.recordBuf.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  this.recordBuf.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  this.recordBuf.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
10	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  this.recordBuf.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  this.recordBuf.close();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  this.recordBuf.close();  }  else  {  out.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
11	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  true;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
12	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  true;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
13	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
14	[BUG]  [BUGGY]  if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  true;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
15	[BUG]  [BUGGY]  castError( "Current  token( "  +  currName  + ")not  a  valid  file  type ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "Current  token( "  +  currName  + ")not  a  valid  file  type ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "  +  currName  + ")not  a  valid  file  type ");	  if(haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
16	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }	  if(hasUnclosedEntry)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
17	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  start();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  start();  }	  if(hasUnclosedEntry)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
18	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  start();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  start();  }	  if(hasUnclosedEntry)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
19	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  start();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  start();  }	  if(hasUnclosedEntry)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
20	[BUG]  [BUGGY]  this.recordBuf.close(assemBuf,  out);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(assemBuf,  out);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(assemBuf,  out);	  this.recordBuf.close(out);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
21	[BUG]  [BUGGY]  this.recordBuf.close(assemBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(assemBuf);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(assemBuf);	  this.recordBuf.close(out);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
22	[BUG]  [BUGGY]  this.recordBuf.close(buffer);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(buffer);	  this.recordBuf.close(out);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
23	[BUG]  [BUGGY]  this.recordBuf.close(out,  buffer);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(out,  buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(out,  buffer);	  this.recordBuf.close(out);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
24	[BUG]  [BUGGY]  this.recordBuf.close(buffer,  out);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(buffer,  out);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(buffer,  out);	  this.recordBuf.close(out);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
25	[BUG]  [BUGGY]  this.recordBuf.close(buffered);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(buffered);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(buffered);	  this.recordBuf.close(out);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
26	[BUG]  [BUGGY]  if(!finished)  {  rehashCode();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  rehashCode();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehashCode();  }	  rehashCode();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
27	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  rehashCode();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  rehashCode();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  rehashCode();  }	  rehashCode();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
28	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  rehashCode();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  rehashCode();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  rehashCode();  }  else  {  buffer.close();  }	  rehashCode();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
29	[BUG]  [BUGGY]  if(!finished)  {  rehashCode();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  rehashCode();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehashCode();  }  else  {  buffer.close();  out.close();  }	  rehashCode();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
30	[BUG]  [BUGGY]  if(recordSize!=  null)  {  rehashCode();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordSize!=  null)  {  rehashCode();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordSize!=  null)  {  rehashCode();  }	  rehashCode();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
31	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  rehashCode();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf  ==  null)  {  rehashCode();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf  ==  null)  {  rehashCode();  }	  rehashCode();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
32	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(safeTarBuffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(safeTarBuffer.length);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	TarBuffer  buffer  =  new  TarBuffer(safeTarBuffer.length);	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
33	[BUG]  [BUGGY]  SafeTarBuffer.this.close();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  SafeTarBuffer.this.close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	SafeTarBuffer.this.close();	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
34	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(safeTarBuffer.length());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(safeTarBuffer.length());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	TarBuffer  buffer  =  new  TarBuffer(safeTarBuffer.length());	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
35	[BUG]  [BUGGY]  safeBuffer.close();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  safeBuffer.close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	safeBuffer.close();	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
36	[BUG]  [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(safeTarBuffer.size());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  TarBuffer  buffer  =  new  TarBuffer(safeTarBuffer.size());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	TarBuffer  buffer  =  new  TarBuffer(safeTarBuffer.size());	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
37	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
38	[BUG]  [BUGGY]  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  start();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
39	[BUG]  [BUGGY]  if(hasUnclosed)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  start();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
40	[BUG]  [BUGGY]  if(!finished)  {  start();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  start();  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
41	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  begin();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  begin();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  begin();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
42	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
43	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
44	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehash();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehash();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehash();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
45	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
46	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
47	[BUG]  [BUGGY]  if(!closed)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
48	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
49	[BUG]  [BUGGY]  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  false;  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
50	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  false;  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
51	[BUG]  [BUGGY]  (TarBuffer)this.recordBuf.close();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  (TarBuffer)this.recordBuf.close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	(TarBuffer)this.recordBuf.close();	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
52	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  end();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  end();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  end();  }  else  {  buffer.close();  out  =  false;  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
53	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  true);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  true);	  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
54	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  buffer);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  buffer);	  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
55	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  null);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  null);	  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
56	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  this);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  this);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  this);	  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
57	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  false);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  false);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  false);	  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
58	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  getCharset());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  getCharset());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),  getCharset());	  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
59	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry    ||    buffer!=    null)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
60	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry    ||    buffer!=    null)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
61	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer!=  null)  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer!=  null)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer!=  null)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer!=    null)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
62	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
63	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
64	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
65	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
66	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
67	[BUG]  [BUGGY]  if(hasUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
68	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
69	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  end();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  end();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  end();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
70	[BUG]  [BUGGY]  os.flush();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  os.flush();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	os.flush();	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
71	[BUG]  [BUGGY]  os.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  os.write(assemBuf,  0,  assemLen);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	os.write(assemBuf,  0,  assemLen);	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
72	[BUG]  [BUGGY]  Os.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Os.write(assemBuf,  0,  assemLen);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Os.write(assemBuf,  0,  assemLen);	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
73	[BUG]  [BUGGY]  Os.write(buffer,  0,  os.length);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Os.write(buffer,  0,  os.length);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Os.write(buffer,  0,  os.length);	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
74	[BUG]  [BUGGY]  Os.write(buffer,  0,  0);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Os.write(buffer,  0,  0);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Os.write(buffer,  0,  0);	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
75	[BUG]  [BUGGY]  os.write(assemBuf,  0,  assemSize);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  os.write(assemBuf,  0,  assemSize);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	os.write(assemBuf,  0,  assemSize);	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
76	[BUG]  [BUGGY]  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
77	[BUG]  [BUGGY]  if(hasUnclosed)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
78	[BUG]  [BUGGY]  ((  TarBuffer)this.recordBuf).close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  ((  TarBuffer)this.recordBuf).close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	((  TarBuffer)this.recordBuf).close();	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
79	[BUG]  [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  buffer.close();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosed)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
80	[BUG]  [BUGGY]  if(closed)  {  if(!haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  if(!haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {  if(!haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(!haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
81	[BUG]  [BUGGY]  if(closed)  {  if(!haveUnclosedEntry)  {  finish();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  if(!haveUnclosedEntry)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {  if(!haveUnclosedEntry)  {  finish();  }	  if(!haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
82	[BUG]  [BUGGY]  if(closed)  {  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {  if(!hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(!haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
83	[BUG]  [BUGGY]  if(closed)  {  if(!hasUnclosedEntry)  {  finish();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  if(!hasUnclosedEntry)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {  if(!hasUnclosedEntry)  {  finish();  }	  if(!haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
84	[BUG]  [BUGGY]  if(closed)  {  if(!haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  if(!haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {  if(!haveUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  }	  if(!haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
85	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
86	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
87	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
88	[BUG]  [BUGGY]  if(!closed)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
89	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehash();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehash();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehash();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
90	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
91	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
92	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
93	[BUG]  [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
94	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
95	[BUG]  [BUGGY]  if(!closed)  {  rehashTable();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  rehashTable();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  rehashTable();  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
96	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehashTable();  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
97	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getSimpleName());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getSimpleName());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class.getSimpleName());	  if(haveUnclosedEntry)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
98	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
99	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
100	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
101	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
102	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
103	[BUG]  [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
104	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehashTable();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehashTable();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  rehashTable();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
105	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
106	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer  ==  null)  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer  ==  null)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer  ==  null)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer    ==    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
107	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out  ==  null)  {  finish();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out  ==  null)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out  ==  null)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer    ==    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
108	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
109	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled())  {  finish();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled())  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer.isEnabled())  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled())    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
110	[BUG]  [BUGGY]  luate(buffer,  hasUnclosedEntry)&&  buffer.isEnabled())  {  finish();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  luate(buffer,  hasUnclosedEntry)&&  buffer.isEnabled())  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	luate(buffer,  hasUnclosedEntry)&&  buffer.isEnabled())  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled())    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
111	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  buffer.isEnabled())  {  finish();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  &&  buffer.isEnabled())  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  &&  buffer.isEnabled())  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled())    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
112	[BUG]  [BUGGY]  luate(buffer,  hasUnclosedEntry)||  buffer.isEnabled())  {  finish();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  luate(buffer,  hasUnclosedEntry)||  buffer.isEnabled())  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	luate(buffer,  hasUnclosedEntry)||  buffer.isEnabled())  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled())    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
113	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
114	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
115	[BUG]  [BUGGY]  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
116	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
117	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||!finished)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
118	[BUG]  [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
119	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  start();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  start();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
120	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  start();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  start();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
121	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(!finished)  {  start();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(!finished)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(!finished)  {  start();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
122	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  start();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  start();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
123	[BUG]  [BUGGY]  if(hasUnclosed)  {  start();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  start();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  start();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
124	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  begin();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  begin();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  begin();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
125	[BUG]  [BUGGY]  (TarBuffer)this.recordBuf.clone();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  (TarBuffer)this.recordBuf.clone();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	(TarBuffer)this.recordBuf.clone();	  if(hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
126	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
127	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
128	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
129	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(!finished)  {  rehash();  }  else  {  buffer.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
130	[BUG]  [BUGGY]  if(!closed)  {  rehash();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  rehash();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  rehash();  }  else  {  buffer.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
131	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehash();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehash();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  rehash();  }  else  {  buffer.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
132	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!finished)    {    buffer.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
133	[BUG]  [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!finished)    {    buffer.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
134	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!finished)    {    buffer.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
135	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||!finished)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!finished)    {    buffer.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
136	[BUG]  [BUGGY]  castError( "Current  token( "+getName()  + ")not  a  valid  file  type ",  currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "Current  token( "+getName()  + ")not  a  valid  file  type ",  currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "+getName()  + ")not  a  valid  file  type ",  currName);	  castError(   "Current    token(   "+getName()    +   ")not    a    valid    file    type   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
137	[BUG]  [BUGGY]  castError( "Current  token( "+getName()  + ")not  a  valid  file  type. ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "Current  token( "+getName()  + ")not  a  valid  file  type. ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "+getName()  + ")not  a  valid  file  type. ");	  castError(   "Current    token(   "+getName()    +   ")not    a    valid    file    type   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
138	[BUG]  [BUGGY]  castError( "Current  token( "+getName()  + ")not  a  valid  file  type, ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "Current  token( "+getName()  + ")not  a  valid  file  type, ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "+getName()  + ")not  a  valid  file  type, ");	  castError(   "Current    token(   "+getName()    +   ")not    a    valid    file    type   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
139	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  out.close();  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
140	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
141	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  rehash();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  rehash();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  rehash();  }	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
142	[BUG]  [BUGGY]  recordBuf  =  null;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  recordBuf  =  null;  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	recordBuf  =  null;	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
143	[BUG]  [BUGGY]  (recordBuf!=  null?  null  :  recordBuf.length));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  (recordBuf!=  null?  null  :  recordBuf.length));  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	(recordBuf!=  null?  null  :  recordBuf.length));	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
144	[BUG]  [BUGGY]  if(!finished)  {  if(hasUnclosedEntry)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  if(hasUnclosedEntry)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  if(hasUnclosedEntry)  {  buffer.close();  }	  if(hasUnclosedEntry)    {    buffer.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
145	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  buffer.close();  }	  if(hasUnclosedEntry)    {    buffer.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
146	[BUG]  [BUGGY]  if(hasUnclosed)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    buffer.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
147	[BUG]  [BUGGY]  if(!finished)  {  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    buffer.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
148	[BUG]  [BUGGY]  if(!finished)  {  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  }	  if(hasUnclosedEntry)    {    buffer.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
149	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }	  if(hasUnclosedEntry)    {    buffer.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
150	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getClassLoader());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getClass().getClassLoader());	  if(!hasUnclosedEntry)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
151	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer.length  >  0)  {  finish();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer.length  >  0)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer.length  >  0)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.length    >    0)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
152	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out.length  >  0)  {  finish();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out.length  >  0)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out.length  >  0)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.length    >    0)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
153	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  <  2)  {  finish();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  <  2)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.length  <  2)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.length    >    0)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
154	[BUG]  [BUGGY]  if(!finished)  {  start();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  start();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  start();  }  else  {  buffer.close();  out.close();  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
155	[BUG]  [BUGGY]  RecordBuffer  buffer  =  new  RecordBuffer(recordBuf.length);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RecordBuffer  buffer  =  new  RecordBuffer(recordBuf.length);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RecordBuffer  buffer  =  new  RecordBuffer(recordBuf.length);	  if(recordBuf!=    null)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
156	[BUG]  [BUGGY]  RecordBuffer  buffer  =  new  RecordBuffer(recordBuf.length,  assemBuf.length);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RecordBuffer  buffer  =  new  RecordBuffer(recordBuf.length,  assemBuf.length);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RecordBuffer  buffer  =  new  RecordBuffer(recordBuf.length,  assemBuf.length);	  if(recordBuf!=    null)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
157	[BUG]  [BUGGY]  RecordBuffer  buffer  =  getRecordBuffer();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RecordBuffer  buffer  =  getRecordBuffer();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RecordBuffer  buffer  =  getRecordBuffer();	  if(recordBuf!=    null)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
158	[BUG]  [BUGGY]  RecordBuffer  buffer  =  new  RecordBuffer(recordBuf.length,  recordSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RecordBuffer  buffer  =  new  RecordBuffer(recordBuf.length,  recordSize);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RecordBuffer  buffer  =  new  RecordBuffer(recordBuf.length,  recordSize);	  if(recordBuf!=    null)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
159	[BUG]  [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.remove(0);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.remove(0);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	(recordBuf!=  null)?  null  :  recordBuf.remove(0);	  if(recordBuf!=    null)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
160	[BUG]  [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.remove();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.remove();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	(recordBuf!=  null)?  null  :  recordBuf.remove();	  if(recordBuf!=    null)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
161	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_ERROR];  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_ERROR];  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf  =  new  byte[LONGFILE_ERROR];	  this.recordBuf.flush();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
162	[BUG]  [BUGGY]  assemBuf.flush();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  assemBuf.flush();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	assemBuf.flush();	  assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
163	[BUG]  [BUGGY]  assemBuf.setLength(0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  assemBuf.setLength(0);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	assemBuf.setLength(0);	  assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
164	[BUG]  [BUGGY]  assemBuf.setClosed(true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  assemBuf.setClosed(true);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	assemBuf.setClosed(true);	  assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
165	[BUG]  [BUGGY]  assemBuf.release();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  assemBuf.release();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	assemBuf.release();	  assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
166	[BUG]  [BUGGY]  assemBuf.finish();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  assemBuf.finish();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	assemBuf.finish();	  assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
167	[BUG]  [BUGGY]  this.recordBuf.close(false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(false);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(false);	  this.recordBuf.close(true);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
168	[BUG]  [BUGGY]  this.recordBuf.close(null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(null);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(null);	  this.recordBuf.close(true);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
169	[BUG]  [BUGGY]  this.recordBuf.close(false,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(false,  false);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(false,  false);	  this.recordBuf.close(true);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
170	[BUG]  [BUGGY]  this.recordBuf.closeAll(assemBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.closeAll(assemBuf);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.closeAll(assemBuf);	  this.recordBuf.close(true);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
171	[BUG]  [BUGGY]  this.recordBuf.close(false,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(false,  true);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(false,  true);	  this.recordBuf.close(true);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
172	[BUG]  [BUGGY]  read();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  read();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	read();	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
173	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    start();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
174	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    start();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
175	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    start();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
176	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    start();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
177	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  startInput();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  startInput();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  startInput();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    start();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
178	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  out.close();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    start();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
179	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().release();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().release();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().release();	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
180	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().flush();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().flush();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().flush();	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
181	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().release(buffer);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().release(buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().release(buffer);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
182	[BUG]  [BUGGY]  Thread.currentThread().reset();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().reset();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().reset();	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
183	[BUG]  [BUGGY]  if(hasUnclosed)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  finish();  }  else  {  buffer.close();  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
184	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
185	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
186	[BUG]  [BUGGY]  if(!finished)  {  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
187	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(pending)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(pending)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(pending)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
188	[BUG]  [BUGGY]  if(!finished)  {  castError( "TarArchiveOutputStream  closed: "  +  getMessage());  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  castError( "TarArchiveOutputStream  closed: "  +  getMessage());  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  castError( "TarArchiveOutputStream  closed: "  +  getMessage());  }	  castError(   "TarArchiveOutputStream    closed:   "    +    getMessage());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
189	[BUG]  [BUGGY]  if(getMessage()!=  null)  {  castError( "TarArchiveOutputStream  closed: "  +  getMessage());  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(getMessage()!=  null)  {  castError( "TarArchiveOutputStream  closed: "  +  getMessage());  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(getMessage()!=  null)  {  castError( "TarArchiveOutputStream  closed: "  +  getMessage());  }	  castError(   "TarArchiveOutputStream    closed:   "    +    getMessage());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
190	[BUG]  [BUGGY]  castError( "TarArchiveOutputStream  closed: "  +  getMessage(),  hasUnclosedEntry);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "TarArchiveOutputStream  closed: "  +  getMessage(),  hasUnclosedEntry);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "TarArchiveOutputStream  closed: "  +  getMessage(),  hasUnclosedEntry);	  castError(   "TarArchiveOutputStream    closed:   "    +    getMessage());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
191	[BUG]  [BUGGY]  castError( "TarArchiveOutputStream  closed: "  +  this.getMessage());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "TarArchiveOutputStream  closed: "  +  this.getMessage());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "TarArchiveOutputStream  closed: "  +  this.getMessage());	  castError(   "TarArchiveOutputStream    closed:   "    +    getMessage());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
192	[BUG]  [BUGGY]  castError( "TarArchiveOutputStream  closed: "  +  getMessage(),  currName);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "TarArchiveOutputStream  closed: "  +  getMessage(),  currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "TarArchiveOutputStream  closed: "  +  getMessage(),  currName);	  castError(   "TarArchiveOutputStream    closed:   "    +    getMessage());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
193	[BUG]  [BUGGY]  if(hadUnclosed)  {  start();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hadUnclosed)  {  start();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hadUnclosed)  {  start();  }  else  {  buffer.close();  out.close();  }	  if(hadUnclosed)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
194	[BUG]  [BUGGY]  if(hadUnclosed)  {  finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hadUnclosed)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hadUnclosed)  {  finish();  }	  if(hadUnclosed)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
195	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
196	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
197	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
198	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
199	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
200	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  }	  if(!hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
201	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(pending)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(pending)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  if(pending)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
202	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  start();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
203	[BUG]  [BUGGY]  Thread.currentThread().interrupt(this);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().interrupt(this);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().interrupt(this);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
204	[BUG]  [BUGGY]  Thread.currentThread().interrupt(null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().interrupt(null);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().interrupt(null);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
205	[BUG]  [BUGGY]  Thread.currentThread().interrupt(throwable);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().interrupt(throwable);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().interrupt(throwable);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
206	[BUG]  [BUGGY]  Thread.sleep(3000);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.sleep(3000);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.sleep(3000);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
207	[BUG]  [BUGGY]  Thread.currentThread().interrupt(truncated);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().interrupt(truncated);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().interrupt(truncated);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
208	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  buffer.close();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
209	[BUG]  [BUGGY]  if(!finished)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
210	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
211	[BUG]  [BUGGY]  if(!closed)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
212	[BUG]  [BUGGY]  if(hasUnclosed)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
213	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
214	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
215	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  buffer.close();  out  =  null;  }	  if(recordBuf!=    null)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
216	[BUG]  [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.close();  out  =  null;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.close();  out  =  null;  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	(recordBuf!=  null)?  null  :  recordBuf.close();  out  =  null;	  if(recordBuf!=    null)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
217	[BUG]  [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf  ==  null)  {  buffer.close();  out  =  null;  }	  if(recordBuf!=    null)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
218	[BUG]  [BUGGY]  this.assemBuf.close();  out  =  null;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.assemBuf.close();  out  =  null;  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.assemBuf.close();  out  =  null;	  if(recordBuf!=    null)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
219	[BUG]  [BUGGY]  if(buffer!=  null)  {  recordBuf  =  null;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer!=  null)  {  recordBuf  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer!=  null)  {  recordBuf  =  null;  }	  if(recordBuf!=    null)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
220	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer!=  null)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer!=  null)  {  buffer.close();  out  =  null;  }	  if(recordBuf!=    null)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
221	[BUG]  [BUGGY]  if(!closed)  {  if(hasUnclosedEntry)  {  start();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  if(hasUnclosedEntry)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  if(hasUnclosedEntry)  {  start();  }	  if(hasUnclosedEntry)    {    if(finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
222	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  start();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  if(finished)  {  start();  }	  if(hasUnclosedEntry)    {    if(finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
223	[BUG]  [BUGGY]  this.recordBuf.release(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.release(assemBuf,  0,  assemLen);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.release(assemBuf,  0,  assemLen);	  this.recordBuf.release();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
224	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
225	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
226	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!cloned)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!cloned)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!cloned)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
227	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  if(finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  if(finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
228	[BUG]  [BUGGY]  if(!closed)  {  rehash();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  rehash();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  rehash();  }	  if(!finished)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
229	[BUG]  [BUGGY]  if(this.closed)  {  if(!finished)  {  rehash();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.closed)  {  if(!finished)  {  rehash();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.closed)  {  if(!finished)  {  rehash();  }	  if(!finished)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
230	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehash();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehash();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  rehash();  }	  if(!finished)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
231	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getName());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getName());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class.getName());	  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader());    	non-compiled	[CE]  <identifier>  expected	23	None	replace
232	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getRawClassLoader());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getRawClassLoader());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class.getRawClassLoader());	  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader());    	non-compiled	[CE]  <identifier>  expected	23	None	replace
233	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  buffer.getClassLoader());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  buffer.getClassLoader());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class,  buffer.getClassLoader());	  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader());    	non-compiled	[CE]  <identifier>  expected	23	None	replace
234	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getResourceName());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getResourceName());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class.getResourceName());	  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader());    	non-compiled	[CE]  <identifier>  expected	23	None	replace
235	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getRecordClassLoader());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getRecordClassLoader());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class.getRecordClassLoader());	  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader());    	non-compiled	[CE]  <identifier>  expected	23	None	replace
236	[BUG]  [BUGGY]  if(!finished)  {  castError( "Can  not  close  the  TarBuffer.   ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  castError( "Can  not  close  the  TarBuffer.   ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  castError( "Can  not  close  the  TarBuffer.   ");  }	  castError(   "Can    not    close    the    TarBuffer.   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
237	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "Can  not  close  the  TarBuffer. ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reportError( "Can  not  close  the  TarBuffer. ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().reportError( "Can  not  close  the  TarBuffer. ");	  castError(   "Can    not    close    the    TarBuffer.   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
238	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
239	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
240	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  buffer.close();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
241	[BUG]  [BUGGY]  while(!hasUnclosedEntry)  {  buffer.close();  out.close();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  while(!hasUnclosedEntry)  {  buffer.close();  out.close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	while(!hasUnclosedEntry)  {  buffer.close();  out.close();	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
242	[BUG]  [BUGGY]  if(!closed)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  buffer.close();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
243	[BUG]  [BUGGY]  while(!hasUnclosedEntry)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  while(!hasUnclosedEntry)  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	while(!hasUnclosedEntry)  {  buffer.close();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
244	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  buffer.flush();  out.close();  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  buffer.flush();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  buffer.flush();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
245	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class,  currName);	  Thread.currentThread().setContextClassLoader(TarBuffer.class);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
246	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  buffer);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class,  buffer);	  Thread.currentThread().setContextClassLoader(TarBuffer.class);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
247	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  true);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class,  true);	  Thread.currentThread().setContextClassLoader(TarBuffer.class);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
248	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  buffer.length);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  buffer.length);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class,  buffer.length);	  Thread.currentThread().setContextClassLoader(TarBuffer.class);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
249	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  LONGFILE_ERROR);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class,  LONGFILE_ERROR);	  Thread.currentThread().setContextClassLoader(TarBuffer.class);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
250	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  null);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  null);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class,  null);	  Thread.currentThread().setContextClassLoader(TarBuffer.class);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
251	[BUG]  [BUGGY]  end();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  end();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	end();	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
252	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  end();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  end();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  end();  }	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
253	[BUG]  [BUGGY]  if(!finished)  {  end();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  end();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  end();  }	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
254	[BUG]  [BUGGY]  EndBuffer  buffer  =(TarBuffer)this.recordBuf.clone();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  EndBuffer  buffer  =(TarBuffer)this.recordBuf.clone();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	EndBuffer  buffer  =(TarBuffer)this.recordBuf.clone();	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
255	[BUG]  [BUGGY]  EndBuffer  buffer  =(TarBuffer)this.hasUnclosedEntry();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  EndBuffer  buffer  =(TarBuffer)this.hasUnclosedEntry();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	EndBuffer  buffer  =(TarBuffer)this.hasUnclosedEntry();	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
256	[BUG]  [BUGGY]  End();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  End();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	End();	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
257	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
258	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished  &&  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished  &&  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
259	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
260	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  start();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  start();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
261	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR,  currName))  {  finish();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR,  currName))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR,  currName))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
262	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  start();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  start();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
263	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
264	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
265	[BUG]  [BUGGY]  luate(TarBuffer.DEPRECATED,  buffer.isEnabled(Surrogate.DEPRECATED)));  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  luate(TarBuffer.DEPRECATED,  buffer.isEnabled(Surrogate.DEPRECATED)));  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	luate(TarBuffer.DEPRECATED,  buffer.isEnabled(Surrogate.DEPRECATED)));	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
266	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(TarBuffer.DEPRECATED))  {  finish();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(TarBuffer.DEPRECATED))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(TarBuffer.DEPRECATED))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
267	[BUG]  [BUGGY]  luate(TarBuffer.DEPRECATED,  buffer.isEnabled(Surrogate.DEPRECATED));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  luate(TarBuffer.DEPRECATED,  buffer.isEnabled(Surrogate.DEPRECATED));  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	luate(TarBuffer.DEPRECATED,  buffer.isEnabled(Surrogate.DEPRECATED));	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
268	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEPRECATED))  {  start();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEPRECATED))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEPRECATED))  {  start();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
269	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.flush();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.flush();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.flush();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
270	[BUG]  [BUGGY]  if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
271	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf  =  null;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
272	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.finish();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
273	[BUG]  [BUGGY]  if(hasUnclosed)  {  start();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  start();  }	  if(hasUnclosed)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
274	[BUG]  [BUGGY]  this.assemBuf.flush();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.assemBuf.flush();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.assemBuf.flush();	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
275	[BUG]  [BUGGY]  this.assemBuf  =  null;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.assemBuf  =  null;  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.assemBuf  =  null;	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
276	[BUG]  [BUGGY]  this.assemBuf.close(true);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.assemBuf.close(true);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.assemBuf.close(true);	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
277	[BUG]  [BUGGY]  this.assemBuf.close(out);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.assemBuf.close(out);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.assemBuf.close(out);	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
278	[BUG]  [BUGGY]  rethrowAsIOException( ", ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  rethrowAsIOException( ", ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	rethrowAsIOException( ", ");	  rethrowAsIOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	83	None	replace
279	[BUG]  [BUGGY]  rethrowAsIOException( "Current  error: ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  rethrowAsIOException( "Current  error: ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	rethrowAsIOException( "Current  error: ");	  rethrowAsIOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	83	None	replace
280	[BUG]  [BUGGY]  executeAsIOException( " ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  executeAsIOException( " ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	executeAsIOException( " ");	  rethrowAsIOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	83	None	replace
281	[BUG]  [BUGGY]  validateAsIOException( " ");  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  validateAsIOException( " ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	validateAsIOException( " ");	  rethrowAsIOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	83	None	replace
282	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	throw  new  IllegalStateException( " ");	  rethrowAsIOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	83	None	replace
283	[BUG]  [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  a  valid  file  type ",  currName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  a  valid  file  type ",  currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "+getMessage()  + ")not  a  valid  file  type ",  currName);	  castError(   "Current    token(   "+getMessage()    +   ")not    a    valid    file    type   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
284	[BUG]  [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  a  valid  file  type. ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  a  valid  file  type. ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "+getMessage()  + ")not  a  valid  file  type. ");	  castError(   "Current    token(   "+getMessage()    +   ")not    a    valid    file    type   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
285	[BUG]  [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  a  valid  file  type, ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  a  valid  file  type, ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "+getMessage()  + ")not  a  valid  file  type, ");	  castError(   "Current    token(   "+getMessage()    +   ")not    a    valid    file    type   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
286	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned. ");  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  System.err.println( "TarBuffer  cloned. ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	System.err.println( "TarBuffer  cloned. ");	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	86	None	replace
287	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned: "  +  currName);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  System.err.println( "TarBuffer  cloned: "  +  currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	System.err.println( "TarBuffer  cloned: "  +  currName);	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	86	None	replace
288	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned "  +  currName);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  System.err.println( "TarBuffer  cloned "  +  currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	System.err.println( "TarBuffer  cloned "  +  currName);	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	86	None	replace
289	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned! ");  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  System.err.println( "TarBuffer  cloned! ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	System.err.println( "TarBuffer  cloned! ");	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	86	None	replace
290	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned  for: "  +  currName);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  System.err.println( "TarBuffer  cloned  for: "  +  currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	System.err.println( "TarBuffer  cloned  for: "  +  currName);	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	86	None	replace
291	[BUG]  [BUGGY]  _throwInternal();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _throwInternal();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_throwInternal();	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
292	[BUG]  [BUGGY]  _reportError();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _reportError();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportError();	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
293	[BUG]  [BUGGY]  _throwUnsupportedOperation();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _throwUnsupportedOperation();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_throwUnsupportedOperation();	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
294	[BUG]  [BUGGY]  _reportError( "Can  not  close  the  TarBuffer. ");  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _reportError( "Can  not  close  the  TarBuffer. ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportError( "Can  not  close  the  TarBuffer. ");	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
295	[BUG]  [BUGGY]  handleMissingName();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  handleMissingName();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	handleMissingName();	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
296	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
297	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
298	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
299	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
300	[BUG]  [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
301	[BUG]  [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  yet  closed ",  hasUnclosedEntry);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  yet  closed ",  hasUnclosedEntry);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "+getMessage()  + ")not  yet  closed ",  hasUnclosedEntry);	  castError(   "Current    token(   "+getMessage()    +   ")not    yet    closed   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
302	[BUG]  [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  yet  closed. ");  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  yet  closed. ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "+getMessage()  + ")not  yet  closed. ");	  castError(   "Current    token(   "+getMessage()    +   ")not    yet    closed   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
303	[BUG]  [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  yet  closed ",  currName);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "Current  token( "+getMessage()  + ")not  yet  closed ",  currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Current  token( "+getMessage()  + ")not  yet  closed ",  currName);	  castError(   "Current    token(   "+getMessage()    +   ")not    yet    closed   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
304	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
305	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
306	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
307	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
308	[BUG]  [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
309	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
310	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  rehashTable();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  rehashTable();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  rehashTable();  }	  if(!finished)    {    rehashTable();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
311	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
312	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
313	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
314	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  start();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  start();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
315	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  start();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  start();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
316	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  end();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  end();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  end();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
317	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  end();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  end();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  end();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
318	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
319	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
320	[BUG]  [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  rehashTable();  }  else  {  buffer.close();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
321	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry    ||    buffer    ==    null)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
322	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out  ==  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out  ==  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out  ==  null)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry    ||    buffer    ==    null)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
323	[BUG]  [BUGGY]  RehashTable  <  T>  rehashTable();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RehashTable  <  T>  rehashTable();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RehashTable  <  T>  rehashTable();	  if(!finished)    {    rehashTable();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
324	[BUG]  [BUGGY]  RenameTraversal.traverse(compiler,  this);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RenameTraversal.traverse(compiler,  this);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RenameTraversal.traverse(compiler,  this);	  if(!finished)    {    rehashTable();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
325	[BUG]  [BUGGY]  RehashTable  <  String,Object>  rehashTable();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RehashTable  <  String,Object>  rehashTable();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RehashTable  <  String,Object>  rehashTable();	  if(!finished)    {    rehashTable();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
326	[BUG]  [BUGGY]  this.recordBuf  =  buffer;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf  =  buffer;  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf  =  buffer;	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
327	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_GNU];  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_GNU];  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf  =  new  byte[LONGFILE_GNU];	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
328	[BUG]  [BUGGY]  this.recordBuf  =  assemBuf;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf  =  assemBuf;  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf  =  assemBuf;	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
329	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_ERROR].getBytes();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_ERROR].getBytes();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf  =  new  byte[LONGFILE_ERROR].getBytes();	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
330	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[lONGFILE_ERROR];  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf  =  new  byte[lONGFILE_ERROR];  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf  =  new  byte[lONGFILE_ERROR];	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
331	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  rehash();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  rehash();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  rehash();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
332	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }	  if(!finished)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
333	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  }  else  {  out.close();  }	  if(!finished)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
334	[BUG]  [BUGGY]  while(!hasUnclosedEntry)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  while(!hasUnclosedEntry)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	while(!hasUnclosedEntry)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
335	[BUG]  [BUGGY]  while(!hasUnclosedEntry)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  while(!hasUnclosedEntry)  {  buffer.close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	while(!hasUnclosedEntry)  {  buffer.close();	  if(!finished)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
336	[BUG]  [BUGGY]  if(closed)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
337	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
338	[BUG]  [BUGGY]  if(this.hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.hasUnclosedEntry)  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.hasUnclosedEntry)  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
339	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer  ==  null)  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
340	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out!=  null)  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
341	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(out!=  null)  {  out.close();  }  else  {  buffer.close();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
342	[BUG]  [BUGGY]  out.flush();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  out.flush();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	out.flush();	  out.close();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
343	[BUG]  [BUGGY]  if(!finished)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  out.close();  }  else  {  buffer.close();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
344	[BUG]  [BUGGY]  if(!finished)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  out.close();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
345	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(out!=  null)  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(out!=  null)  {  out.close();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
346	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  out.write(assemBuf,  0,  assemLen);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	out.write(assemBuf,  0,  assemLen);	  out.close();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
347	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
348	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  end();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  end();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  end();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
349	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  end();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  end();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  end();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
350	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
351	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
352	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().removeChild(buffer);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().removeChild(buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().removeChild(buffer);	  if(!haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
353	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),  true);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),  true);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),  true);	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
354	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),  null);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),  null);	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
355	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),  false);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),  false);	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
356	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().releaseCandidate(currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().releaseCandidate(currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().releaseCandidate(currName);	  Thread.currentThread().getContextClassLoader().close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
357	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().releaseConnection(this);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().releaseConnection(this);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().releaseConnection(this);	  Thread.currentThread().getContextClassLoader().close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
358	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().releaseConnection();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().releaseConnection();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().releaseConnection();	  Thread.currentThread().getContextClassLoader().close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
359	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  buffer.close();  out  =  null;  }	  if(!finished)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
360	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  out  =  null;  }	  if(!finished)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
361	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  buffer.close();  out  =  null;  }	  if(!finished)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
362	[BUG]  [BUGGY]  if(!closed)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  buffer.close();  out  =  null;  }	  if(!finished)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
363	[BUG]  [BUGGY]  if(!hasUnclosed)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  buffer.close();  out  =  null;  }	  if(!finished)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
364	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  out  =  null;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  out  =  null;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  out  =  null;  }  else  {  throw  new  IllegalStateException( " ");  }	  if(!finished)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
365	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(null);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(null);	  Thread.currentThread().getContextClassLoader().finish();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
366	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getName());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getName());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getRawClass().getName());	  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());    	non-compiled	[CE]  <identifier>  expected	26	None	replace
367	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getSimpleName());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getSimpleName());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getRawClass().getSimpleName());	  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());    	non-compiled	[CE]  <identifier>  expected	26	None	replace
368	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getSuperclassLoader());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getSuperclassLoader());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getRawClass().getSuperclassLoader());	  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());    	non-compiled	[CE]  <identifier>  expected	26	None	replace
369	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),  true);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),  true);	  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());    	non-compiled	[CE]  <identifier>  expected	26	None	replace
370	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),  null);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),  null);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),  null);	  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());    	non-compiled	[CE]  <identifier>  expected	26	None	replace
371	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getReturnType());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getReturnType());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getRawClass().getReturnType());	  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());    	non-compiled	[CE]  <identifier>  expected	26	None	replace
372	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  out!=  null)  {  finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  out!=  null)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  out!=  null)  {  finish();  }	  if(hasUnclosedEntry    ||    out!=    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
373	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out.length!=  0)  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out.length!=  0)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out.length!=  0)  {  finish();  }	  if(hasUnclosedEntry    ||    out!=    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
374	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  start();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out!=  null)  {  start();  }	  if(hasUnclosedEntry    ||    out!=    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
375	[BUG]  [BUGGY]  if(!closed)  {  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  if(hasUnclosedEntry)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
376	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
377	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(pending)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(pending)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(pending)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
378	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(assemBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(assemBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
379	[BUG]  [BUGGY]  this.recordBuf.close();  out.close();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close();  out.close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close();  out.close();	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
380	[BUG]  [BUGGY]  if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
381	[BUG]  [BUGGY]  _reportError( "Current  token( "+currName+ ")in  the  cache. ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _reportError( "Current  token( "+currName+ ")in  the  cache. ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportError( "Current  token( "+currName+ ")in  the  cache. ");	  _reportError(   "Current    token(   "+currName+   ")not    in    the    cache.   ");    	non-compiled	[CE]  <identifier>  expected	95	None	replace
382	[BUG]  [BUGGY]  _reportError( "Current  token( "+currName+ ")not  in  the  cache.n ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _reportError( "Current  token( "+currName+ ")not  in  the  cache.n ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportError( "Current  token( "+currName+ ")not  in  the  cache.n ");	  _reportError(   "Current    token(   "+currName+   ")not    in    the    cache.   ");    	non-compiled	[CE]  <identifier>  expected	95	None	replace
383	[BUG]  [BUGGY]  _reportError( "Current  token( "+currName+ ")not  in  the  cache.. ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _reportError( "Current  token( "+currName+ ")not  in  the  cache.. ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportError( "Current  token( "+currName+ ")not  in  the  cache.. ");	  _reportError(   "Current    token(   "+currName+   ")not    in    the    cache.   ");    	non-compiled	[CE]  <identifier>  expected	95	None	replace
384	[BUG]  [BUGGY]  if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  buffer  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  buffer  =  null;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer    =    null;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
385	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  buffer.close();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  buffer.close();  }  else  {  buffer  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  buffer.close();  }  else  {  buffer  =  null;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer    =    null;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
386	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
387	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
388	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
389	[BUG]  [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
390	[BUG]  [BUGGY]  if(!finished)  {  rethrowInternal();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  rethrowInternal();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rethrowInternal();  }	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
391	[BUG]  [BUGGY]  if(!finished)  {  rethrowInternal();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  rethrowInternal();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rethrowInternal();  }  else  {  buffer.close();  out.close();  }	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
392	[BUG]  [BUGGY]  if(!finished)  {  rethrowInternal();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  rethrowInternal();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rethrowInternal();  }  else  {  buffer.close();  }	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
393	[BUG]  [BUGGY]  if(!finished)  {  rethrowInternal();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  rethrowInternal();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rethrowInternal();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
394	[BUG]  [BUGGY]  rehashInternal();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  rehashInternal();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	rehashInternal();	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
395	[BUG]  [BUGGY]  if(!finished)  {  rethrowInternal();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  rethrowInternal();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rethrowInternal();  }  else  {  throw  new  IllegalStateException( " ");  }	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
396	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  buffer);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClass(getClass().getName(),  buffer);	  Thread.currentThread().setContextClass(getClass().getName());    	non-compiled	[CE]  <identifier>  expected	80	None	replace
397	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(getClass().getSimpleName());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClass(getClass().getSimpleName());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClass(getClass().getSimpleName());	  Thread.currentThread().setContextClass(getClass().getName());    	non-compiled	[CE]  <identifier>  expected	80	None	replace
398	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(this.getClass().getName());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClass(this.getClass().getName());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClass(this.getClass().getName());	  Thread.currentThread().setContextClass(getClass().getName());    	non-compiled	[CE]  <identifier>  expected	80	None	replace
399	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  true);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClass(getClass().getName(),  true);	  Thread.currentThread().setContextClass(getClass().getName());    	non-compiled	[CE]  <identifier>  expected	80	None	replace
400	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  this);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  this);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClass(getClass().getName(),  this);	  Thread.currentThread().setContextClass(getClass().getName());    	non-compiled	[CE]  <identifier>  expected	80	None	replace
401	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  currName);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClass(getClass().getName(),  currName);	  Thread.currentThread().setContextClass(getClass().getName());    	non-compiled	[CE]  <identifier>  expected	80	None	replace
402	[BUG]  [BUGGY]  castError( "Tar  error: "  +  getMessage());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castError( "Tar  error: "  +  getMessage());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castError( "Tar  error: "  +  getMessage());	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
403	[BUG]  [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
404	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
405	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
406	[BUG]  [BUGGY]  if(hasUnclosedEntry  &&  buffer!=  null)  {  start();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  &&  buffer!=  null)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  &&  buffer!=  null)  {  start();  }	  if(hasUnclosedEntry    ||    buffer!=    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
407	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(finished)  {  finish();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
408	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
409	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
410	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  start();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!finished)  {  start();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!finished)  {  start();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
411	[BUG]  [BUGGY]  if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
412	[BUG]  [BUGGY]  if(!finished)  {  rethrowAsIOException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  rethrowAsIOException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rethrowAsIOException( " ");  }	  rethrowAsIOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	83	None	replace
413	[BUG]  [BUGGY]  _throwAsIOException( " ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _throwAsIOException( " ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_throwAsIOException( " ");	  rethrowAsIOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	83	None	replace
414	[BUG]  [BUGGY]  rethrowAsIOException( "Current  failure: ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  rethrowAsIOException( "Current  failure: ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	rethrowAsIOException( "Current  failure: ");	  rethrowAsIOException(   "   ");    	non-compiled	[CE]  <identifier>  expected	83	None	replace
415	[BUG]  [BUGGY]  if(!hasUnclosed)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  start();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosed)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
416	[BUG]  [BUGGY]  validateError( "Can  not  close  the  TarBuffer. ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  validateError( "Can  not  close  the  TarBuffer. ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	validateError( "Can  not  close  the  TarBuffer. ");	  castError(   "Can    not    close    the    TarBuffer.   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
417	[BUG]  [BUGGY]  if(!recordBuf.isClosed())  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!recordBuf.isClosed())  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!recordBuf.isClosed())  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
418	[BUG]  [BUGGY]  if(!recordBuf)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!recordBuf)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!recordBuf)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
419	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
420	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
421	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  null;  }  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  null;  }  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  null;  }  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
422	[BUG]  [BUGGY]  if(hadUnclosedEntry  &&  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hadUnclosedEntry  &&  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hadUnclosedEntry  &&  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry    ||    buffer    ==    null)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
423	[BUG]  [BUGGY]  if(!closed)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  finish();  }  else  {  buffer.close();  }	  if(!haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
424	[BUG]  [BUGGY]  if(!cloned)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!cloned)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!cloned)  {  finish();  }  else  {  buffer.close();  }	  if(!haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
425	[BUG]  [BUGGY]  if(!cloned)  {  finish();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!cloned)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!cloned)  {  finish();  }	  if(!haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
426	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[lONGFILE_GNU];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf  =  new  byte[lONGFILE_GNU];  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf  =  new  byte[lONGFILE_GNU];	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
427	[BUG]  [BUGGY]  this.recordBuf  =  recordBuf;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf  =  recordBuf;  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf  =  recordBuf;	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
428	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
429	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  buffer.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
430	[BUG]  [BUGGY]  if(hadUnclosed)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hadUnclosed)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hadUnclosed)  {  start();  }  else  {  buffer.close();  out  =  null;  }	  if(hadUnclosed)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
431	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
432	[BUG]  [BUGGY]  _reportError( "Current  failure: "+getMessage());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _reportError( "Current  failure: "+getMessage());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportError( "Current  failure: "+getMessage());	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
433	[BUG]  [BUGGY]  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
434	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
435	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer  ==  null)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
436	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
437	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),  false);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),  false);	  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());    	non-compiled	[CE]  <identifier>  expected	26	None	replace
438	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this.getRawClass().getClassLoader());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this.getRawClass().getClassLoader());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(this.getRawClass().getClassLoader());	  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());    	non-compiled	[CE]  <identifier>  expected	26	None	replace
439	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),  buffer);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),  buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),  buffer);	  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());    	non-compiled	[CE]  <identifier>  expected	26	None	replace
440	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehash();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehash();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehash();  }	  if(!finished)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
441	[BUG]  [BUGGY]  if(!hasUnclosed)  {  rehash();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  rehash();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  rehash();  }	  if(!finished)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
442	[BUG]  [BUGGY]  MutableToJavaIdentifiers.close(buffer,  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  MutableToJavaIdentifiers.close(buffer,  null);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	MutableToJavaIdentifiers.close(buffer,  null);	  if(!finished)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
443	[BUG]  [BUGGY]  MutableToJavaIdentifiers.close(buffer);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  MutableToJavaIdentifiers.close(buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	MutableToJavaIdentifiers.close(buffer);	  if(!finished)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
444	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf  ==  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
445	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf  ==  null)  {  buffer.close();  }  else  {  out.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
446	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf  ==  null)  {  buffer.close();  out  =  null;  }	  if(recordBuf!=    null)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
447	[BUG]  [BUGGY]  if(buffer!=  null)  {  recordBuf.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer!=  null)  {  recordBuf.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer!=  null)  {  recordBuf.close();  out  =  null;  }	  if(recordBuf!=    null)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
448	[BUG]  [BUGGY]  (recordBuf!=  null)?  null  :  buffer.close();  out  =  null;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  (recordBuf!=  null)?  null  :  buffer.close();  out  =  null;  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	(recordBuf!=  null)?  null  :  buffer.close();  out  =  null;	  if(recordBuf!=    null)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
449	[BUG]  [BUGGY]  wireError( "Current  token( "+getMessage()  + ")not  yet  closed ");  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  wireError( "Current  token( "+getMessage()  + ")not  yet  closed ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	wireError( "Current  token( "+getMessage()  + ")not  yet  closed ");	  castError(   "Current    token(   "+getMessage()    +   ")not    yet    closed   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
450	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
451	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
452	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehashTable();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
453	[BUG]  [BUGGY]  Thread.currentThread().interrupt(true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().interrupt(true);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().interrupt(true);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
454	[BUG]  [BUGGY]  Thread.currentThread().interrupt(terr);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().interrupt(terr);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().interrupt(terr);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
455	[BUG]  [BUGGY]  Thread.currentThread().interrupt(truncation);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().interrupt(truncation);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().interrupt(truncation);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
456	[BUG]  [BUGGY]  if(!cloned)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!cloned)  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!cloned)  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
457	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  out!=  null)  {  finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  &&  out!=  null)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  &&  out!=  null)  {  finish();  }	  if(hasUnclosedEntry    ||    out!=    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
458	[BUG]  [BUGGY]  (hasUnclosedEntry  ||  out!=  null))  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  (hasUnclosedEntry  ||  out!=  null))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	(hasUnclosedEntry  ||  out!=  null))  {  finish();  }	  if(hasUnclosedEntry    ||    out!=    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
459	[BUG]  [BUGGY]  if(closed)  {  finish();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {  finish();  }	  if(!haveUnclosedEntry)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
460	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehashTable();  }  else  {  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
461	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
462	[BUG]  [BUGGY]  if(!hasUnclosed)  {  rehashTable();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  rehashTable();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  rehashTable();  }  else  {  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
463	[BUG]  [BUGGY]  if(closed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(!haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
464	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	OutputStream  out  =  buffer.getOutputStream();	  if(!haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
465	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  &&  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
466	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
467	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
468	[BUG]  [BUGGY]  if(buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    start();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
469	[BUG]  [BUGGY]  if(buffered  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffered  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffered  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    start();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
470	[BUG]  [BUGGY]  if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf  ==  null)  {  this.recordBuf.close();  }  else  {  out.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
471	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  out.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
472	[BUG]  [BUGGY]  Parchet.checkState(hasUnclosedEntry);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Parchet.checkState(hasUnclosedEntry);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Parchet.checkState(hasUnclosedEntry);	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
473	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getResourceAsStream(recordBuf));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getClass().getResourceAsStream(recordBuf));  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getClass().getResourceAsStream(recordBuf));	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
474	[BUG]  [BUGGY]  EndUtil.closeTarBuffer(buffer);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  EndUtil.closeTarBuffer(buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	EndUtil.closeTarBuffer(buffer);	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
475	[BUG]  [BUGGY]  EndUtil.closeEndUtilities();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  EndUtil.closeEndUtilities();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	EndUtil.closeEndUtilities();	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
476	[BUG]  [BUGGY]  if(!closed)  {  end();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  end();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  end();  }	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
477	[BUG]  [BUGGY]  EndUtil.closeAndClose(buffer);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  EndUtil.closeAndClose(buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	EndUtil.closeAndClose(buffer);	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
478	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  out  =  true;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
479	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  out  =  false;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
480	[BUG]  [BUGGY]  safeTarBuffer.close(out);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  safeTarBuffer.close(out);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	safeTarBuffer.close(out);	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
481	[BUG]  [BUGGY]  safeTarBuffer.close(buffer);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  safeTarBuffer.close(buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	safeTarBuffer.close(buffer);	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
482	[BUG]  [BUGGY]  SafeTarBuffer.close(buffer);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  SafeTarBuffer.close(buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	SafeTarBuffer.close(buffer);	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
483	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!haveUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
484	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
485	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||!finished)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
486	[BUG]  [BUGGY]  if(!hasUnclosed)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
487	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  out);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  out);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class,  out);	  Thread.currentThread().setContextClassLoader(TarBuffer.class);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
488	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  buffer.close();  out  =  null;  }	  if(!finished)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
489	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!haveUnclosedEntry)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  buffer.close();  out  =  null;  }	  if(!finished)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
490	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||!finished)  {  buffer.close();  out  =  null;  }	  if(!finished)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
491	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(!finished)  {  buffer.close();  out  =  null;  }	  if(!finished)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
492	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
493	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().release(recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().release(recordBuf);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().release(recordBuf);	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
494	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
495	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
496	[BUG]  [BUGGY]  if(buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
497	[BUG]  [BUGGY]  Thread.currentThread().setContext(getCurrentThreadContext());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContext(getCurrentThreadContext());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContext(getCurrentThreadContext());	  Thread.currentThread().setContextClassLoader(getCurrentThreadContext());    	non-compiled	[CE]  <identifier>  expected	48	None	replace
498	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
499	[BUG]  [BUGGY]  RenameTraversal.traverse(compiler,  this).traverse(rehashTable());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RenameTraversal.traverse(compiler,  this).traverse(rehashTable());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RenameTraversal.traverse(compiler,  this).traverse(rehashTable());	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
500	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(finished)  {  start();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(finished)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  if(finished)  {  start();  }	  if(hasUnclosedEntry)    {    if(finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
501	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  if(finished)  {  start();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  if(finished)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out!=  null)  {  if(finished)  {  start();  }	  if(hasUnclosedEntry)    {    if(finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
502	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out  ==  null)  {  if(finished)  {  start();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out  ==  null)  {  if(finished)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out  ==  null)  {  if(finished)  {  start();  }	  if(hasUnclosedEntry)    {    if(finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
503	[BUG]  [BUGGY]  ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)this.recordBuf.clone();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)this.recordBuf.clone();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)this.recordBuf.clone();	  if(!finished)    {    rehashTable();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
504	[BUG]  [BUGGY]  ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)reflectionMap.get(buffer);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)reflectionMap.get(buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)reflectionMap.get(buffer);	  if(!finished)    {    rehashTable();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
505	[BUG]  [BUGGY]  ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)reflection.clone();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)reflection.clone();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)reflection.clone();	  if(!finished)    {    rehashTable();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
506	[BUG]  [BUGGY]  ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)this.recordBuf;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)this.recordBuf;  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)this.recordBuf;	  if(!finished)    {    rehashTable();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
507	[BUG]  [BUGGY]  ReflectionTarBuffer  buffer  =  getReflectionTarBuffer();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  ReflectionTarBuffer  buffer  =  getReflectionTarBuffer();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	ReflectionTarBuffer  buffer  =  getReflectionTarBuffer();	  if(!finished)    {    rehashTable();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
508	[BUG]  [BUGGY]  ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)this.recordBuf.get(buffer);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)this.recordBuf.get(buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	ReflectionTarBuffer  buffer  =(ReflectionTarBuffer)this.recordBuf.get(buffer);	  if(!finished)    {    rehashTable();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
509	[BUG]  [BUGGY]  System.err.println( "Closed  TarBuffer  cloned ");  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  System.err.println( "Closed  TarBuffer  cloned ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	System.err.println( "Closed  TarBuffer  cloned ");	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	86	None	replace
510	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned:  missing ");  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  System.err.println( "TarBuffer  cloned:  missing ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	System.err.println( "TarBuffer  cloned:  missing ");	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	86	None	replace
511	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned  by: "  +  currName);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  System.err.println( "TarBuffer  cloned  by: "  +  currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	System.err.println( "TarBuffer  cloned  by: "  +  currName);	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	86	None	replace
512	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned:  ' "  +  currName);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  System.err.println( "TarBuffer  cloned:  ' "  +  currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	System.err.println( "TarBuffer  cloned:  ' "  +  currName);	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	86	None	replace
513	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
514	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
515	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||!finished)  {  buffer.close();  }  else  {  out.close();  }	  if(!finished)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
516	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!haveUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  buffer.close();  }  else  {  out.close();  }	  if(!finished)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
517	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!haveUnclosedEntry)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
518	[BUG]  [BUGGY]  this.assemBuf.closeAll();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.assemBuf.closeAll();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.assemBuf.closeAll();	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
519	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  start();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  start();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  start();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
520	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  start();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  start();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer  ==  null)  {  start();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
521	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
522	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
523	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  if(finished)  {  finish();  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
524	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
525	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
526	[BUG]  [BUGGY]  if(hasUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  finish();  }  else  {  buffer.close();  out  =  false;  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
527	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out  =  false;  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
528	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  if(!finished)  {  start();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  if(!finished)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out!=  null)  {  if(!finished)  {  start();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
529	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  if(!finished)  {  start();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  if(!finished)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer  ==  null)  {  if(!finished)  {  start();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
530	[BUG]  [BUGGY]  if(!closed)  {  start();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  start();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
531	[BUG]  [BUGGY]  Thread.sleep().getContextClassLoader().finish();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.sleep().getContextClassLoader().finish();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.sleep().getContextClassLoader().finish();	  Thread.currentThread().getContextClassLoader().finish();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
532	[BUG]  [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.remove(recordBuf.length);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.remove(recordBuf.length);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	(recordBuf!=  null)?  null  :  recordBuf.remove(recordBuf.length);	  if(recordBuf!=    null)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
533	[BUG]  [BUGGY]  RecordBuffer  buffer  =  new  RecordBuffer(recordBuf);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RecordBuffer  buffer  =  new  RecordBuffer(recordBuf);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RecordBuffer  buffer  =  new  RecordBuffer(recordBuf);	  if(recordBuf!=    null)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
534	[BUG]  [BUGGY]  This.recordBuf.close();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  This.recordBuf.close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	This.recordBuf.close();	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
535	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  rehashCode();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  rehashCode();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  rehashCode();  }  else  {  buffer.close();  out  =  null;  }	  rehashCode();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
536	[BUG]  [BUGGY]  if(!finished)  {  rehashCode();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  rehashCode();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  rehashCode();  }  else  {  buffer.close();  out  =  null;  }	  rehashCode();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
537	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  rehashCode();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  rehashCode();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  rehashCode();  }  else  {  buffer.close();  out  =  true;  }	  rehashCode();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
538	[BUG]  [BUGGY]  final  boolean  haveUnclosedEntry  =  hasUnclosedEntry();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  final  boolean  haveUnclosedEntry  =  hasUnclosedEntry();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	final  boolean  haveUnclosedEntry  =  hasUnclosedEntry();	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
539	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  buffer  ==  null)  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  &&  buffer  ==  null)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  &&  buffer  ==  null)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer    ==    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
540	[BUG]  [BUGGY]  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  false;  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	103	None	replace
541	[BUG]  [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.reset();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  (recordBuf!=  null)?  null  :  recordBuf.reset();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	(recordBuf!=  null)?  null  :  recordBuf.reset();	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
542	[BUG]  [BUGGY]  this.recordBuf.close(buff,  out);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(buff,  out);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(buff,  out);	  this.recordBuf.close(out);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
543	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
544	[BUG]  [BUGGY]  if(!hasUnclosed)  {  rehash();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  rehash();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  rehash();  }  else  {  buffer.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
545	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf  ==  null)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf  ==  null)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
546	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  rehash();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf  ==  null)  {  rehash();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf  ==  null)  {  rehash();  }	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
547	[BUG]  [BUGGY]  TasksUiUtil.closeTarBuffer(buffer);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  TasksUiUtil.closeTarBuffer(buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	TasksUiUtil.closeTarBuffer(buffer);	  if(!closed)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
548	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
549	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
550	[BUG]  [BUGGY]  castingError( "Current  token( "+getName()  + ")not  a  valid  file  type ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  castingError( "Current  token( "+getName()  + ")not  a  valid  file  type ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	castingError( "Current  token( "+getName()  + ")not  a  valid  file  type ");	  castError(   "Current    token(   "+getName()    +   ")not    a    valid    file    type   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
551	[BUG]  [BUGGY]  wireError( "Current  token( "+getName()  + ")not  a  valid  file  type ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  wireError( "Current  token( "+getName()  + ")not  a  valid  file  type ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	wireError( "Current  token( "+getName()  + ")not  a  valid  file  type ");	  castError(   "Current    token(   "+getName()    +   ")not    a    valid    file    type   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
552	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
553	[BUG]  [BUGGY]  if(!hasUnclosed)  {  rehashTable();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  rehashTable();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  rehashTable();  }  else  {  buffer.close();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
554	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
555	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
556	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  true;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
557	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
558	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
559	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
560	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
561	[BUG]  [BUGGY]  assemBuf.close(out);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  assemBuf.close(out);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	assemBuf.close(out);	  assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
562	[BUG]  [BUGGY]  assemBuf.close(true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  assemBuf.close(true);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	assemBuf.close(true);	  assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
563	[BUG]  [BUGGY]  assemBuf.closeAll();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  assemBuf.closeAll();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	assemBuf.closeAll();	  assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
564	[BUG]  [BUGGY]  this.recordBuf.close(true,  0);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(true,  0);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(true,  0);	  this.recordBuf.close(true);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
565	[BUG]  [BUGGY]  this.recordBuf.close(true,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close(true,  false);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close(true,  false);	  this.recordBuf.close(true);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
566	[BUG]  [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  buffer.close();  }  else  {  buffer.close();  out.close();  }	  if(!hasUnclosed)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
567	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
568	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
569	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }	  if(!hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
570	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  buffer.close();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
571	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!haveUnclosedEntry)  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  buffer.close();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
572	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||!finished)  {  buffer.close();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
573	[BUG]  [BUGGY]  if(!hasUnclosed)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  buffer.close();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
574	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),  buffer);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),  buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),  buffer);	  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader());    	non-compiled	[CE]  <identifier>  expected	23	None	replace
575	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(new  ClassLoader(TarBuffer.class.getClassLoader()));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(new  ClassLoader(TarBuffer.class.getClassLoader()));  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(new  ClassLoader(TarBuffer.class.getClassLoader()));	  Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader());    	non-compiled	[CE]  <identifier>  expected	23	None	replace
576	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  if(!finished)  {  finish();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  if(!finished)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out!=  null)  {  if(!finished)  {  finish();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
577	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!cloned)  {  finish();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!cloned)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!cloned)  {  finish();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
578	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
579	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
580	[BUG]  [BUGGY]  if(hasUnclosed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  buffer.close();  }	  if(hasUnclosedEntry)    {    buffer.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
581	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  buffer.close();  }	  if(hasUnclosedEntry)    {    buffer.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
582	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out!=  null)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out!=  null)  {  buffer.close();  }	  if(hasUnclosedEntry)    {    buffer.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
583	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
584	[BUG]  [BUGGY]  wireError( "TarArchiveOutputStream  closed: "  +  getMessage());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  wireError( "TarArchiveOutputStream  closed: "  +  getMessage());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	wireError( "TarArchiveOutputStream  closed: "  +  getMessage());	  castError(   "TarArchiveOutputStream    closed:   "    +    getMessage());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
585	[BUG]  [BUGGY]  handleMissingResource( "TarArchiveOutputStream  closed: "  +  getMessage());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  handleMissingResource( "TarArchiveOutputStream  closed: "  +  getMessage());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	handleMissingResource( "TarArchiveOutputStream  closed: "  +  getMessage());	  castError(   "TarArchiveOutputStream    closed:   "    +    getMessage());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
586	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().closeQueue();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().closeQueue();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().closeQueue();	  Thread.currentThread().getContextClassLoader().close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
587	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().close(null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().close(null);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().close(null);	  Thread.currentThread().getContextClassLoader().close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
588	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().close(true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().close(true);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().close(true);	  Thread.currentThread().getContextClassLoader().close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
589	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().close(this);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().close(this);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().close(this);	  Thread.currentThread().getContextClassLoader().close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
590	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().close(recordBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().close(recordBuf);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().close(recordBuf);	  Thread.currentThread().getContextClassLoader().close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
591	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().close(out);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().close(out);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().close(out);	  Thread.currentThread().getContextClassLoader().close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
592	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
593	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
594	[BUG]  [BUGGY]  if(buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
595	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
596	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer  =  null;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer    =    null;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
597	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  buffer  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  buffer  =  null;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer    =    null;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
598	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  start();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer  ==  null)  {  start();  }	  if(hasUnclosedEntry)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
599	[BUG]  [BUGGY]  final  if(hasUnclosedEntry)  {  finish();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  final  if(hasUnclosedEntry)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	final  if(hasUnclosedEntry)  {  finish();  }	  if(!hasUnclosedEntry)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
600	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
601	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out.isEnabled(Surrogate.DEPRECATED))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
602	[BUG]  [BUGGY]  if(isEnabled(Surrogate.DEPRECATED)||  hasUnclosedEntry)  {  finish();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Surrogate.DEPRECATED)||  hasUnclosedEntry)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Surrogate.DEPRECATED)||  hasUnclosedEntry)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
603	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
604	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  buffer!=  null)  {  finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  &&  buffer!=  null)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  &&  buffer!=  null)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer!=    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
605	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.length!=  0)  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.length!=  0)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.length!=  0)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer!=    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
606	[BUG]  [BUGGY]  if(haveUnclosedEntry  ||  buffer!=  null)  {  finish();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(haveUnclosedEntry  ||  buffer!=  null)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(haveUnclosedEntry  ||  buffer!=  null)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer!=    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	79	None	replace
607	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  ==  0)  {  finish();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  ==  0)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.length  ==  0)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.length    >    0)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
608	[BUG]  [BUGGY]  if(!hasUnclosedEntry  &&  buffer.length  >  0)  {  finish();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  &&  buffer.length  >  0)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  &&  buffer.length  >  0)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.length    >    0)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
609	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  <  =  0)  {  finish();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  <  =  0)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.length  <  =  0)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.length    >    0)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
610	[BUG]  [BUGGY]  if(!hasUnclosedEntry  ||  buffer.isEnabled())  {  finish();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry  ||  buffer.isEnabled())  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry  ||  buffer.isEnabled())  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled())    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
611	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out.isEnabled())  {  finish();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out.isEnabled())  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out.isEnabled())  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled())    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
612	[BUG]  [BUGGY]  ((  TarBuffer)buffer).close();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  ((  TarBuffer)buffer).close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	((  TarBuffer)buffer).close();	  if(hasUnclosedEntry    ||    buffer.isEnabled())    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
613	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled())  {  start();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled())  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled())  {  start();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled())    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
614	[BUG]  [BUGGY]  if(!finished)  {  out.close();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  out.close();  }  else  {  buffer  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  out.close();  }  else  {  buffer  =  null;  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
615	[BUG]  [BUGGY]  if(!finished)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished)  {  out.close();  }  else  {  buffer.flush();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
616	[BUG]  [BUGGY]  wireError( "Current  token( "+getMessage()  +   ")not  a  valid  file  type ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  wireError( "Current  token( "+getMessage()  +   ")not  a  valid  file  type ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	wireError( "Current  token( "+getMessage()  +   ")not  a  valid  file  type ");	  castError(   "Current    token(   "+getMessage()    +   ")not    a    valid    file    type   ");    	non-compiled	[CE]  <identifier>  expected	19	None	replace
617	[BUG]  [BUGGY]  if(hadUnclosedEntry  &&  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hadUnclosedEntry  &&  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hadUnclosedEntry  &&  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry    ||    buffer!=    null)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
618	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
619	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
620	[BUG]  [BUGGY]  if(!hasUnclosed)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
621	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  start();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  start();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  start();  }  else  {  buffer.close();  out  =  false;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
622	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
623	[BUG]  [BUGGY]  if(!haveUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!haveUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!haveUnclosedEntry)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
624	[BUG]  [BUGGY]  if(!hasUnclosed)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
625	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
626	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  false;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
627	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  false;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
628	[BUG]  [BUGGY]  rethrowAsIOException();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  rethrowAsIOException();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	rethrowAsIOException();	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
629	[BUG]  [BUGGY]  retryInternal();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  retryInternal();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	retryInternal();	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
630	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  false);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClass(getClass().getName(),  false);	  Thread.currentThread().setContextClass(getClass().getName());    	non-compiled	[CE]  <identifier>  expected	80	None	replace
631	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  out);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  out);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClass(getClass().getName(),  out);	  Thread.currentThread().setContextClass(getClass().getName());    	non-compiled	[CE]  <identifier>  expected	80	None	replace
632	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  null);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClass(getClass().getName(),  null);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClass(getClass().getName(),  null);	  Thread.currentThread().setContextClass(getClass().getName());    	non-compiled	[CE]  <identifier>  expected	80	None	replace
633	[BUG]  [BUGGY]  Os.write(buffer,  0,  out.length);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Os.write(buffer,  0,  out.length);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Os.write(buffer,  0,  out.length);	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
634	[BUG]  [BUGGY]  Os.write(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Os.write(buffer,  0,  buffer.length);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Os.write(buffer,  0,  buffer.length);	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
635	[BUG]  [BUGGY]  this.os.close();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.os.close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.os.close();	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
636	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_GNU.length];  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_GNU.length];  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf  =  new  byte[LONGFILE_GNU.length];	  this.recordBuf.flush();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
637	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
638	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
639	[BUG]  [BUGGY]  if(!closed)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!finished)    {    buffer.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
640	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  buffer.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!finished)    {    buffer.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
641	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(!finished)    {    buffer.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
642	[BUG]  [BUGGY]  _reportError( "Current  token( "+currName+ ")Not  in  the  cache. ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _reportError( "Current  token( "+currName+ ")Not  in  the  cache. ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportError( "Current  token( "+currName+ ")Not  in  the  cache. ");	  _reportError(   "Current    token(   "+currName+   ")not    in    the    cache.   ");    	non-compiled	[CE]  <identifier>  expected	95	None	replace
643	[BUG]  [BUGGY]  _reportError( "Current  token( "+currName+ ")can  not  in  the  cache. ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _reportError( "Current  token( "+currName+ ")can  not  in  the  cache. ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportError( "Current  token( "+currName+ ")can  not  in  the  cache. ");	  _reportError(   "Current    token(   "+currName+   ")not    in    the    cache.   ");    	non-compiled	[CE]  <identifier>  expected	95	None	replace
644	[BUG]  [BUGGY]  this.recordBuf.release(assemBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.release(assemBuf);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.release(assemBuf);	  this.recordBuf.release();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
645	[BUG]  [BUGGY]  if(closed)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {  buffer.close();  out  =  null;  }	  if(!finished)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
646	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(finished)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(finished)  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(finished)  {  buffer.close();  out  =  null;  }	  if(!finished)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	84	None	replace
647	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close(true);  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close(true);  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close(true);  }  else  {  buffer.close();  out.close();  }	  this.recordBuf.close(true);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
648	[BUG]  [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  buffer.close();  }  else  {  out.close();  }	  if(!finished)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
649	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  end();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  end();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  end();  }	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
650	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTED_FIELD_NAMES))  {  end();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTED_FIELD_NAMES))  {  end();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTED_FIELD_NAMES))  {  end();  }	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
651	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  end();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  end();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  end();  }	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
652	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  end();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  end();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  end();  }	  if(!hasUnclosedEntry)    {    end();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
653	[BUG]  [BUGGY]  _reportError( "Current  error: "  +  currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _reportError( "Current  error: "  +  currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportError( "Current  error: "  +  currName);	  rethrowInternal();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
654	[BUG]  [BUGGY]  reportError( "Can  not  close  the  TarBuffer. ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  reportError( "Can  not  close  the  TarBuffer. ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	reportError( "Can  not  close  the  TarBuffer. ");	  castError(   "Can    not    close    the    TarBuffer.   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
655	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehash();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehash();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(!finished)  {  rehash();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
656	[BUG]  [BUGGY]  if(hasUnclosed)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
657	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.flush();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.flush();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.flush();  }  else  {  buffer.close();  out  =  true;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
658	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  out.close();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  out.close();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  out.close();  }  else  {  buffer.close();  out  =  true;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	117	None	replace
659	[BUG]  [BUGGY]  if(!closed)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
660	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  end();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  end();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  end();  }  else  {  buffer.close();  out.close();  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
661	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
662	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.AUTO_CLOSE_SOURCE))  {	  if(!hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
663	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.release();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.release();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.release();  }  else  {  buffer.close();  }	  this.recordBuf.release();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
664	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.release();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.release();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.release();  }	  this.recordBuf.release();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
665	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.release();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.release();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.release();  }  else  {  buffer.close();  out.close();  }	  this.recordBuf.release();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
666	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  close();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  close();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  close();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
667	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  closed);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  closed);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class,  closed);	  Thread.currentThread().setContextClassLoader(TarBuffer.class);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
668	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  this);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(TarBuffer.class,  this);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(TarBuffer.class,  this);	  Thread.currentThread().setContextClassLoader(TarBuffer.class);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
669	[BUG]  [BUGGY]  this.closeUnclosedEntry();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.closeUnclosedEntry();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.closeUnclosedEntry();	  if(haveUnclosedEntry)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	72	None	replace
670	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  start();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  start();  }	  if(hasUnclosedEntry)    {    if(finished)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
671	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass(),  getClassLoader());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getRawClass(),  getClassLoader());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getRawClass(),  getClassLoader());	  Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());    	non-compiled	[CE]  <identifier>  expected	26	None	replace
672	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  out.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  out.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  out.close();  out  =  null;  }	  if(recordBuf!=    null)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
673	[BUG]  [BUGGY]  buffer.close();  out  =  null;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  buffer.close();  out  =  null;  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	buffer.close();  out  =  null;	  if(recordBuf!=    null)    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
674	[BUG]  [BUGGY]  if(closed)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {  finish();  }  else  {  buffer.close();  }	  if(!haveUnclosedEntry)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
675	[BUG]  [BUGGY]  assemBuf  =  new  byte[LONGFILE_GNU.length];  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  assemBuf  =  new  byte[LONGFILE_GNU.length];  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	assemBuf  =  new  byte[LONGFILE_GNU.length];	  assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
676	[BUG]  [BUGGY]  assemBuf  =  new  byte[LONGFILE_GNU].getBytes();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  assemBuf  =  new  byte[LONGFILE_GNU].getBytes();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	assemBuf  =  new  byte[LONGFILE_GNU].getBytes();	  assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
677	[BUG]  [BUGGY]  assemBuf  =  null;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  assemBuf  =  null;  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	assemBuf  =  null;	  assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
678	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer  ==  null)  {  finish();  }  else  {  buffer.close();  out  =  false;  }	  if(hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	102	None	replace
679	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  >  0)  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.length  >  0)  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
680	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.length()  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.length()  >  0)  {  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.length()  >  0)  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
681	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  out.close();  }	  if(recordBuf!=    null)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
682	[BUG]  [BUGGY]  if(!closed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
683	[BUG]  [BUGGY]  this.recordBuf.close();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf.close();  }  else  {  buffer  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf.close();  }  else  {  buffer  =  null;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer    =    null;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
684	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.flush();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.flush();  }  else  {  buffer  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.flush();  }  else  {  buffer  =  null;  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer    =    null;    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
685	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  startNewLine();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  startNewLine();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  startNewLine();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    start();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
686	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer!=  null)  {  buffer.close();  }  else  {  out.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
687	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer!=  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
688	[BUG]  [BUGGY]  if(buffered  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffered  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffered  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
689	[BUG]  [BUGGY]  if(this.hasUnclosedEntry)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.hasUnclosedEntry)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.hasUnclosedEntry)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
690	[BUG]  [BUGGY]  if(closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
691	[BUG]  [BUGGY]  if(buffered  ||  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffered  ||  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffered  ||  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
692	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED)||  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED)||  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED)||  buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
693	[BUG]  [BUGGY]  if(buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer.isEnabled(Surrogate.DEPRECATED))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
694	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED)||  out.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED)||  out.isEnabled(Surrogate.DEPRECATED))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED)||  out.isEnabled(Surrogate.DEPRECATED))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEPRECATED))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
695	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_GNU  +  LONGFILE_TRUNCATE];  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_GNU  +  LONGFILE_TRUNCATE];  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf  =  new  byte[LONGFILE_GNU  +  LONGFILE_TRUNCATE];	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
696	[BUG]  [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_GNU].getBytes();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.recordBuf  =  new  byte[LONGFILE_GNU].getBytes();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.recordBuf  =  new  byte[LONGFILE_GNU].getBytes();	  this.recordBuf    =    null;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
697	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out  ==  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out  ==  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out  ==  null)  {  if(!finished)  {  finish();  }  else  {  buffer.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
698	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out  ==  null)  {  if(!finished)  {  finish();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out  ==  null)  {  if(!finished)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out  ==  null)  {  if(!finished)  {  finish();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
699	[BUG]  [BUGGY]  RehashMap  <  String,  TarBuffer>  out  =  new  RehashMap  <  String,  TarBuffer>(buffer.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RehashMap  <  String,  TarBuffer>  out  =  new  RehashMap  <  String,  TarBuffer>(buffer.length);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RehashMap  <  String,  TarBuffer>  out  =  new  RehashMap  <  String,  TarBuffer>(buffer.length);	  if(!finished)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
700	[BUG]  [BUGGY]  RehashMap  <  String,  TarBuffer>  out  =  new  RehashMap  <  String,  TarBuffer>();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RehashMap  <  String,  TarBuffer>  out  =  new  RehashMap  <  String,  TarBuffer>();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RehashMap  <  String,  TarBuffer>  out  =  new  RehashMap  <  String,  TarBuffer>();	  if(!finished)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
701	[BUG]  [BUGGY]  RehashMap  <  String,  TarBuffer>  buffer  =  new  RehashMap  <  String,  TarBuffer>();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RehashMap  <  String,  TarBuffer>  buffer  =  new  RehashMap  <  String,  TarBuffer>();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RehashMap  <  String,  TarBuffer>  buffer  =  new  RehashMap  <  String,  TarBuffer>();	  if(!finished)    {    rehash();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
702	[BUG]  [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU.length];  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU.length];  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.assemBuf  =  new  byte[LONGFILE_GNU.length];	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
703	[BUG]  [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU];  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU];  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.assemBuf  =  new  byte[LONGFILE_GNU];	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
704	[BUG]  [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU].getBytes();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU].getBytes();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.assemBuf  =  new  byte[LONGFILE_GNU].getBytes();	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
705	[BUG]  [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU].getBytes(currName);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  this.assemBuf  =  new  byte[LONGFILE_GNU].getBytes(currName);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	this.assemBuf  =  new  byte[LONGFILE_GNU].getBytes(currName);	  this.assemBuf.close();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
706	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
707	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
708	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  finish();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  finish();  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
709	[BUG]  [BUGGY]  Iterator  <  TarBuffer>  out  =  this.recordBuf.entrySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Iterator  <  TarBuffer>  out  =  this.recordBuf.entrySet().iterator();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Iterator  <  TarBuffer>  out  =  this.recordBuf.entrySet().iterator();	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
710	[BUG]  [BUGGY]  Iterator  <  TarBuffer>  out  =  this.recordBuf.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Iterator  <  TarBuffer>  out  =  this.recordBuf.iterator();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Iterator  <  TarBuffer>  out  =  this.recordBuf.iterator();	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
711	[BUG]  [BUGGY]  Iterator  <  TarBuffer>  out  =  this.recordBuf.values().iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Iterator  <  TarBuffer>  out  =  this.recordBuf.values().iterator();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Iterator  <  TarBuffer>  out  =  this.recordBuf.values().iterator();	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
712	[BUG]  [BUGGY]  Thread.currentThread().intermediateThread().getContextClassLoader().close();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().intermediateThread().getContextClassLoader().close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().intermediateThread().getContextClassLoader().close();	  Thread.currentThread().getContextClassLoader().close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
713	[BUG]  [BUGGY]  Thread.sleep().getContextClassLoader().close();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.sleep().getContextClassLoader().close();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.sleep().getContextClassLoader().close();	  Thread.currentThread().getContextClassLoader().close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
714	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().closeAllArchiveOutputStream();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().closeAllArchiveOutputStream();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().closeAllArchiveOutputStream();	  Thread.currentThread().getContextClassLoader().close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
715	[BUG]  [BUGGY]  if(recordSize  >  0)  {  rehashCode();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordSize  >  0)  {  rehashCode();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordSize  >  0)  {  rehashCode();  }  else  {  buffer.close();  out  =  null;  }	  rehashCode();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
716	[BUG]  [BUGGY]  if(recordSize  >  0)  {  rehashCode();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordSize  >  0)  {  rehashCode();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordSize  >  0)  {  rehashCode();  }  else  {  buffer.close();  }	  rehashCode();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
717	[BUG]  [BUGGY]  if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
718	[BUG]  [BUGGY]  if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  else  {  buffer.close();  }	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
719	[BUG]  [BUGGY]  if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  else  {  buffer  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  else  {  buffer  =  null;  }	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
720	[BUG]  [BUGGY]  if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  else  {  buffer.close();  out.close();  }	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
721	[BUG]  [BUGGY]  if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(safeTarBuffer!=  null)  {  safeTarBuffer.close();  }  else  {  buffer.close();  out  =  null;  }	  safeTarBuffer.close();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
722	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  rehashTable();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  rehashTable();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||!finished)  {  rehashTable();  }  else  {  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
723	[BUG]  [BUGGY]  scan( "Current  token( "+getMessage()  + ")not  yet  closed ");  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  scan( "Current  token( "+getMessage()  + ")not  yet  closed ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	scan( "Current  token( "+getMessage()  + ")not  yet  closed ");	  castError(   "Current    token(   "+getMessage()    +   ")not    yet    closed   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
724	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer!=  null)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer!=  null)  {  start();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
725	[BUG]  [BUGGY]  if(closed)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  start();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {  start();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
726	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  OutputStream  out  =  getOutputStream();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	OutputStream  out  =  getOutputStream();	  if(!hasUnclosed)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
727	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  end();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry)  {  end();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry)  {  end();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
728	[BUG]  [BUGGY]  Thread.currentThread().setContextClass(new  Class[]  {  getClass().getName()  }  );  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClass(new  Class[]  {  getClass().getName()  }  );  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClass(new  Class[]  {  getClass().getName()  }  );	  Thread.currentThread().setContextClass(getClass().getName());    	non-compiled	[CE]  <identifier>  expected	80	None	replace
729	[BUG]  [BUGGY]  if(buffer!=  null)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer!=  null)  {  rehash();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer!=  null)  {  rehash();  }  else  {  buffer.close();  out.close();  }	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
730	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(!finished)  {  buffer.close();  }	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
731	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(buffer.length  ==  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(buffer.length  ==  0)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(buffer.length  ==  0)  {  buffer.close();  }	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
732	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
733	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
734	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(!finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
735	[BUG]  [BUGGY]  System.err.println( "TarBuffer  cloned  by ");  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  System.err.println( "TarBuffer  cloned  by ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	System.err.println( "TarBuffer  cloned  by ");	  System.err.println(   "TarBuffer    cloned   ");    	non-compiled	[CE]  <identifier>  expected	86	None	replace
736	[BUG]  [BUGGY]  Thread.currentThread().intermediateThread().getContextClassLoader().finish();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().intermediateThread().getContextClassLoader().finish();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().intermediateThread().getContextClassLoader().finish();	  Thread.currentThread().getContextClassLoader().finish();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
737	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(this);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(this);	  Thread.currentThread().getContextClassLoader().finish();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
738	[BUG]  [BUGGY]  if(isRecorded())  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isRecorded())  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isRecorded())  {  rehashTable();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
739	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(!finished)  {  buffer.close();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
740	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(finished)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(finished)  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(finished)  {  buffer.close();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
741	[BUG]  [BUGGY]  if(hasUnclosed)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  buffer.close();  out.close();  }	  if(!finished)    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
742	[BUG]  [BUGGY]  if(buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
743	[BUG]  [BUGGY]  if(buffered  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffered  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffered  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
744	[BUG]  [BUGGY]  if(!finished  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!finished  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!finished  ||  buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
745	[BUG]  [BUGGY]  if(buffered  ||  hasUnclosedEntry)  {  finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffered  ||  hasUnclosedEntry)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffered  ||  hasUnclosedEntry)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer    ==    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
746	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  out  =  null;  }	  this.recordBuf.close(out);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
747	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  out  =  null;  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  out  =  null;  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  out  =  null;  }  else  {  buffer.close();  }	  this.recordBuf.close(out);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
748	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
749	[BUG]  [BUGGY]  if(isRecorded())  {  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isRecorded())  {  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isRecorded())  {  if(!hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
750	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasUnclosedEntry)  {  start();  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
751	[BUG]  [BUGGY]  if(isRecorded())  {  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isRecorded())  {  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isRecorded())  {  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
752	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(hasUnclosedEntry)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(!hasUnclosedEntry)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	63	None	replace
753	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehashTable();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!finished)  {  rehashTable();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(!finished)  {  rehashTable();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
754	[BUG]  [BUGGY]  if(!hasUnclosed)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  rehashTable();  }  else  {  buffer.close();  out.close();  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
755	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.closeAll();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.closeAll();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.closeAll();  }  else  {  buffer.close();  out.close();  }	  this.recordBuf.closeAll();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
756	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||!finished)  {  rehashTable();  }  else  {  buffer.close();  out  =  false;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    false;    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
757	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }	  if(!hasUnclosedEntry)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
758	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  start();  }	  if(!hasUnclosedEntry)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
759	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  start();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.FLUSH_PASSED_TO_STREAM))  {  start();  }	  if(!hasUnclosedEntry)    {    start();    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
760	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.finish();  }  else  {  buffer.close();  out.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	116	None	replace
761	[BUG]  [BUGGY]  Thread.currentThread().interrupt(thread);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().interrupt(thread);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().interrupt(thread);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
762	[BUG]  [BUGGY]  Thread.currentThread().interrupt(threadMode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().interrupt(threadMode);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().interrupt(threadMode);	  Thread.currentThread().interrupt();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
763	[BUG]  [BUGGY]  RehashTable  <  T>  buffer  =  new  RehashTable  <  T>();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RehashTable  <  T>  buffer  =  new  RehashTable  <  T>();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RehashTable  <  T>  buffer  =  new  RehashTable  <  T>();	  if(!finished)    {    rehashTable();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
764	[BUG]  [BUGGY]  RehashTable  <  T>  buffer  =  rehashTable();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RehashTable  <  T>  buffer  =  rehashTable();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RehashTable  <  T>  buffer  =  rehashTable();	  if(!finished)    {    rehashTable();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
765	[BUG]  [BUGGY]  RehashTable  <  T>  buffer  =  new  RehashTable  <  T>(rehashTable());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  RehashTable  <  T>  buffer  =  new  RehashTable  <  T>(rehashTable());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	RehashTable  <  T>  buffer  =  new  RehashTable  <  T>(rehashTable());	  if(!finished)    {    rehashTable();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
766	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  rehash();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf  ==  null)  {  rehash();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf  ==  null)  {  rehash();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
767	[BUG]  [BUGGY]  if(buffer!=  null)  {  rehash();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer!=  null)  {  rehash();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer!=  null)  {  rehash();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
768	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(recordBuf!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(recordBuf!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }	  if(recordBuf!=    null)    {    rehash();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	42	None	replace
769	[BUG]  [BUGGY]  if(hadUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hadUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hadUnclosedEntry  ||  buffer!=  null)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry    ||    buffer    ==    null)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
770	[BUG]  [BUGGY]  if(!hasUnclosed)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!hasUnclosed)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!hasUnclosed)  {  rehashTable();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehashTable();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
771	[BUG]  [BUGGY]  try  {  os.close();  }  catch(IOException  ioe)  {  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  try  {  os.close();  }  catch(IOException  ioe)  {  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	try  {  os.close();  }  catch(IOException  ioe)  {  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
772	[BUG]  [BUGGY]  try  {  os.close();  }  catch(IOException  ioe)  {  System.err.println( "Current  problem: "  +  ioe);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  try  {  os.close();  }  catch(IOException  ioe)  {  System.err.println( "Current  problem: "  +  ioe);  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	try  {  os.close();  }  catch(IOException  ioe)  {  System.err.println( "Current  problem: "  +  ioe);  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
773	[BUG]  [BUGGY]  try  {  os.close();  }  catch(IOException  ioe)  {  System.err.println( "Current  error: "  +  ioe);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  try  {  os.close();  }  catch(IOException  ioe)  {  System.err.println( "Current  error: "  +  ioe);  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	try  {  os.close();  }  catch(IOException  ioe)  {  System.err.println( "Current  error: "  +  ioe);  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
774	[BUG]  [BUGGY]  try  {  os.close();  }  catch(IOException  ioe)  {  throw  new  IOException( " ");  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  try  {  os.close();  }  catch(IOException  ioe)  {  throw  new  IOException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	try  {  os.close();  }  catch(IOException  ioe)  {  throw  new  IOException( " ");  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
775	[BUG]  [BUGGY]  try  {  os.close();  }  catch(IOException  ioe)  {  System.err.println( "Unknown  error: "  +  ioe);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  try  {  os.close();  }  catch(IOException  ioe)  {  System.err.println( "Unknown  error: "  +  ioe);  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	try  {  os.close();  }  catch(IOException  ioe)  {  System.err.println( "Unknown  error: "  +  ioe);  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
776	[BUG]  [BUGGY]  try  {  os.close();  }  catch(IOException  ioe)  {  System.err.println( "TarArchiveOutputStream  closed: "  +  ioe);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  try  {  os.close();  }  catch(IOException  ioe)  {  System.err.println( "TarArchiveOutputStream  closed: "  +  ioe);  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	try  {  os.close();  }  catch(IOException  ioe)  {  System.err.println( "TarArchiveOutputStream  closed: "  +  ioe);  }	  os.close();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
777	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(getTarInputStream());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(getTarInputStream());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().setContextClassLoader(getTarInputStream());	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
778	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  out.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  out.close();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  out.close();  }  else  {  out.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
779	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.release();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.release();  }  else  {  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.release();  }  else  {  out.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
780	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer  =  null;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(out!=  null)  {  out.close();  }  else  {  buffer  =  null;  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
781	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
782	[BUG]  [BUGGY]  final  if(hasUnclosedEntry  ||  buffer.length  >  0)  {  finish();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  final  if(hasUnclosedEntry  ||  buffer.length  >  0)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	final  if(hasUnclosedEntry  ||  buffer.length  >  0)  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.length    >    0)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
783	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  >  0)  {  start();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.length  >  0)  {  start();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.length  >  0)  {  start();  }	  if(hasUnclosedEntry    ||    buffer.length    >    0)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
784	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().releaseCandidates();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().releaseCandidates();  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	Thread.currentThread().getContextClassLoader().releaseCandidates();	  Thread.currentThread().getContextClassLoader().reset();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
785	[BUG]  [BUGGY]  if(buffer.isEnabled())  {  finish();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer.isEnabled())  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer.isEnabled())  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled())    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	98	None	replace
786	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  out.length  ==  0)  {  finish();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  out.length  ==  0)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  out.length  ==  0)  {  finish();  }	  if(hasUnclosedEntry    ||    out!=    null)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
787	[BUG]  [BUGGY]  if(!closed)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  start();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  start();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    start();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
788	[BUG]  [BUGGY]  _reportError( "TarArchiveOutputStream  closed: "  +  getMessage());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _reportError( "TarArchiveOutputStream  closed: "  +  getMessage());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportError( "TarArchiveOutputStream  closed: "  +  getMessage());	  castError(   "TarArchiveOutputStream    closed:   "    +    getMessage());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
789	[BUG]  [BUGGY]  validateError( "TarArchiveOutputStream  closed: "  +  getMessage());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  validateError( "TarArchiveOutputStream  closed: "  +  getMessage());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	validateError( "TarArchiveOutputStream  closed: "  +  getMessage());	  castError(   "TarArchiveOutputStream    closed:   "    +    getMessage());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
790	[BUG]  [BUGGY]  wrapInstantiationProblem( "TarArchiveOutputStream  closed: "  +  getMessage());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  wrapInstantiationProblem( "TarArchiveOutputStream  closed: "  +  getMessage());  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	wrapInstantiationProblem( "TarArchiveOutputStream  closed: "  +  getMessage());	  castError(   "TarArchiveOutputStream    closed:   "    +    getMessage());    	non-compiled	[CE]  <identifier>  expected	2	None	replace
791	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.finish();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.finish();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.finish();  }  else  {  buffer.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
792	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.flush();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.flush();  }  else  {  buffer.close();  }	  if(this.recordBuf!=    null)    {    this.recordBuf.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	112	None	replace
793	[BUG]  [BUGGY]  TasksUtil.closeTarBuffer(buffer);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  TasksUtil.closeTarBuffer(buffer);  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	TasksUtil.closeTarBuffer(buffer);	  if(!closed)    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
794	[BUG]  [BUGGY]  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(!finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
795	[BUG]  [BUGGY]  if(!closed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
796	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED))  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED))  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  buffer.isEnabled(Surrogate.DEPRECATED))  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  true;  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
797	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
798	[BUG]  [BUGGY]  _reportError( "Current  token( "+getMessage()  + ")not  an  IllegalStateException ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  _reportError( "Current  token( "+getMessage()  + ")not  an  IllegalStateException ");  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	_reportError( "Current  token( "+getMessage()  + ")not  an  IllegalStateException ");	  _reportUnsupportedOperation();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
799	[BUG]  [BUGGY]  if(hasUnclosed)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  rehashTable();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(!finished)    {    rehashTable();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
800	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  finish();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  finish();  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
801	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
802	[BUG]  [BUGGY]  if(!closed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(!closed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(!closed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
803	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
804	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(finished)  {  finish();  }  else  {  buffer.close();  out.close();  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
805	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(finished)  {  finish();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(finished)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(finished)  {  finish();  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
806	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(finished)  {  finish();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(finished)  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  if(finished)  {  finish();  }	  if(hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
807	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  buffer,  0,  this.recordBuf.length);  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  buffer,  0,  this.recordBuf.length);  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  buffer,  0,  this.recordBuf.length);  out.close();  }	  this.recordBuf.flush();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
808	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  assemBuf.length);  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  assemBuf.length);  out.close();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  assemBuf.length);  out.close();  }	  this.recordBuf.flush();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
809	[BUG]  [BUGGY]  if(buffered  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(buffered  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(buffered  ||  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  finish();  }	  if(hasUnclosedEntry    ||    buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))    {    finish();    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
810	[BUG]  [BUGGY]  if(closed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(closed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(closed)  {  if(finished)  {  finish();  }  else  {  buffer.close();  out  =  null;  }	  if(!hasUnclosedEntry)    {    if(finished)    {    finish();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
811	[BUG]  [BUGGY]  if(hasUnclosed)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {      [BUGGY]  if(hasUnclosed)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }  [BUGGY]      }  if  (!closed)  {  buffer.close();  out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	141	141	1	replace	if(hasUnclosed)  {  rehash();  }  else  {  buffer.close();  out  =  null;  }	  if(!finished)    {    rehash();    }    else    {    buffer.close();    out    =    null;    }    	non-compiled	[CE]  <identifier>  expected	81	None	replace
