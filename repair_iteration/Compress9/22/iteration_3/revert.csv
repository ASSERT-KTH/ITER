projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141finish();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141rehash();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141rehashTable();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().interrupt();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("TarArchiveOutputStreamclosed:"+getMessage());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("CannotclosetheTarBuffer.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141safeTarBuffer.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+getMessage()+")notyetclosed");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehashTable();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehashTable();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehashTable();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehashTable();}else{thrownewIllegalStateException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehashTable();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehashTable();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+getMessage()+")notavalidfiletype");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+getName()+")notavalidfiletype");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){if(finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().reset();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141os.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){buffer.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.assemBuf.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){buffer.close();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehash();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141rehashCode();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){rehash();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){rehash();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getCurrentThreadContext());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.flush();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf=null;
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.closeAll();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141assemBuf.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.release();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){start();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer==null){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(out);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(true);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){end();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(haveUnclosedEntry){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(haveUnclosedEntry){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehashTable();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehashTable();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehashTable();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportUnsupportedOperation();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClass(getClass().getName());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehash();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141rethrowInternal();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141rethrowAsIOException("");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141out.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141System.err.println("TarBuffercloned");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().finish();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hadUnclosed){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hadUnclosed){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehash();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportError("Currenttoken("+currName+")notinthecache.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out!=null){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer==null){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled()){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.length>0){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){start();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){finish();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){finish();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){buffer.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){buffer.close();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Feature.QUOTED_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){buffer.close();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Surrogate.DEPRECATED)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.close();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.close();}else{buffer=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.close();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.close();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){start();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer!=null){if(recordBuf!=null){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141(recordBuf!=null)?null:recordBuf.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){buffer.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141(recordBuf!=null)?null:recordBuf.clone();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){for(inti=0;i<this.recordBuf.length;i++){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){for(inti=0;i<this.recordBuf.size();i++){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){this.recordBuf.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){this.recordBuf.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){if(this.recordBuf!=null){this.recordBuf.close();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){this.recordBuf.close();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){if(this.recordBuf!=null){this.recordBuf.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf==null){this.recordBuf.close();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+currName+")notavalidfiletype");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.QUOTE_FIELD_NAMES)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.QUOTE_FIELD_NAME)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.AUTO_CLOSE_ERROR)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(assemBuf,out);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(assemBuf);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(out,buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(buffer,out);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(buffered);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehashCode();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){rehashCode();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){rehashCode();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehashCode();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordSize!=null){rehashCode();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf==null){rehashCode();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141TarBufferbuffer=newTarBuffer(safeTarBuffer.length);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141SafeTarBuffer.this.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141TarBufferbuffer=newTarBuffer(safeTarBuffer.length());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141safeBuffer.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141TarBufferbuffer=newTarBuffer(safeTarBuffer.size());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){start();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){start();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){start();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){begin();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehash();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehash();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehash();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){rehash();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(!finished){rehash();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){rehash();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){if(!finished){rehash();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){finish();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){start();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141(TarBuffer)this.recordBuf.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){end();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),true);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),null);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),this);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),false);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getCurrentThreadContext(),getCharset());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer!=null){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out!=null){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer!=null){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){if(!finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){start();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!closed){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){if(finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){buffer.close();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){end();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141os.flush();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141os.write(assemBuf,0,assemLen);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Os.write(assemBuf,0,assemLen);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Os.write(buffer,0,os.length);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Os.write(buffer,0,0);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141os.write(assemBuf,0,assemSize);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141((TarBuffer)this.recordBuf).close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){buffer.close();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){if(!haveUnclosedEntry){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){if(!haveUnclosedEntry){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){if(!hasUnclosedEntry){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){if(!hasUnclosedEntry){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){if(!haveUnclosedEntry){finish();}else{buffer.close();out=null;}}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehash();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(!finished){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehashTable();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehashTable();}else{thrownewIllegalStateException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){rehashTable();}else{thrownewIllegalStateException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehashTable();}else{thrownewIllegalStateException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){rehashTable();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehashTable();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class.getSimpleName());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){if(finished){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!closed){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehashTable();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehashTable();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){rehashTable();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){rehashTable();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){rehashTable();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer==null){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out==null){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!closed){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer.isEnabled()){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141luate(buffer,hasUnclosedEntry)&&buffer.isEnabled()){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry&&buffer.isEnabled()){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141luate(buffer,hasUnclosedEntry)||buffer.isEnabled()){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||!finished){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.QUOTE_FIELD_NAMES)){if(!finished){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!closed){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.QUOTE_FIELD_NAME)){if(!finished){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){if(!finished){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){start();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){begin();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141(TarBuffer)this.recordBuf.clone();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){buffer.close();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehash();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehash();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(!finished){rehash();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){rehash();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){rehash();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){buffer.close();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){buffer.close();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){buffer.close();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||!finished){buffer.close();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+getName()+")notavalidfiletype",currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+getName()+")notavalidfiletype.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+getName()+")notavalidfiletype,");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){out.close();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){rehash();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141recordBuf=null;
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141(recordBuf!=null?null:recordBuf.length));
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){if(hasUnclosedEntry){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){buffer.close();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){if(hasUnclosedEntry){buffer.close();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){if(hasUnclosedEntry){buffer.close();}else{buffer.close();out.close();}}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){buffer.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer.length>0){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out.length>0){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.length<2){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){start();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RecordBufferbuffer=newRecordBuffer(recordBuf.length);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RecordBufferbuffer=newRecordBuffer(recordBuf.length,assemBuf.length);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RecordBufferbuffer=getRecordBuffer();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RecordBufferbuffer=newRecordBuffer(recordBuf.length,recordSize);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141(recordBuf!=null)?null:recordBuf.remove(0);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141(recordBuf!=null)?null:recordBuf.remove();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf=newbyte[LONGFILE_ERROR];
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141assemBuf.flush();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141assemBuf.setLength(0);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141assemBuf.setClosed(true);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141assemBuf.release();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141assemBuf.finish();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(false);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(null);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(false,false);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.closeAll(assemBuf);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(false,true);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141read();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished&&buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry&&buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){startInput();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().release();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().flush();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().release(buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().reset();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){start();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){if(finished){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){if(hasUnclosedEntry){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(pending){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){castError("TarArchiveOutputStreamclosed:"+getMessage());}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(getMessage()!=null){castError("TarArchiveOutputStreamclosed:"+getMessage());}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("TarArchiveOutputStreamclosed:"+getMessage(),hasUnclosedEntry);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("TarArchiveOutputStreamclosed:"+this.getMessage());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("TarArchiveOutputStreamclosed:"+getMessage(),currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hadUnclosed){start();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hadUnclosed){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){finish();}else{buffer.close();out.close();}}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){if(finished){finish();}else{buffer.close();out.close();}}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){if(finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){if(finished){finish();}else{buffer.close();out.close();}}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){finish();}else{buffer.close();out.close();}}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){if(finished){finish();}else{buffer.close();out=null;}}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){if(pending){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){start();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().interrupt(this);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().interrupt(null);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().interrupt(throwable);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.sleep(3000);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().interrupt(truncated);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){buffer.close();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTE_FIELD_NAME)||isEnabled(Feature.QUOTE_FIELD_NAME)){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.AUTO_CLOSE_ERROR)){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141(recordBuf!=null)?null:recordBuf.close();out=null;
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf==null){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.assemBuf.close();out=null;
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer!=null){recordBuf=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer!=null){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){if(hasUnclosedEntry){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){if(finished){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.release(assemBuf,0,assemLen);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){if(!finished){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){if(!finished){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!cloned){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){if(finished){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){rehash();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.closed){if(!finished){rehash();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){rehash();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class.getName());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class.getRawClassLoader());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class,buffer.getClassLoader());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class.getResourceName());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class.getRecordClassLoader());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){castError("CannotclosetheTarBuffer.");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().reportError("CannotclosetheTarBuffer.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141while(!hasUnclosedEntry){buffer.close();out.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141while(!hasUnclosedEntry){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){buffer.flush();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class,currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class,buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class,true);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class,buffer.length);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class,LONGFILE_ERROR);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class,null);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141end();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){end();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){end();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141EndBufferbuffer=(TarBuffer)this.recordBuf.clone();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141EndBufferbuffer=(TarBuffer)this.hasUnclosedEntry();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141End();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished&&buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(TarBuffer.DEFAULT_CLOSE_ERROR)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR,currName)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer.isEnabled(Surrogate.DEPRECATED)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry&&buffer.isEnabled(Surrogate.DEPRECATED)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141luate(TarBuffer.DEPRECATED,buffer.isEnabled(Surrogate.DEPRECATED)));
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(TarBuffer.DEPRECATED)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141luate(TarBuffer.DEPRECATED,buffer.isEnabled(Surrogate.DEPRECATED));
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer.isEnabled(Surrogate.DEPRECATED)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.flush();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf==null){this.recordBuf.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.assemBuf.flush();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.assemBuf=null;
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.assemBuf.close(true);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.assemBuf.close(out);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141rethrowAsIOException(",");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141rethrowAsIOException("Currenterror:");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141executeAsIOException("");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141validateAsIOException("");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141thrownewIllegalStateException("");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+getMessage()+")notavalidfiletype",currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+getMessage()+")notavalidfiletype.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+getMessage()+")notavalidfiletype,");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141System.err.println("TarBuffercloned.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141System.err.println("TarBuffercloned:"+currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141System.err.println("TarBuffercloned"+currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141System.err.println("TarBuffercloned!");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141System.err.println("TarBufferclonedfor:"+currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_throwInternal();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportError();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_throwUnsupportedOperation();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportError("CannotclosetheTarBuffer.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141handleMissingName();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehashTable();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehashTable();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(!finished){rehashTable();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){rehashTable();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){rehashTable();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+getMessage()+")notyetclosed",hasUnclosedEntry);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+getMessage()+")notyetclosed.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Currenttoken("+getMessage()+")notyetclosed",currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehashTable();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehashTable();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){rehashTable();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(!finished){rehashTable();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){rehashTable();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehashTable();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTE_FIELD_NAMES)){if(!finished){rehashTable();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehashTable();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer.isEnabled(Feature.QUOTED_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished&&buffer.isEnabled(Feature.QUOTED_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Feature.QUOTED_FIELD_NAMES)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer.isEnabled(Feature.QUOTED_FIELD_NAMES)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Feature.QUOTED_FIELD_NAMES)){end();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer.isEnabled(Feature.QUOTED_FIELD_NAMES)){end();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehashTable();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehashTable();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){rehashTable();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer==null){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out==null){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RehashTable<T>rehashTable();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RenameTraversal.traverse(compiler,this);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RehashTable<String,Object>rehashTable();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf=buffer;
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf=newbyte[LONGFILE_GNU];
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf=assemBuf;
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf=newbyte[LONGFILE_ERROR].getBytes();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf=newbyte[lONGFILE_ERROR];
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){rehash();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){buffer.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){buffer.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141while(!hasUnclosedEntry){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141while(!hasUnclosedEntry){buffer.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.hasUnclosedEntry){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer==null){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out!=null){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(out!=null){out.close();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141out.flush();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){out.close();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(out!=null){out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141out.write(assemBuf,0,assemLen);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){end();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){end();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){if(!finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!closed){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().removeChild(buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),true);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),null);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),false);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().releaseCandidate(currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().releaseConnection(this);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().releaseConnection();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){buffer.close();out=null;}else{thrownewIllegalStateException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(null);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getRawClass().getName());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getRawClass().getSimpleName());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getRawClass().getSuperclassLoader());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),true);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),null);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getRawClass().getReturnType());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&out!=null){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out.length!=0){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out!=null){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){if(hasUnclosedEntry){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){finish();}else{buffer.close();out=null;}}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(pending){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(assemBuf!=null){this.recordBuf.close();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close();out.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf==null){this.recordBuf.close();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportError("Currenttoken("+currName+")inthecache.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportError("Currenttoken("+currName+")notinthecache.n");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportError("Currenttoken("+currName+")notinthecache..");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf==null){this.recordBuf.close();}else{buffer=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){buffer.close();}else{buffer=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehashTable();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehashTable();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(!finished){rehashTable();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){rehashTable();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rethrowInternal();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rethrowInternal();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rethrowInternal();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rethrowInternal();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141rehashInternal();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rethrowInternal();}else{thrownewIllegalStateException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClass(getClass().getName(),buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClass(getClass().getSimpleName());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClass(this.getClass().getName());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClass(getClass().getName(),true);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClass(getClass().getName(),this);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClass(getClass().getName(),currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castError("Tarerror:"+getMessage());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){rehashTable();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){rehashTable();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){rehashTable();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry&&buffer!=null){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(finished){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!closed){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){if(!finished){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!finished){start();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf==null){this.recordBuf.close();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rethrowAsIOException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_throwAsIOException("");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141rethrowAsIOException("Currentfailure:");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){start();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141validateError("CannotclosetheTarBuffer.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!recordBuf.isClosed()){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!recordBuf){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){if(!hasUnclosedEntry){start();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){if(!hasUnclosedEntry){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){if(!hasUnclosedEntry){start();}else{buffer.close();out=null;}}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hadUnclosedEntry&&buffer==null){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!cloned){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!cloned){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf=newbyte[lONGFILE_GNU];
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf=recordBuf;
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){buffer.close();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hadUnclosed){start();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){if(finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportError("Currentfailure:"+getMessage());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer==null){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){if(finished){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),false);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(this.getRawClass().getClassLoader());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getRawClass().getClassLoader(),buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehash();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){rehash();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141MutableToJavaIdentifiers.close(buffer,null);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141MutableToJavaIdentifiers.close(buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf==null){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf==null){buffer.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf==null){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer!=null){recordBuf.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141(recordBuf!=null)?null:buffer.close();out=null;
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141wireError("Currenttoken("+getMessage()+")notyetclosed");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehashTable();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||!finished){rehashTable();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehashTable();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().interrupt(true);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().interrupt(terr);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().interrupt(truncation);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!cloned){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry&&out!=null){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141(hasUnclosedEntry||out!=null)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehashTable();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){rehashTable();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){rehashTable();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141OutputStreamout=buffer.getOutputStream();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry&&buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry||buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffered||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf==null){this.recordBuf.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Parchet.checkState(hasUnclosedEntry);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getClass().getResourceAsStream(recordBuf));
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141EndUtil.closeTarBuffer(buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141EndUtil.closeEndUtilities();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){end();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141EndUtil.closeAndClose(buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){buffer.close();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.close();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141safeTarBuffer.close(out);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141safeTarBuffer.close(buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141SafeTarBuffer.close(buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){rehash();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehash();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||!finished){rehash();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){rehash();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class,out);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||!finished){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(!finished){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().release(recordBuf);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry&&buffer.isEnabled(Feature.QUOTED_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry||buffer.isEnabled(Feature.QUOTED_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer.isEnabled(Feature.QUOTED_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContext(getCurrentThreadContext());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehashTable();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RenameTraversal.traverse(compiler,this).traverse(rehashTable());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){if(finished){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out!=null){if(finished){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out==null){if(finished){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141ReflectionTarBufferbuffer=(ReflectionTarBuffer)this.recordBuf.clone();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141ReflectionTarBufferbuffer=(ReflectionTarBuffer)reflectionMap.get(buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141ReflectionTarBufferbuffer=(ReflectionTarBuffer)reflection.clone();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141ReflectionTarBufferbuffer=(ReflectionTarBuffer)this.recordBuf;
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141ReflectionTarBufferbuffer=getReflectionTarBuffer();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141ReflectionTarBufferbuffer=(ReflectionTarBuffer)this.recordBuf.get(buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141System.err.println("ClosedTarBuffercloned");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141System.err.println("TarBuffercloned:missing");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141System.err.println("TarBufferclonedby:"+currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141System.err.println("TarBuffercloned:'"+currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){if(!finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){if(!finished){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||!finished){buffer.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){buffer.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.assemBuf.closeAll();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){start();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer==null){start();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){if(finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){if(finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){if(finished){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer==null){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){finish();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){finish();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out!=null){if(!finished){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer==null){if(!finished){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.sleep().getContextClassLoader().finish();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141(recordBuf!=null)?null:recordBuf.remove(recordBuf.length);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RecordBufferbuffer=newRecordBuffer(recordBuf);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141This.recordBuf.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){rehashCode();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){rehashCode();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){rehashCode();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141finalbooleanhaveUnclosedEntry=hasUnclosedEntry();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry&&buffer==null){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){finish();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141(recordBuf!=null)?null:recordBuf.reset();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(buff,out);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehash();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){rehash();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf==null){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf==null){rehash();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141TasksUiUtil.closeTarBuffer(buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehashTable();}else{thrownewIllegalStateException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){rehashTable();}else{thrownewIllegalStateException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141castingError("Currenttoken("+getName()+")notavalidfiletype");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141wireError("Currenttoken("+getName()+")notavalidfiletype");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehashTable();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){rehashTable();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehashTable();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){rehashTable();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||!finished){rehashTable();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehashTable();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){rehashTable();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehashTable();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){rehashTable();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141assemBuf.close(out);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141assemBuf.close(true);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141assemBuf.closeAll();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(true,0);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close(true,false);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){buffer.close();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){if(!closed){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!closed){buffer.close();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!closed){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||!finished){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class.getClassLoader(),buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(newClassLoader(TarBuffer.class.getClassLoader()));
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out!=null){if(!finished){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){if(!cloned){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){if(!finished){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out!=null){if(!finished){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out!=null){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf==null){buffer.close();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141wireError("TarArchiveOutputStreamclosed:"+getMessage());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141handleMissingResource("TarArchiveOutputStreamclosed:"+getMessage());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().closeQueue();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().close(null);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().close(true);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().close(this);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().close(recordBuf);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().close(out);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry&&buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished&&buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){this.recordBuf.close();}else{buffer=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){buffer=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer==null){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141finalif(hasUnclosedEntry){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry||buffer.isEnabled(Surrogate.DEPRECATED)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out.isEnabled(Surrogate.DEPRECATED)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Surrogate.DEPRECATED)||hasUnclosedEntry){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){buffer.close();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry&&buffer!=null){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.length!=0){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(haveUnclosedEntry||buffer!=null){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.length==0){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry&&buffer.length>0){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.length<=0){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry||buffer.isEnabled()){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out.isEnabled()){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141((TarBuffer)buffer).close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled()){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){out.close();}else{buffer=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished){out.close();}else{buffer.flush();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141wireError("Currenttoken("+getMessage()+")notavalidfiletype");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hadUnclosedEntry&&buffer!=null){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!closed){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){if(!finished){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!closed){start();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!haveUnclosedEntry){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){if(!finished){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){if(!finished){finish();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){if(!closed){finish();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141rethrowAsIOException();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141retryInternal();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClass(getClass().getName(),false);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClass(getClass().getName(),out);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClass(getClass().getName(),null);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Os.write(buffer,0,out.length);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Os.write(buffer,0,buffer.length);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.os.close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf=newbyte[LONGFILE_GNU.length];
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer==null){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){buffer.close();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){buffer.close();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosedEntry){buffer.close();}else{thrownewIllegalStateException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportError("Currenttoken("+currName+")Notinthecache.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportError("Currenttoken("+currName+")cannotinthecache.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.release(assemBuf);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(finished){buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.close(true);}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){buffer.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTE_FIELD_NAMES)){end();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTED_FIELD_NAMES)){end();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){end();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.AUTO_CLOSE_SOURCE)){end();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportError("Currenterror:"+currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141reportError("CannotclosetheTarBuffer.");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(!finished){rehash();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.flush();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){out.close();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){end();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTE_FIELD_NAMES)){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.AUTO_CLOSE_SOURCE)){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.release();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.release();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.release();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){close();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class,closed);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(TarBuffer.class,this);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.closeUnclosedEntry();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.AUTO_CLOSE_SOURCE)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getRawClass(),getClassLoader());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){out.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141buffer.close();out=null;
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141assemBuf=newbyte[LONGFILE_GNU.length];
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141assemBuf=newbyte[LONGFILE_GNU].getBytes();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141assemBuf=null;
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer==null){finish();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.length>0){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.length()>0){
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){if(finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf.close();}else{buffer=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.flush();}else{buffer=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){startNewLine();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer!=null){buffer.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer!=null){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffered||buffer.isEnabled(Feature.QUOTE_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.hasUnclosedEntry){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffered||buffer.isEnabled(Surrogate.DEPRECATED)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Surrogate.DEPRECATED)||buffer.isEnabled(Surrogate.DEPRECATED)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer.isEnabled(Surrogate.DEPRECATED)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Surrogate.DEPRECATED)||out.isEnabled(Surrogate.DEPRECATED)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf=newbyte[LONGFILE_GNU+LONGFILE_TRUNCATE];
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.recordBuf=newbyte[LONGFILE_GNU].getBytes();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out==null){if(!finished){finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out==null){if(!finished){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RehashMap<String,TarBuffer>out=newRehashMap<String,TarBuffer>(buffer.length);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RehashMap<String,TarBuffer>out=newRehashMap<String,TarBuffer>();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RehashMap<String,TarBuffer>buffer=newRehashMap<String,TarBuffer>();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.assemBuf=newbyte[LONGFILE_GNU.length];
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.assemBuf=newbyte[LONGFILE_GNU];
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.assemBuf=newbyte[LONGFILE_GNU].getBytes();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141this.assemBuf=newbyte[LONGFILE_GNU].getBytes(currName);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.QUOTE_FIELD_NAMES)){if(!finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.AUTO_CLOSE_ERROR)){if(!finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.QUOTE_FIELD_NAMES)){if(!finished){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Iterator<TarBuffer>out=this.recordBuf.entrySet().iterator();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Iterator<TarBuffer>out=this.recordBuf.iterator();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Iterator<TarBuffer>out=this.recordBuf.values().iterator();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().intermediateThread().getContextClassLoader().close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.sleep().getContextClassLoader().close();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().closeAllArchiveOutputStream();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordSize>0){rehashCode();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordSize>0){rehashCode();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(safeTarBuffer!=null){safeTarBuffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(safeTarBuffer!=null){safeTarBuffer.close();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(safeTarBuffer!=null){safeTarBuffer.close();}else{buffer=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(safeTarBuffer!=null){safeTarBuffer.close();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(safeTarBuffer!=null){safeTarBuffer.close();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||!finished){rehashTable();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141scan("Currenttoken("+getMessage()+")notyetclosed");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer!=null){start();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){start();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141OutputStreamout=getOutputStream();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry){end();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClass(newClass[]{getClass().getName()});
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer!=null){rehash();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(!finished){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(buffer.length==0){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.QUOTE_FIELD_NAMES)){if(!finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.AUTO_CLOSE_ERROR)){if(!finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.AUTO_CLOSE_SOURCE)){if(!finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141System.err.println("TarBufferclonedby");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().intermediateThread().getContextClassLoader().finish();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(this);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isRecorded()){rehashTable();}else{thrownewIllegalArgumentException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(!finished){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(finished){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffered||buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!finished||buffer.isEnabled(Surrogate.DEFAULT_CLOSE_ERROR)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffered||hasUnclosedEntry){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.close();out=null;}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTE_FIELD_NAMES)){if(!hasUnclosedEntry){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isRecorded()){if(!hasUnclosedEntry){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTE_FIELD_NAMES)){if(!hasUnclosedEntry){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isRecorded()){if(hasUnclosedEntry){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTE_FIELD_NAMES)){if(hasUnclosedEntry){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(!finished){rehashTable();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){rehashTable();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.closeAll();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||!finished){rehashTable();}else{buffer.close();out=false;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.QUOTE_FIELD_NAMES)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTE_FIELD_NAMES)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.FLUSH_PASSED_TO_STREAM)){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().interrupt(thread);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().interrupt(threadMode);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RehashTable<T>buffer=newRehashTable<T>();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RehashTable<T>buffer=rehashTable();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141RehashTable<T>buffer=newRehashTable<T>(rehashTable());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf==null){rehash();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer!=null){rehash();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(recordBuf!=null){if(buffer.length>0){buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hadUnclosedEntry||buffer!=null){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!hasUnclosed){rehashTable();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141try{os.close();}catch(IOExceptionioe){}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141try{os.close();}catch(IOExceptionioe){System.err.println("Currentproblem:"+ioe);}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141try{os.close();}catch(IOExceptionioe){System.err.println("Currenterror:"+ioe);}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141try{os.close();}catch(IOExceptionioe){thrownewIOException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141try{os.close();}catch(IOExceptionioe){System.err.println("Unknownerror:"+ioe);}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141try{os.close();}catch(IOExceptionioe){System.err.println("TarArchiveOutputStreamclosed:"+ioe);}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().setContextClassLoader(getTarInputStream());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){out.close();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.release();}else{out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(out!=null){out.close();}else{buffer=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(out!=null){out.close();}else{buffer.flush();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141finalif(hasUnclosedEntry||buffer.length>0){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.length>0){start();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141Thread.currentThread().getContextClassLoader().releaseCandidates();
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer.isEnabled()){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||out.length==0){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){start();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportError("TarArchiveOutputStreamclosed:"+getMessage());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141validateError("TarArchiveOutputStreamclosed:"+getMessage());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141wrapInstantiationProblem("TarArchiveOutputStreamclosed:"+getMessage());
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.finish();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.flush();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141TasksUtil.closeTarBuffer(buffer);
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){if(finished){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||buffer.isEnabled(Surrogate.DEPRECATED)){if(finished){finish();}else{buffer.close();out=true;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffer!=null){buffer.close();}else{buffer.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141_reportError("Currenttoken("+getMessage()+")notanIllegalStateException");
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){rehashTable();}else{thrownewIllegalStateException("");}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.QUOTE_FIELD_NAMES)){if(finished){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.QUOTE_FIELD_NAMES)){if(finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(!closed){if(finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.AUTO_CLOSE_ERROR)){if(finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.AUTO_CLOSE_SOURCE)){if(finished){finish();}else{buffer.close();out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.AUTO_CLOSE_ERROR)){if(finished){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosedEntry||isEnabled(Feature.AUTO_CLOSE_SOURCE)){if(finished){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.close();}else{System.arraycopy(assemBuf,0,buffer,0,this.recordBuf.length);out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(this.recordBuf!=null){this.recordBuf.close();}else{System.arraycopy(assemBuf,0,recordBuf,0,assemBuf.length);out.close();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(buffered||buffer.isEnabled(Feature.QUOTED_FIELD_NAMES)){finish();}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(closed){if(finished){finish();}else{buffer.close();out=null;}
projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java141if(hasUnclosed){rehash();}else{buffer.close();out=null;}
