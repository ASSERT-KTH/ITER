bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemSize  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemSize  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemSize  -  1);	  buffer.writeBlock(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
2	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  /  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  /  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  /  1);	  buffer.writeBlock(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
3	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  *  2  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  *  2  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  *  2  -  1);	  buffer.writeBlock(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
4	[BUG]  [BUGGY]  buffer.writeBytes(assemBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBytes(assemBuf);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBytes(assemBuf);	  buffer.writeBlock(assemBuf);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
5	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0);	  buffer.writeBlock(assemBuf);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
6	[BUG]  [BUGGY]  buffer.writeBytes(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBytes(assemBuf,  0,  assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBytes(assemBuf,  0,  assemLen);	  buffer.writeBlock(assemBuf);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
7	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('n');  }  else  {  out.write(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append('n');  }  else  {  out.write(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('n');  }  else  {  out.write(currName);  }	  if(closed)    {    buffer.append('n');    }    else    {    out.write(currName);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
8	[BUG]  [BUGGY]  if(finished)  {  buffer.append('n');  }  else  {  out.write(currName);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.append('n');  }  else  {  out.write(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.append('n');  }  else  {  out.write(currName);  }	  if(closed)    {    buffer.append('n');    }    else    {    out.write(currName);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
9	[BUG]  [BUGGY]  while(!finished)  {  buffer.append('n');  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(!finished)  {  buffer.append('n');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(!finished)  {  buffer.append('n');	  if(closed)    {    buffer.append('n');    }    else    {    out.write(currName);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
10	[BUG]  [BUGGY]  while(!closed)  {  buffer.append('n');  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(!closed)  {  buffer.append('n');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(!closed)  {  buffer.append('n');	  if(closed)    {    buffer.append('n');    }    else    {    out.write(currName);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
11	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0);	  buffer.finish(assemBuf);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
12	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  0);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  0);	  buffer.finish(assemBuf);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
13	[BUG]  [BUGGY]  buffer.finish(assemBuf,  currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  currName);	  buffer.finish(assemBuf);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
14	[BUG]  [BUGGY]  buffer.finish(assemBuf,  fileMode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  fileMode);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  fileMode);	  buffer.finish(assemBuf);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
15	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
16	[BUG]  [BUGGY]  if(closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  if(currName!=  null)  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
17	[BUG]  [BUGGY]  if(closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
18	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  if(currName!=  null)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  if(currName!=  null)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  if(currName!=  null)  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
19	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  if(!finished)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  blockSize  -  currSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  blockSize  -  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  blockSize  -  currSize);	  buffer.writeBlock(assemBuf,    0,    currSize    -    currSize);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
22	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  -  currSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  -  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  -  currSize);	  buffer.writeBlock(assemBuf,    0,    currSize    -    currSize);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
23	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  recordSize  -  currSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  recordSize  -  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  recordSize  -  currSize);	  buffer.writeBlock(assemBuf,    0,    currSize    -    currSize);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
24	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  /  currSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  /  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currSize  /  currSize);	  buffer.writeBlock(assemBuf,    0,    currSize    -    currSize);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
25	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  -  blockSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  -  blockSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currSize  -  blockSize);	  buffer.writeBlock(assemBuf,    0,    currSize    -    currSize);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
26	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName  -  currSize);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName  -  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currName  -  currSize);	  buffer.writeBlock(assemBuf,    0,    currSize    -    currSize);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
27	[BUG]  [BUGGY]  final  OutputStream  out  =  this.buffer.getOutputStream();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  final  OutputStream  out  =  this.buffer.getOutputStream();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	final  OutputStream  out  =  this.buffer.getOutputStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
28	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.getInputStream();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  final  OutputStream  out  =  buffer.getInputStream();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	final  OutputStream  out  =  buffer.getInputStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
29	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	OutputStream  out  =  buffer.getOutputStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
30	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.defaultOutputStream();  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  final  OutputStream  out  =  buffer.defaultOutputStream();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	final  OutputStream  out  =  buffer.defaultOutputStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
31	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.openStream();  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  final  OutputStream  out  =  buffer.openStream();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	final  OutputStream  out  =  buffer.openStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
32	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.getErrorStream();  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  final  OutputStream  out  =  buffer.getErrorStream();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	final  OutputStream  out  =  buffer.getErrorStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
33	[BUG]  [BUGGY]  buffer.release(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.release(assemBuf,  0,  assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.release(assemBuf,  0,  assemLen);	  buffer.release();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
34	[BUG]  [BUGGY]  if(finish)  {  if(currName!=  null)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  if(currName!=  null)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  if(currName!=  null)  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  if(closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
36	[BUG]  [BUGGY]  if(!finished)  {  if(currName!=  null)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  if(currName!=  null)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  if(currName!=  null)  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
37	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
38	[BUG]  [BUGGY]  buffer.delete(0,  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(0,  LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(0,  LONGFILE_GNU);	  buffer.delete(0,    LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
39	[BUG]  [BUGGY]  buffer.delete(0,  LONGFILE_ERROR,  currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(0,  LONGFILE_ERROR,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(0,  LONGFILE_ERROR,  currName);	  buffer.delete(0,    LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
40	[BUG]  [BUGGY]  buffer.delete(0L,  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(0L,  LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(0L,  LONGFILE_GNU);	  buffer.delete(0,    LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
41	[BUG]  [BUGGY]  buffer.delete(0);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(0);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(0);	  buffer.delete(0,    LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
42	[BUG]  [BUGGY]  buffer.delete(0,  0);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(0,  0);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(0,  0);	  buffer.delete(0,    LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
43	[BUG]  [BUGGY]  buffer.append(assemBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(assemBuf);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(assemBuf);	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
44	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(recordBuf!=  null)  {  buffer.append(recordBuf);  }	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
45	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  out.write(assemBuf,  0,  recordSize);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  out.write(assemBuf,  0,  recordSize);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  out.write(assemBuf,  0,  recordSize);  }	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
46	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  recordBuf.length);  }	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
47	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordBuf.length);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordBuf.length);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  recordBuf.length);  }	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
48	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  writeEOFRecord();  }	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
49	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  out.write(currName);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  out.write(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  out.write(currName);  }	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
50	[BUG]  [BUGGY]  buffer.writeString(assemBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeString(assemBuf);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeString(assemBuf);	  buffer.writeString(currName);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
51	[BUG]  [BUGGY]  buffer.writeString(assemBuf,  currName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeString(assemBuf,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeString(assemBuf,  currName);	  buffer.writeString(currName);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
52	[BUG]  [BUGGY]  buffer.writeInt(currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeInt(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeInt(currName);	  buffer.writeString(currName);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
53	[BUG]  [BUGGY]  buffer.writeInt(assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeInt(assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeInt(assemLen);	  buffer.writeString(currName);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
54	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  +  3);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  +  3);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  +  3);	  buffer.writeBlock(assemBuf,    0,    assemLen    +    2);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
55	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  *  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  *  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  *  2);	  buffer.writeBlock(assemBuf,    0,    assemLen    +    2);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
56	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  *  4);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  *  4);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  *  4);	  buffer.writeBlock(assemBuf,    0,    assemLen    +    4);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
57	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  currName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  currName);	  buffer.write(assemBuf,    0,    blockSize);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
58	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  shortFileMode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  shortFileMode);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  shortFileMode);	  buffer.write(assemBuf,    0,    blockSize);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
59	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  blockSize  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  blockSize  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  blockSize  -  1);	  buffer.write(assemBuf,    0,    blockSize);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
60	[BUG]  [BUGGY]  buffer.append('-');  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('-');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('-');	  buffer.append('ufffd');    	non-compiled	[CE]  <identifier>  expected	63	None	replace
61	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  blockSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  blockSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  blockSize);	  buffer.finish(assemBuf,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
62	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  currSize);	  buffer.finish(assemBuf,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
63	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  recordSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  recordSize);	  buffer.finish(assemBuf,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
64	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  assemSize,  currBytes);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  assemSize,  currBytes);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  assemSize,  currBytes);	  buffer.finish(assemBuf,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
65	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  assemSize  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  assemSize  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  assemSize  +  1);	  buffer.finish(assemBuf,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
66	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('N');  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append('N');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('N');  }	  buffer.append('N');    	non-compiled	[CE]  <identifier>  expected	78	None	replace
67	[BUG]  [BUGGY]  if(closed)  {  buffer.append('N');  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append('N');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('N');  }	  buffer.append('N');    	non-compiled	[CE]  <identifier>  expected	78	None	replace
68	[BUG]  [BUGGY]  if(closed)  {  buffer.append('N');  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append('N');  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('N');  }  else  {  buffer.append('n');  }	  buffer.append('N');    	non-compiled	[CE]  <identifier>  expected	78	None	replace
69	[BUG]  [BUGGY]  if(closed)  {  buffer.append('N');  }  else  {  out.write(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append('N');  }  else  {  out.write(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('N');  }  else  {  out.write(currName);  }	  buffer.append('N');    	non-compiled	[CE]  <identifier>  expected	78	None	replace
70	[BUG]  [BUGGY]  if(closed)  {  buffer.append('N');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append('N');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('N');  }  else  {  writeEOFRecord();  }	  buffer.append('N');    	non-compiled	[CE]  <identifier>  expected	78	None	replace
71	[BUG]  [BUGGY]  if(finished)  {  buffer.append('N');  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.append('N');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.append('N');  }	  buffer.append('N');    	non-compiled	[CE]  <identifier>  expected	78	None	replace
72	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  blockSize  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  blockSize  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  blockSize  +  1);	  buffer.writeBlock(assemBuf,    0,    currSize    +    1);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
73	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  /  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  /  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currSize  /  1);	  buffer.writeBlock(assemBuf,    0,    currSize    +    1);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
74	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  +  2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  +  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currSize  +  2);	  buffer.writeBlock(assemBuf,    0,    currSize    +    1);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
75	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
76	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
77	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
78	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
79	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('N');  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('N');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('N');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
80	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('N');  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('N');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('N');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
81	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
82	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
83	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
84	[BUG]  [BUGGY]  while(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
85	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length())  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length())  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length())	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
86	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
87	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  buf.length  /  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  buf.length  /  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  buf.length  /  1);	  buffer.write(assemBuf,    0,    buf.length    +    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
88	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemBuf.length  +  1);	  buffer.write(assemBuf,    0,    buf.length    +    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
89	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
90	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
91	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
92	[BUG]  [BUGGY]  if(closed)  {  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(recordBuf[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
93	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
94	[BUG]  [BUGGY]  if(closed)  {  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordName.length();  i++)  {  buffer.append(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordName.length();  i++)  {  buffer.append(recordBuf[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordName.length();  i++)  {  buffer.append(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
95	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordName.length();  i++)  {  buffer.append(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordName.length();  i++)  {  buffer.append(recordBuf[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordName.length();  i++)  {  buffer.append(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
96	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  recordBuf.length  -  1);	  buffer.write(assemBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
97	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  recordBuf.length  +  1);	  buffer.write(assemBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
98	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length  -  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length  -  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  recordBuf.length  -  2);	  buffer.write(assemBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
99	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length  -  4);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length  -  4);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  recordBuf.length  -  4);	  buffer.write(assemBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
100	[BUG]  [BUGGY]  if(finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
101	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
102	[BUG]  [BUGGY]  if(closed)  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
103	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
104	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
105	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
106	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  blockSize  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  blockSize  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  blockSize  -  1);	  buffer.writeBlock(assemBuf,    0,    currSize    -    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
107	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  recordSize  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  recordSize  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  recordSize  -  1);	  buffer.writeBlock(assemBuf,    0,    currSize    -    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
108	[BUG]  [BUGGY]  buffer.delete(currName,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(currName,  LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(currName,  LONGFILE_ERROR);	  buffer.delete(LONGFILE_ERROR,    currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
109	[BUG]  [BUGGY]  buffer.delete(currName,  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(currName,  LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(currName,  LONGFILE_GNU);	  buffer.delete(LONGFILE_ERROR,    currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
110	[BUG]  [BUGGY]  buffer.delete(LONGFILE_ERROR,  currName,  assemLen);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(LONGFILE_ERROR,  currName,  assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(LONGFILE_ERROR,  currName,  assemLen);	  buffer.delete(LONGFILE_ERROR,    currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
111	[BUG]  [BUGGY]  buffer.delete(LONGFILE_ERROR,  currName,  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(LONGFILE_ERROR,  currName,  LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(LONGFILE_ERROR,  currName,  LONGFILE_GNU);	  buffer.delete(LONGFILE_ERROR,    currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
112	[BUG]  [BUGGY]  buffer.release(currName,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.release(currName,  LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.release(currName,  LONGFILE_ERROR);	  buffer.delete(LONGFILE_ERROR,    currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
113	[BUG]  [BUGGY]  if(!finished)  {  buffer.append(',');  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append(',');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append(',');  }	  buffer.append(',');    	non-compiled	[CE]  <identifier>  expected	87	None	replace
114	[BUG]  [BUGGY]  if(closed)  {  buffer.append(',');  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append(',');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append(',');  }	  buffer.append(',');    	non-compiled	[CE]  <identifier>  expected	87	None	replace
115	[BUG]  [BUGGY]  if(closed)  {  buffer.append(',');  }  else  {  out.write(currName);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append(',');  }  else  {  out.write(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append(',');  }  else  {  out.write(currName);  }	  buffer.append(',');    	non-compiled	[CE]  <identifier>  expected	87	None	replace
116	[BUG]  [BUGGY]  if(closed)  {  buffer.append(',');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append(',');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append(',');  }  else  {  writeEOFRecord();  }	  buffer.append(',');    	non-compiled	[CE]  <identifier>  expected	87	None	replace
117	[BUG]  [BUGGY]  buffer.append(','  +  currName);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(','  +  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(','  +  currName);	  buffer.append(',');    	non-compiled	[CE]  <identifier>  expected	87	None	replace
118	[BUG]  [BUGGY]  if(finished)  {  buffer.append(',');  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.append(',');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.append(',');  }	  buffer.append(',');    	non-compiled	[CE]  <identifier>  expected	87	None	replace
119	[BUG]  [BUGGY]  buff.finish();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buff.finish();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buff.finish();	  buff.endBlock();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
120	[BUG]  [BUGGY]  buff.close();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buff.close();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buff.close();	  buff.endBlock();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
121	[BUG]  [BUGGY]  bug.endBlock();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  bug.endBlock();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	bug.endBlock();	  buff.endBlock();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
122	[BUG]  [BUGGY]  buffer.append('n',  '-'  +  currName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('n',  '-'  +  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('n',  '-'  +  currName);	  buffer.append('n',    '-');    	non-compiled	[CE]  <identifier>  expected	80	None	replace
123	[BUG]  [BUGGY]  buffer.append('N',  '-');  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('N',  '-');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('N',  '-');	  buffer.append('n',    '-');    	non-compiled	[CE]  <identifier>  expected	80	None	replace
124	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  assemLen  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  assemLen  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  assemLen  +  1);	  buffer.finish(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
125	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  assemLen,  currName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  assemLen,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  assemLen,  currName);	  buffer.finish(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
126	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  assemLen,  writeEOFRecord());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  assemLen,  writeEOFRecord());  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  assemLen,  writeEOFRecord());	  buffer.finish(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
127	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  assemLen  +  2);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  assemLen  +  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  assemLen  +  2);	  buffer.finish(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
128	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  blockSize  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  blockSize  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  blockSize  +  1);	  buffer.write(assemBuf,    0,    assemSize    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
129	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemSize  +  2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemSize  +  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemSize  +  2);	  buffer.write(assemBuf,    0,    assemSize    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
130	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemSize  *  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemSize  *  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemSize  *  1);	  buffer.write(assemBuf,    0,    assemSize    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
131	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemSize  +  4);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemSize  +  4);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemSize  +  4);	  buffer.write(assemBuf,    0,    assemSize    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
132	[BUG]  [BUGGY]  buffer.writeBlock(LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(LONGFILE_GNU);	  buffer.writeBlock(lONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
133	[BUG]  [BUGGY]  buffer.writeBlock(lONGFILE_ERROR,  currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(lONGFILE_ERROR,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(lONGFILE_ERROR,  currName);	  buffer.writeBlock(lONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
134	[BUG]  [BUGGY]  buffer.writeBlock(currName,  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(currName,  LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(currName,  LONGFILE_GNU);	  buffer.writeBlock(lONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
135	[BUG]  [BUGGY]  buffer.writeBlock(lONGFILE_GNU,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(lONGFILE_GNU,  LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(lONGFILE_GNU,  LONGFILE_ERROR);	  buffer.writeBlock(lONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
136	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  buffer.append('n');  }	  if(!finished)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
137	[BUG]  [BUGGY]  if(finished)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.append('n');  }	  if(!finished)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
138	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!finished)  {  buffer.append('n');  }	  if(!finished)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
139	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  buffer.append('n');  }	  if(!finished)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
140	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(!finished)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(!finished)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(!finished)  {  buffer.append('n');  }	  if(!finished)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
141	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {!finished)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {!finished)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {!finished)  {  buffer.append('n');  }	  if(!finished)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
142	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
143	[BUG]  [BUGGY]  if(finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
144	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
145	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i  +  1));  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i  +  1));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i  +  1));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
146	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
147	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append('/');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
148	[BUG]  [BUGGY]  buffer.endLong(lONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.endLong(lONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.endLong(lONGFILE_ERROR);	  buffer.endLong(currName);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
149	[BUG]  [BUGGY]  buffer.writeLong(currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeLong(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeLong(currName);	  buffer.endLong(currName);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
150	[BUG]  [BUGGY]  buffer.writeBlock(lONGFILE_GNU,  currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(lONGFILE_GNU,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(lONGFILE_GNU,  currName);	  buffer.writeBlock(lONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
151	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
152	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
153	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
154	[BUG]  [BUGGY]  if(finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
155	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName[i]);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName[i]);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName[i]);	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
156	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
157	[BUG]  [BUGGY]  buffer.setBlock(currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.setBlock(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.setBlock(currName);	  buffer.startBlock();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
158	[BUG]  [BUGGY]  buffer.writeFieldName(lONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeFieldName(lONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeFieldName(lONGFILE_ERROR);	  buffer.writeFieldName(currName);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
159	[BUG]  [BUGGY]  buffer.writeFieldName(LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeFieldName(LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeFieldName(LONGFILE_ERROR);	  buffer.writeFieldName(currName);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
160	[BUG]  [BUGGY]  buffer.writeFieldName(lONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeFieldName(lONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeFieldName(lONGFILE_GNU);	  buffer.writeFieldName(currName);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
161	[BUG]  [BUGGY]  buffer.writeFieldName(assemBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeFieldName(assemBuf);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeFieldName(assemBuf);	  buffer.writeFieldName(currName);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
162	[BUG]  [BUGGY]  buffer.writeFieldName(LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeFieldName(LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeFieldName(LONGFILE_GNU);	  buffer.writeFieldName(currName);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
163	[BUG]  [BUGGY]  buffer.writeFieldName(longFileMode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeFieldName(longFileMode);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeFieldName(longFileMode);	  buffer.writeFieldName(currName);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
164	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordSize  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  recordSize  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  recordSize  -  1);	  buffer.write(assemBuf,    0,    currSize    -    1);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
165	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  currBytes  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  currBytes  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  currBytes  -  1);	  buffer.write(assemBuf,    0,    currSize    -    1);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
166	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
167	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
168	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
169	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length())  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length())  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length())	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
170	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(buffer.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(buffer.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(buffer.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
171	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
172	[BUG]  [BUGGY]  buffer.finish(assemBuf,  currSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  currSize);	  buffer.finish(currName);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
173	[BUG]  [BUGGY]  if(finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    buffer.close();    }    else    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
174	[BUG]  [BUGGY]  if(closed)  {  if(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  if(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  if(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  }	  if(!finished)    {    buffer.close();    }    else    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
175	[BUG]  [BUGGY]  while(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    buffer.close();    }    else    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
176	[BUG]  [BUGGY]  if(closed)  {  if(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  if(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  if(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    buffer.close();    }    else    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
177	[BUG]  [BUGGY]  if(closed)  {  if(finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  if(finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  if(finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  }	  if(!finished)    {    buffer.close();    }    else    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
178	[BUG]  [BUGGY]  if(closed)  {  if(finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  if(finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  if(finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    buffer.close();    }    else    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
179	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
180	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
181	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
182	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append( "/ ");  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append( "/ ");  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append( "/ ");  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
183	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
184	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append( "/ ");  }  [CE]  <identifier>  expected  [FE]                                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append( "/ ");  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append( "/ ");  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
185	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  *  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  *  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  *  1);	  buffer.writeBlock(assemBuf,    0,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
186	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  *  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemLen  *  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  *  1);	  buffer.write(assemBuf,    0,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
187	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currBytes  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currBytes  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currBytes  +  1);	  buffer.writeBlock(assemBuf,    0,    currBytes);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
188	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  *  3);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemLen  *  3);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  *  3);	  buffer.write(assemBuf,    0,    assemLen    +    3);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
189	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemSize  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemSize  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemSize  +  1);	  buffer.writeBlock(assemBuf,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
190	[BUG]  [BUGGY]  if(!finished)  {  buffer.append(':');  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append(':');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append(':');  }	  buffer.append(':');    	non-compiled	[CE]  <identifier>  expected	64	None	replace
191	[BUG]  [BUGGY]  if(closed)  {  buffer.append(':');  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append(':');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append(':');  }	  buffer.append(':');    	non-compiled	[CE]  <identifier>  expected	64	None	replace
192	[BUG]  [BUGGY]  if(closed)  {  buffer.append(':');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append(':');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append(':');  }  else  {  writeEOFRecord();  }	  buffer.append(':');    	non-compiled	[CE]  <identifier>  expected	64	None	replace
193	[BUG]  [BUGGY]  if(closed)  {  buffer.append(':');  }  else  {  out.write(currName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append(':');  }  else  {  out.write(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append(':');  }  else  {  out.write(currName);  }	  buffer.append(':');    	non-compiled	[CE]  <identifier>  expected	64	None	replace
194	[BUG]  [BUGGY]  if(finished)  {  buffer.append(':');  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.append(':');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.append(':');  }	  buffer.append(':');    	non-compiled	[CE]  <identifier>  expected	64	None	replace
195	[BUG]  [BUGGY]  if(finished)  {  buffer.append(':');  }  else  {  out.write(currName);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.append(':');  }  else  {  out.write(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.append(':');  }  else  {  out.write(currName);  }	  buffer.append(':');    	non-compiled	[CE]  <identifier>  expected	64	None	replace
196	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
197	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
198	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
199	[BUG]  [BUGGY]  if(finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
200	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  str.length();  ++i)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  str.length();  ++i)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  str.length();  ++i)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
201	[BUG]  [BUGGY]  if(finished)  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
202	[BUG]  [BUGGY]  writeEOFRecord();  writeEOFRecord();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  writeEOFRecord();  writeEOFRecord();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	writeEOFRecord();  writeEOFRecord();	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
203	[BUG]  [BUGGY]  readEOFRecord();  writeEOFRecord();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  readEOFRecord();  writeEOFRecord();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	readEOFRecord();  writeEOFRecord();	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
204	[BUG]  [BUGGY]  if(closed)  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
205	[BUG]  [BUGGY]  if(closed)  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
206	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  recordSize  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  recordSize  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  recordSize  +  1);	  buffer.writeBlock(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
207	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currName);	  buffer.writeBlock(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
208	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  currBytes  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  currBytes  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  currBytes  +  1);	  buffer.write(assemBuf,    0,    currBytes);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
209	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  currBytes  -  currSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  currBytes  -  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  currBytes  -  currSize);	  buffer.write(assemBuf,    0,    currBytes);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
210	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('  ');  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append('  ');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('  ');  }	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
211	[BUG]  [BUGGY]  if(closed)  {  buffer.append('  ');  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append('  ');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('  ');  }	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
212	[BUG]  [BUGGY]  if(closed)  {  buffer.append('  ');  }  else  {  out.write(currName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append('  ');  }  else  {  out.write(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('  ');  }  else  {  out.write(currName);  }	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
213	[BUG]  [BUGGY]  if(finished)  {  buffer.append('  ');  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.append('  ');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.append('  ');  }	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
214	[BUG]  [BUGGY]  if(closed)  {  buffer.append('  ');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append('  ');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('  ');  }  else  {  writeEOFRecord();  }	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
215	[BUG]  [BUGGY]  if(closed)  {  buffer.append('  ');  }  else  {  buffer.append('  ');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append('  ');  }  else  {  buffer.append('  ');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('  ');  }  else  {  buffer.append('  ');  }	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
216	[BUG]  [BUGGY]  buffer.endBlock(LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.endBlock(LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.endBlock(LONGFILE_ERROR);	  buffer.endBlock(currName);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
217	[BUG]  [BUGGY]  buffer.endBlock(lONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.endBlock(lONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.endBlock(lONGFILE_ERROR);	  buffer.endBlock(currName);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
218	[BUG]  [BUGGY]  buffer.endBlock(assemBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.endBlock(assemBuf);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.endBlock(assemBuf);	  buffer.endBlock(currName);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
219	[BUG]  [BUGGY]  buffer.finishBlock(currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finishBlock(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finishBlock(currName);	  buffer.endBlock(currName);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
220	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  LONGFILE_ERROR);	  buffer.setLength(0);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
221	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  currName.length());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  currName.length());  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  currName.length());	  buffer.setLength(0);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
222	[BUG]  [BUGGY]  os.write('n');  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.write('n');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.write('n');	  os.flush();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
223	[BUG]  [BUGGY]  os.write(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.write(buffer,  0,  buffer.length);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.write(buffer,  0,  buffer.length);	  os.flush();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
224	[BUG]  [BUGGY]  os.write(currName);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.write(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.write(currName);	  os.flush();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
225	[BUG]  [BUGGY]  os.writeEnd();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.writeEnd();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.writeEnd();	  os.flush();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
226	[BUG]  [BUGGY]  os.defaultReader().flush();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.defaultReader().flush();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.defaultReader().flush();	  os.flush();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
227	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  *  4);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemLen  *  4);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  *  4);	  buffer.write(assemBuf,    0,    assemLen    +    4);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
228	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemBuf.length  -  1);	  buffer.write(assemBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
229	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length  +  2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length  +  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemBuf.length  +  2);	  buffer.write(assemBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
230	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length  +  4);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length  +  4);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemBuf.length  +  4);	  buffer.write(assemBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
231	[BUG]  [BUGGY]  if(closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  out.write(assemBuf,  0,  currSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  out.write(assemBuf,  0,  currSize);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  else  {  out.write(assemBuf,  0,  currSize);  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    out.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
232	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  out.write(assemBuf,  0,  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	out.write(assemBuf,  0,  currSize);	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    out.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
233	[BUG]  [BUGGY]  if(finished)  {  if(currName!=  null)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  if(currName!=  null)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  if(currName!=  null)  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    out.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
234	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordSize  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  recordSize  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  recordSize  +  1);	  buffer.write(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
235	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
236	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
237	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
238	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
239	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i  +  1));  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i  +  1));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i  +  1));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
240	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName.charAt(i));  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName.charAt(i));  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName.charAt(i));	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
241	[BUG]  [BUGGY]  os.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.write(assemBuf,  0,  assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.write(assemBuf,  0,  assemLen);	  os.close();    	non-compiled	[CE]  <identifier>  expected	75	None	replace
242	[BUG]  [BUGGY]  os.writeEndObject();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.writeEndObject();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.writeEndObject();	  os.close();    	non-compiled	[CE]  <identifier>  expected	75	None	replace
243	[BUG]  [BUGGY]  buffer.writeBytes(assemLen);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBytes(assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBytes(assemLen);	  buffer.writeBytes(currName);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
244	[BUG]  [BUGGY]  buffer.writeBytes(assemBuf,  currName);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBytes(assemBuf,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBytes(assemBuf,  currName);	  buffer.writeBytes(currName);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
245	[BUG]  [BUGGY]  buffer.writeBytes(lONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBytes(lONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBytes(lONGFILE_ERROR);	  buffer.writeBytes(currName);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
246	[BUG]  [BUGGY]  buffer.writeBytes(lONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBytes(lONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBytes(lONGFILE_GNU);	  buffer.writeBytes(currName);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
247	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }	  if(closed)    {    buffer.append('n');    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
248	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }	  if(closed)    {    buffer.append('n');    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
249	[BUG]  [BUGGY]  if(finished)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }	  if(closed)    {    buffer.append('n');    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
250	[BUG]  [BUGGY]  after(closed)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  after(closed)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	after(closed)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }	  if(closed)    {    buffer.append('n');    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
251	[BUG]  [BUGGY]  while(!finished)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(!finished)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(!finished)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }	  if(closed)    {    buffer.append('n');    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
252	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  currSize  +  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  currSize  +  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  currSize  +  2);	  buffer.write(assemBuf,    0,    currSize    +    1);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
253	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  currSize  /  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  currSize  /  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  currSize  /  1);	  buffer.write(assemBuf,    0,    currSize    +    1);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
254	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('/');  }	  buffer.append('/');    	non-compiled	[CE]  <identifier>  expected	65	None	replace
255	[BUG]  [BUGGY]  if(closed)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('/');  }	  buffer.append('/');    	non-compiled	[CE]  <identifier>  expected	65	None	replace
256	[BUG]  [BUGGY]  buffer.append('/'  +  currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('/'  +  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('/'  +  currName);	  buffer.append('/');    	non-compiled	[CE]  <identifier>  expected	65	None	replace
257	[BUG]  [BUGGY]  if(closed)  {  buffer.append('/');  }  else  {  out.write(currName);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append('/');  }  else  {  out.write(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('/');  }  else  {  out.write(currName);  }	  buffer.append('/');    	non-compiled	[CE]  <identifier>  expected	65	None	replace
258	[BUG]  [BUGGY]  if(finished)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.append('/');  }	  buffer.append('/');    	non-compiled	[CE]  <identifier>  expected	65	None	replace
259	[BUG]  [BUGGY]  if(closed)  {  buffer.append('/');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append('/');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('/');  }  else  {  writeEOFRecord();  }	  buffer.append('/');    	non-compiled	[CE]  <identifier>  expected	65	None	replace
260	[BUG]  [BUGGY]  buffer.finishArchive();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finishArchive();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finishArchive();	  buffer.endArchive();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
261	[BUG]  [BUGGY]  buffer.finishArchive(currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finishArchive(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finishArchive(currName);	  buffer.endArchive();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
262	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  ==  0)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  ==  0)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  ==  0)  {  buffer.append(currName);  }	  if(currName!=    null    ||    currName.length()    ==    0)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
263	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.length()  ==  0)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null  ||  currName.length()  ==  0)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null  ||  currName.length()  ==  0)  {  buffer.append(currName);  }	  if(currName!=    null    ||    currName.length()    ==    0)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
264	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  >=  0)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  ||  currName.length()  >=  0)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  >=  0)  {  buffer.append(currName);  }	  if(currName!=    null    ||    currName.length()    ==    0)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
265	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  >  0)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  ||  currName.length()  >  0)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  >  0)  {  buffer.append(currName);  }	  if(currName!=    null    ||    currName.length()    ==    0)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
266	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  <  0)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  ||  currName.length()  <  0)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  <  0)  {  buffer.append(currName);  }	  if(currName!=    null    ||    currName.length()    ==    0)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
267	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(closed)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(closed)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(closed)  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
268	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(closed)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(closed)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(closed)  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
269	[BUG]  [BUGGY]  if(finished)  {  buffer.append('n');  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.append('n');  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.append('n');  }  else  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
270	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('n');  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append('n');  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('n');  }  else  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
271	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(closed)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(closed)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  if(closed)  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
272	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  if(closed)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  if(closed)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  if(closed)  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
273	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  shortFileMode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  shortFileMode);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  shortFileMode);	  buffer.writeBlock(assemBuf,    0,    blockSize);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
274	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  assemLen);	  buffer.writeBlock(assemBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
275	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  blockSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  blockSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  blockSize);	  buffer.writeBlock(assemBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
276	[BUG]  [BUGGY]  buffer.write(assemBuf,  currSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  currSize);	  buffer.writeBlock(assemBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
277	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
278	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
279	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
280	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
281	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
282	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName.length  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName.length  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currName.length  -  1);	  buffer.writeBlock(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
283	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName.length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName.length  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currName.length  +  1);	  buffer.writeBlock(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
284	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName.length  -  2);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName.length  -  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currName.length  -  2);	  buffer.writeBlock(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
285	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName.length  -  4);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName.length  -  4);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currName.length  -  4);	  buffer.writeBlock(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
286	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName.length  +  2);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName.length  +  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currName.length  +  2);	  buffer.writeBlock(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
287	[BUG]  [BUGGY]  buffer.delete(LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(LONGFILE_GNU);	  buffer.delete(LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
288	[BUG]  [BUGGY]  buffer.delete(lONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(lONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(lONGFILE_GNU);	  buffer.delete(LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
289	[BUG]  [BUGGY]  buffer.delete(currName);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(currName);	  buffer.delete(LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
290	[BUG]  [BUGGY]  buffer.delete(LONGFILE_GNU,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(LONGFILE_GNU,  LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(LONGFILE_GNU,  LONGFILE_ERROR);	  buffer.delete(LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
291	[BUG]  [BUGGY]  buffer.release(LONGFILE_ERROR,  currName);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.release(LONGFILE_ERROR,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.release(LONGFILE_ERROR,  currName);	  buffer.delete(LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
292	[BUG]  [BUGGY]  buffer.write(assemLen,  0,  blockSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemLen,  0,  blockSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemLen,  0,  blockSize);	  buffer.write(assemLen,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
293	[BUG]  [BUGGY]  buffer.write(assemLen,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemLen,  0,  assemBuf.length);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemLen,  0,  assemBuf.length);	  buffer.write(assemLen,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
294	[BUG]  [BUGGY]  buffer.write(blockSize,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(blockSize,  0,  assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(blockSize,  0,  assemLen);	  buffer.write(assemLen,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
295	[BUG]  [BUGGY]  buffer.write(assemSize,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemSize,  0,  assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemSize,  0,  assemLen);	  buffer.write(assemLen,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
296	[BUG]  [BUGGY]  buffer.delete(lONGFILE_ERROR,  LONGFILE_TRUNCATE);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(lONGFILE_ERROR,  LONGFILE_TRUNCATE);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(lONGFILE_ERROR,  LONGFILE_TRUNCATE);	  buffer.delete(LONGFILE_ERROR,    LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
297	[BUG]  [BUGGY]  buffer.delete(lONGFILE_ERROR,  currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(lONGFILE_ERROR,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(lONGFILE_ERROR,  currName);	  buffer.delete(LONGFILE_ERROR,    LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
298	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('n',  'n');  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append('n',  'n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('n',  'n');  }	  buffer.append('n',    'n');    	non-compiled	[CE]  <identifier>  expected	77	None	replace
299	[BUG]  [BUGGY]  buffer.append('n',  'A');  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('n',  'A');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('n',  'A');	  buffer.append('n',    'n');    	non-compiled	[CE]  <identifier>  expected	77	None	replace
300	[BUG]  [BUGGY]  buffer.write(assemBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf);	  buffer.write(currName);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
301	[BUG]  [BUGGY]  buffer.write(assemBuf,  currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  currName);	  buffer.write(currName);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
302	[BUG]  [BUGGY]  buffer.write(LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(LONGFILE_ERROR);	  buffer.write(currName);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
303	[BUG]  [BUGGY]  buffer.write(lONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(lONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(lONGFILE_ERROR);	  buffer.write(currName);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
304	[BUG]  [BUGGY]  buffer.append('n',  '/'  +  currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('n',  '/'  +  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('n',  '/'  +  currName);	  buffer.append('n',    '/');    	non-compiled	[CE]  <identifier>  expected	79	None	replace
305	[BUG]  [BUGGY]  buffer.append('N',  '/');  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('N',  '/');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('N',  '/');	  buffer.append('n',    '/');    	non-compiled	[CE]  <identifier>  expected	79	None	replace
306	[BUG]  [BUGGY]  buffer.write('n',  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write('n',  0);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write('n',  0);	  buffer.write('n');    	non-compiled	[CE]  <identifier>  expected	1	None	replace
307	[BUG]  [BUGGY]  buffer.write('n'  +  currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write('n'  +  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write('n'  +  currName);	  buffer.write('n');    	non-compiled	[CE]  <identifier>  expected	1	None	replace
308	[BUG]  [BUGGY]  buffer.write('n',  '/');  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write('n',  '/');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write('n',  '/');	  buffer.write('n');    	non-compiled	[CE]  <identifier>  expected	1	None	replace
309	[BUG]  [BUGGY]  buffer.write('n',  '-');  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write('n',  '-');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write('n',  '-');	  buffer.write('n');    	non-compiled	[CE]  <identifier>  expected	1	None	replace
310	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  writeBytes());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  writeBytes());  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  writeBytes());	  buffer.write(assemBuf,    0,    writeEOFRecord());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
311	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  writeUTF8());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  writeUTF8());  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  writeUTF8());	  buffer.write(assemBuf,    0,    writeEOFRecord());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
312	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  writeERROR());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  writeERROR());  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  writeERROR());	  buffer.write(assemBuf,    0,    writeEOFRecord());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
313	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  writeLongFileMode());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  writeLongFileMode());  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  writeLongFileMode());	  buffer.write(assemBuf,    0,    writeEOFRecord());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
314	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
315	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
316	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
317	[BUG]  [BUGGY]  while(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
318	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
319	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.close();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  buffer.close();	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
320	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  currName,  0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  currName,  0);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  currName,  0);	  buffer.writeBlock(assemBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
321	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  currName,  writeEOFRecord());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  currName,  writeEOFRecord());  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  currName,  writeEOFRecord());	  buffer.writeBlock(assemBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
322	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  currName,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  currName,  true);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  currName,  true);	  buffer.writeBlock(assemBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
323	[BUG]  [BUGGY]  if(closed)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
324	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
325	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  buffer.append('n');  }	  if(currName!=    null)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
326	[BUG]  [BUGGY]  buffer.writeBlock(assemLen  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemLen  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemLen  +  1);	  buffer.writeBlock(assemLen);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
327	[BUG]  [BUGGY]  buffer.writeBlock(assemLen  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemLen  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemLen  -  1);	  buffer.writeBlock(assemLen);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
328	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
329	[BUG]  [BUGGY]  if(!finished)  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  writeEOFRecord();  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
330	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  finish();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  finish();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  finish();  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
331	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  throw  new  IOException( " ");  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  throw  new  IOException( " ");  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
332	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.append('n');  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
333	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.writeBytes(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.writeBytes(assemBuf,  0,  assemLen);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.writeBytes(assemBuf,  0,  assemLen);  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
334	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.append(LONGFILE_GNU);  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.append(LONGFILE_GNU);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.append(LONGFILE_GNU);  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
335	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  *  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemLen  *  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  *  2);	  buffer.write(assemBuf,    0,    assemLen    +    2);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
336	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(buffer[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
337	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(buffer[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
338	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(buffer[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
339	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(buffer[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
340	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.append(buffer[i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.append(buffer[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.append(buffer[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(buffer[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
341	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(buffer[i]);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(buffer[i]);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(buffer[i]);	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(buffer[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
342	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemSize  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemSize  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemSize  -  1);	  buffer.write(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
343	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  /  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemLen  /  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  /  1);	  buffer.write(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
344	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  *  2  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemLen  *  2  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  *  2  -  1);	  buffer.write(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
345	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append('n');  }	  if(currName!=    null    ||    currName.length()    ==    0)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
346	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append('/');  }	  if(currName!=    null    ||    currName.length()    ==    0)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
347	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  writeLONGFILE_ERROR());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  writeLONGFILE_ERROR());  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  writeLONGFILE_ERROR());	  buffer.write(assemBuf,    0,    writeEOFRecord());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
348	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  writeHELP());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  writeHELP());  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  writeHELP());	  buffer.write(assemBuf,    0,    writeEOFRecord());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
349	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  writeUTF());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  writeUTF());  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  writeUTF());	  buffer.write(assemBuf,    0,    writeEOFRecord());    	non-compiled	[CE]  <identifier>  expected	44	None	replace
350	[BUG]  [BUGGY]  buffer.delete(LONGFILE_ERROR,  LONGFILE_TRUNCATE);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(LONGFILE_ERROR,  LONGFILE_TRUNCATE);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(LONGFILE_ERROR,  LONGFILE_TRUNCATE);	  buffer.delete(LONGFILE_ERROR,    LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
351	[BUG]  [BUGGY]  buffer.delete(LONGFILE_ERROR,  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(LONGFILE_ERROR,  0);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(LONGFILE_ERROR,  0);	  buffer.delete(LONGFILE_ERROR,    LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
352	[BUG]  [BUGGY]  buffer.endLong(currSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.endLong(currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.endLong(currSize);	  buffer.endLong(currName);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
353	[BUG]  [BUGGY]  buffer.endInt(currSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.endInt(currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.endInt(currSize);	  buffer.endLong(currName);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
354	[BUG]  [BUGGY]  if(!closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!closed)  {  if(currName!=  null)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!closed)  {  if(currName!=  null)  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    out.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
355	[BUG]  [BUGGY]  if(closed)  {  buffer.append(currName);  }  else  {  out.write(assemBuf,  0,  currSize);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append(currName);  }  else  {  out.write(assemBuf,  0,  currSize);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append(currName);  }  else  {  out.write(assemBuf,  0,  currSize);  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    out.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
356	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  assemLen  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  assemLen  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  assemLen  -  1);	  buffer.finish(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
357	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  recordBuf.length);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  recordBuf.length);	  buffer.finish(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
358	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
359	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
360	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.length()!=  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null  ||  currName.length()!=  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null  ||  currName.length()!=  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
361	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.append(currName);  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  buffer.append(currName);  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  buffer.append(currName);  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
362	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  buf.length  -  3);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  buf.length  -  3);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  buf.length  -  3);	  buffer.write(assemBuf,    0,    buf.length    -    4);    	non-compiled	[CE]  <identifier>  expected	51	None	replace
363	[BUG]  [BUGGY]  buffer.append('n',  '-'  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('n',  '-'  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('n',  '-'  +  1);	  buffer.append('n',    '-');    	non-compiled	[CE]  <identifier>  expected	80	None	replace
364	[BUG]  [BUGGY]  buffer.endRecord();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.endRecord();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.endRecord();	  buffer.endArchive();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
365	[BUG]  [BUGGY]  buffer.endInput();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.endInput();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.endInput();	  buffer.endArchive();    	non-compiled	[CE]  <identifier>  expected	84	None	replace
366	[BUG]  [BUGGY]  buffer.append(currName,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(currName,  LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(currName,  LONGFILE_ERROR);	  buffer.delete(LONGFILE_ERROR,    currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
367	[BUG]  [BUGGY]  buffer.write(currName,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(currName,  LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(currName,  LONGFILE_ERROR);	  buffer.delete(LONGFILE_ERROR,    currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
368	[BUG]  [BUGGY]  buffer.reset(currName,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.reset(currName,  LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.reset(currName,  LONGFILE_ERROR);	  buffer.delete(LONGFILE_ERROR,    currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
369	[BUG]  [BUGGY]  os.skipChildren();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.skipChildren();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.skipChildren();	  os.close();    	non-compiled	[CE]  <identifier>  expected	75	None	replace
370	[BUG]  [BUGGY]  os.finish();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.finish();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.finish();	  os.close();    	non-compiled	[CE]  <identifier>  expected	75	None	replace
371	[BUG]  [BUGGY]  os.write(buffer,  0,  0);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.write(buffer,  0,  0);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.write(buffer,  0,  0);	  os.close();    	non-compiled	[CE]  <identifier>  expected	75	None	replace
372	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  if(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  if(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  if(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    buffer.close();    }    else    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
373	[BUG]  [BUGGY]  if(closed)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    buffer.close();    }    else    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
374	[BUG]  [BUGGY]  if(finish)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    buffer.close();    }    else    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
375	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  if(finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  if(finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  if(finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    buffer.close();    }    else    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
376	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  buf.length  *  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  buf.length  *  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  buf.length  *  1);	  buffer.write(assemBuf,    0,    buf.length    +    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
377	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  /  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemLen  /  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  /  2);	  buffer.write(assemBuf,    0,    assemLen    +    2);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
378	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  currName,  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  currName,  LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  currName,  LONGFILE_GNU);	  buffer.writeBlock(assemBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
379	[BUG]  [BUGGY]  if(finish)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  buffer.append('n');  }	  if(!finished)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
380	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(finished)  {  buffer.append('n');  }	  if(!finished)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
381	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {!finished)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {!finished)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {!finished)  {  buffer.append('n');  }	  if(!finished)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
382	[BUG]  [BUGGY]  buffer.append(',').append(recordSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(',').append(recordSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(',').append(recordSize);	  buffer.append(',');    	non-compiled	[CE]  <identifier>  expected	87	None	replace
383	[BUG]  [BUGGY]  buffer.append(',').append('n');  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(',').append('n');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(',').append('n');	  buffer.append(',');    	non-compiled	[CE]  <identifier>  expected	87	None	replace
384	[BUG]  [BUGGY]  buffer.append(',').append(currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(',').append(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(',').append(currName);	  buffer.append(',');    	non-compiled	[CE]  <identifier>  expected	87	None	replace
385	[BUG]  [BUGGY]  buffer.append(',').append(':');  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(',').append(':');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(',').append(':');	  buffer.append(',');    	non-compiled	[CE]  <identifier>  expected	87	None	replace
386	[BUG]  [BUGGY]  buffer.append(',').append('  ');  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(',').append('  ');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(',').append('  ');	  buffer.append(',');    	non-compiled	[CE]  <identifier>  expected	87	None	replace
387	[BUG]  [BUGGY]  if(finish)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
388	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  recordBuf.length);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  recordBuf.length);	  buffer.writeBlock(assemBuf,    0,    blockSize);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
389	[BUG]  [BUGGY]  if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
390	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]  + ", ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]  + ", ");  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]  + ", ");  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
391	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
392	[BUG]  [BUGGY]  buffer.setLength(0L);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.setLength(0L);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.setLength(0L);	  buffer.setLength(0);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
393	[BUG]  [BUGGY]  buffer.delete(0,  LONGFILE_ERROR,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(0,  LONGFILE_ERROR,  assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(0,  LONGFILE_ERROR,  assemLen);	  buffer.delete(0,    LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
394	[BUG]  [BUGGY]  buffer.delete(0,  LONGFILE_LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(0,  LONGFILE_LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(0,  LONGFILE_LONGFILE_GNU);	  buffer.delete(0,    LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
395	[BUG]  [BUGGY]  buffer.delete(0,  LONGFILE_ERROR  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(0,  LONGFILE_ERROR  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(0,  LONGFILE_ERROR  +  1);	  buffer.delete(0,    LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
396	[BUG]  [BUGGY]  buffer.delete(0,  LONGFILE_TRUNCATE);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(0,  LONGFILE_TRUNCATE);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(0,  LONGFILE_TRUNCATE);	  buffer.delete(0,    LONGFILE_ERROR);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
397	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length  -  2);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length  -  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemBuf.length  -  2);	  buffer.write(assemBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
398	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length  -  4);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length  -  4);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemBuf.length  -  4);	  buffer.write(assemBuf,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
399	[BUG]  [BUGGY]  if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
400	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
401	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
402	[BUG]  [BUGGY]  buffer.finish(assemBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  recordSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  recordSize);	  buffer.finish(assemBuf);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
403	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  recordBuf.length  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  recordBuf.length  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  recordBuf.length  -  1);	  buffer.writeBlock(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
404	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  -  recordSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  -  recordSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currSize  -  recordSize);	  buffer.writeBlock(assemBuf,    0,    currSize    -    currSize);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
405	[BUG]  [BUGGY]  after(buffer,  finished)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  after(buffer,  finished)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	after(buffer,  finished)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }	  if(closed)    {    buffer.append('n');    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
406	[BUG]  [BUGGY]  after(buffer,  finish)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  after(buffer,  finish)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	after(buffer,  finish)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }	  if(closed)    {    buffer.append('n');    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
407	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  writeEOFRecord());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  writeEOFRecord());  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  writeEOFRecord());	  buffer.finish(assemBuf,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
408	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  -  2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  -  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currSize  -  2);	  buffer.writeBlock(assemBuf,    0,    currSize    -    1);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
409	[BUG]  [BUGGY]  buffer.append('$',  '/');  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('$',  '/');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('$',  '/');	  buffer.append('n',    '/');    	non-compiled	[CE]  <identifier>  expected	79	None	replace
410	[BUG]  [BUGGY]  if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
411	[BUG]  [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append('/');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
412	[BUG]  [BUGGY]  if(closed)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
413	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
414	[BUG]  [BUGGY]  if(!finished)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
415	[BUG]  [BUGGY]  buffer.delete(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(assemBuf,  0,  assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(assemBuf,  0,  assemLen);	  buffer.release();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
416	[BUG]  [BUGGY]  buffer.release(assemBuf);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.release(assemBuf);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.release(assemBuf);	  buffer.release();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
417	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  /  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  /  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  /  2);	  buffer.writeBlock(assemBuf,    0,    assemLen    +    2);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
418	[BUG]  [BUGGY]  if(closed)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
419	[BUG]  [BUGGY]  if(finish)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
420	[BUG]  [BUGGY]  if(finished)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
421	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
422	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len.length();  i++)  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len.length();  i++)  {  buffer.close();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
423	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.finish();  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.finish();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.finish();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
424	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
425	[BUG]  [BUGGY]  buffer.append('/',  '/');  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('/',  '/');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('/',  '/');	  buffer.append('/');    	non-compiled	[CE]  <identifier>  expected	65	None	replace
426	[BUG]  [BUGGY]  buffer.append('/',  0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('/',  0);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('/',  0);	  buffer.append('/');    	non-compiled	[CE]  <identifier>  expected	65	None	replace
427	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
428	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.length()!=  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null  ||  currName.length()!=  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null  ||  currName.length()!=  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
429	[BUG]  [BUGGY]  buffer.writeFieldName(assemBuf,  currName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeFieldName(assemBuf,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeFieldName(assemBuf,  currName);	  buffer.writeFieldName(currName);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
430	[BUG]  [BUGGY]  buffer.writeFieldName(assemName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeFieldName(assemName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeFieldName(assemName);	  buffer.writeFieldName(currName);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
431	[BUG]  [BUGGY]  buffer.writeUTF(currName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeUTF(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeUTF(currName);	  buffer.writeString(currName);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
432	[BUG]  [BUGGY]  buffer.writeInt(currSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeInt(currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeInt(currSize);	  buffer.writeString(currName);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
433	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
434	[BUG]  [BUGGY]  buffer.append('n',  'n'  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('n',  'n'  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('n',  'n'  +  1);	  buffer.append('n',    'n');    	non-compiled	[CE]  <identifier>  expected	77	None	replace
435	[BUG]  [BUGGY]  buffer.append('n',  'r');  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('n',  'r');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('n',  'r');	  buffer.append('n',    'n');    	non-compiled	[CE]  <identifier>  expected	77	None	replace
436	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  +  5);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemLen  +  5);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  +  5);	  buffer.write(assemBuf,    0,    assemLen    +    3);    	non-compiled	[CE]  <identifier>  expected	94	None	replace
437	[BUG]  [BUGGY]  buffer.write('n',  'n');  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write('n',  'n');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write('n',  'n');	  buffer.write('n');    	non-compiled	[CE]  <identifier>  expected	1	None	replace
438	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  /  4);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  /  4);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  /  4);	  buffer.writeBlock(assemBuf,    0,    assemLen    +    4);    	non-compiled	[CE]  <identifier>  expected	40	None	replace
439	[BUG]  [BUGGY]  buffer.append(':'  +  currName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(':'  +  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(':'  +  currName);	  buffer.append(':');    	non-compiled	[CE]  <identifier>  expected	64	None	replace
440	[BUG]  [BUGGY]  buffer.append(':').append(currName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(':').append(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(':').append(currName);	  buffer.append(':');    	non-compiled	[CE]  <identifier>  expected	64	None	replace
441	[BUG]  [BUGGY]  buffer.append(':').append(recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(':').append(recordBuf);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(':').append(recordBuf);	  buffer.append(':');    	non-compiled	[CE]  <identifier>  expected	64	None	replace
442	[BUG]  [BUGGY]  buffer.append(':').append(recordSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(':').append(recordSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(':').append(recordSize);	  buffer.append(':');    	non-compiled	[CE]  <identifier>  expected	64	None	replace
443	[BUG]  [BUGGY]  if(!closed)  {  buffer.append('n');  }  else  {  out.write(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!closed)  {  buffer.append('n');  }  else  {  out.write(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!closed)  {  buffer.append('n');  }  else  {  out.write(currName);  }	  if(closed)    {    buffer.append('n');    }    else    {    out.write(currName);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
444	[BUG]  [BUGGY]  buffer.append(assemBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(assemBuf,  recordSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(assemBuf,  recordSize);	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
445	[BUG]  [BUGGY]  buffer.delete(assemBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(assemBuf,  0,  recordBuf.length);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(assemBuf,  0,  recordBuf.length);	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
446	[BUG]  [BUGGY]  buffer.append(assemBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(assemBuf,  0,  recordSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(assemBuf,  0,  recordSize);	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
447	[BUG]  [BUGGY]  buffer.writeBytes(LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBytes(LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBytes(LONGFILE_ERROR);	  buffer.writeBytes(currName);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
448	[BUG]  [BUGGY]  buffer.writeBytes(assemName);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBytes(assemName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBytes(assemName);	  buffer.writeBytes(currName);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
449	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
450	[BUG]  [BUGGY]  if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
451	[BUG]  [BUGGY]  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(currName.substring(0,  currName.length()  -  currName.length()));	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
452	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length())  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length())  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length())	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
453	[BUG]  [BUGGY]  if(finish)  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  writeEOFRecord();  writeEOFRecord();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
454	[BUG]  [BUGGY]  if(currName!=  null)  {  currName  =  buffer.toString();  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  currName  =  buffer.toString();  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  currName  =  buffer.toString();  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(buffer[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
455	[BUG]  [BUGGY]  if(currName  ==  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null  ||  currName.length()  ==  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(buffer[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
456	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length  +  2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length  +  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  recordBuf.length  +  2);	  buffer.write(assemBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	62	None	replace
457	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemBuf.length);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemBuf.length);	  buffer.writeBlock(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
458	[BUG]  [BUGGY]  buffer.append('N'  +  '/');  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('N'  +  '/');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('N'  +  '/');	  buffer.append('N');    	non-compiled	[CE]  <identifier>  expected	78	None	replace
459	[BUG]  [BUGGY]  buffer.append('N').append('n');  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('N').append('n');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('N').append('n');	  buffer.append('N');    	non-compiled	[CE]  <identifier>  expected	78	None	replace
460	[BUG]  [BUGGY]  buffer.append('N',  'n');  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('N',  'n');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('N',  'n');	  buffer.append('N');    	non-compiled	[CE]  <identifier>  expected	78	None	replace
461	[BUG]  [BUGGY]  buffer.append('N'  +  currName);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('N'  +  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('N'  +  currName);	  buffer.append('N');    	non-compiled	[CE]  <identifier>  expected	78	None	replace
462	[BUG]  [BUGGY]  buff.flush();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buff.flush();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buff.flush();	  buff.endBlock();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
463	[BUG]  [BUGGY]  buffer.write(assemLen,  0,  currSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemLen,  0,  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemLen,  0,  currSize);	  buffer.write(assemLen,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
464	[BUG]  [BUGGY]  buffer.write(assemLen,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemLen,  0,  recordSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemLen,  0,  recordSize);	  buffer.write(assemLen,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
465	[BUG]  [BUGGY]  buffer.append(''+  currName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(''+  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(''+  currName);	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
466	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('  ');  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append('  ');  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('  ');  }  else  {  writeEOFRecord();  writeEOFRecord();  }	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
467	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('  ');  }  else  {  buffer.append('  ');  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append('  ');  }  else  {  buffer.append('  ');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('  ');  }  else  {  buffer.append('  ');  }	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
468	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('  ');  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append('  ');  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('  ');  }  else  {  buffer.append('n');  }	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
469	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('  ');  }  else  {  writeEOFRecord();  writeEOFRecord();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append('  ');  }  else  {  writeEOFRecord();  writeEOFRecord();  finished  =  true;  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('  ');  }  else  {  writeEOFRecord();  writeEOFRecord();  finished  =  true;  }	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
470	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.append( "n ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.append( "n ");  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.append( "n ");  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
471	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.writeRecord(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.writeRecord(assemBuf,  0,  assemLen);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.writeRecord(assemBuf,  0,  assemLen);  }	  writeEOFRecord();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
472	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
473	[BUG]  [BUGGY]  if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
474	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
475	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length())  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length())  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length())	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
476	[BUG]  [BUGGY]  buffer.append(']');  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(']');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(']');	  buffer.append('ufffd');    	non-compiled	[CE]  <identifier>  expected	63	None	replace
477	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  /  4);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemLen  /  4);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  /  4);	  buffer.write(assemBuf,    0,    assemLen    +    4);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
478	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(closed)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(closed)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(closed)  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
479	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(closed)  {  buffer.append('n');  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(closed)  {  buffer.append('n');  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(closed)  {  buffer.append('n');  }  else  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
480	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  recordSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  recordSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  recordSize);	  buffer.writeBlock(assemBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
481	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  currSize  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  currSize  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  currSize  -  1);	  buffer.writeBlock(assemBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
482	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  currSize  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  currSize  +  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  currSize  +  1);	  buffer.writeBlock(assemBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
483	[BUG]  [BUGGY]  if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
484	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]  + ", ");  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]  + ", ");  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]  + ", ");  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
485	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len.length();  i++)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  len.length();  i++)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  len.length();  i++)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
486	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(REcordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(REcordBuf[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(REcordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
487	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length();  i++)  {  buffer.append(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length();  i++)  {  buffer.append(recordBuf[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  records.length();  i++)  {  buffer.append(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
488	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
489	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append('/');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
490	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.releaseOutputStream();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  final  OutputStream  out  =  buffer.releaseOutputStream();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	final  OutputStream  out  =  buffer.releaseOutputStream();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
491	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream(recordBuf);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream(recordBuf);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	final  OutputStream  out  =  buffer.getOutputStream(recordBuf);	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
492	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.finish();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  final  OutputStream  out  =  buffer.finish();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	final  OutputStream  out  =  buffer.finish();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
493	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  recordLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  recordLen);	  buffer.write(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
494	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordSize  -  currSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  recordSize  -  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  recordSize  -  currSize);	  buffer.write(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
495	[BUG]  [BUGGY]  os.delete(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.delete(buffer,  0,  buffer.length);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.delete(buffer,  0,  buffer.length);	  os.flush();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
496	[BUG]  [BUGGY]  os.write('ufffd');  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.write('ufffd');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.write('ufffd');	  os.flush();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
497	[BUG]  [BUGGY]  if(closed)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
498	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(haveUnclosedEntry)  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(haveUnclosedEntry)  {  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
499	[BUG]  [BUGGY]  if(finish)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
500	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
501	[BUG]  [BUGGY]  buffer.append('N').append(currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('N').append(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('N').append(currName);	  buffer.append('N');    	non-compiled	[CE]  <identifier>  expected	78	None	replace
502	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  *  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  *  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currSize  *  1);	  buffer.writeBlock(assemBuf,    0,    currSize    +    1);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
503	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  assemSize  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.finish(assemBuf,  0,  assemSize  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  assemSize  -  1);	  buffer.finish(assemBuf,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
504	[BUG]  [BUGGY]  buffer.writeBytes(currName,  0,  currSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBytes(currName,  0,  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBytes(currName,  0,  currSize);	  buffer.writeBytes(currName);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
505	[BUG]  [BUGGY]  buffer.writeBytes(currName,  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBytes(currName,  LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBytes(currName,  LONGFILE_GNU);	  buffer.writeBytes(currName);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
506	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  currName,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  currName,  false);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  currName,  false);	  buffer.writeBlock(assemBuf,    currName);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
507	[BUG]  [BUGGY]  buffer.write(assemLen,  0,  currBytes);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemLen,  0,  currBytes);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemLen,  0,  currBytes);	  buffer.write(assemLen,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	88	None	replace
508	[BUG]  [BUGGY]  buffer.write(assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemLen);	  buffer.setLength(0);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
509	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  buffer.append('n');  }	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
510	[BUG]  [BUGGY]  buffer.append(assemBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(assemBuf,  assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(assemBuf,  assemLen);	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
511	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(recordBuf!=  null)  {  buffer.append(recordBuf);  }  else  {  buffer.append(currName);  }	  buffer.append(recordBuf);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
512	[BUG]  [BUGGY]  buffer.append(')');  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(')');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(')');	  buffer.append(',');    	non-compiled	[CE]  <identifier>  expected	87	None	replace
513	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
514	[BUG]  [BUGGY]  if(finish)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
515	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
516	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.endsWith( ".js "))  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.endsWith( ".js "))  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.endsWith( ".js "))  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
517	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.endsWith( "/ "))  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.endsWith( "/ "))  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.endsWith( "/ "))  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
518	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.endsWith( ".zip "))  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.endsWith( ".zip "))  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.endsWith( ".zip "))  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
519	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('  ');  }  else  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append('  ');  }  else  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('  ');  }  else  {  buffer.append(currName);  }	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
520	[BUG]  [BUGGY]  buffer.append('  ').append(currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('  ').append(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('  ').append(currName);	  buffer.append('    ');    	non-compiled	[CE]  <identifier>  expected	5	None	replace
521	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
522	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append( ", ");  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append( ", ");  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append( ", ");  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
523	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName.substring(0,  currName.length()  -  1));  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName.substring(0,  currName.length()  -  1));  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName.substring(0,  currName.length()  -  1));	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
524	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
525	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
526	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
527	[BUG]  [BUGGY]  buffer.writeFieldName(assemBuf,  0,  blockSize);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeFieldName(assemBuf,  0,  blockSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeFieldName(assemBuf,  0,  blockSize);	  buffer.writeBlock(assemBuf,    0,    blockSize);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
528	[BUG]  [BUGGY]  buffer.writeFieldName(buffer,  currName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeFieldName(buffer,  currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeFieldName(buffer,  currName);	  buffer.writeFieldName(currName);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
529	[BUG]  [BUGGY]  buffer.writeFieldName(name);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeFieldName(name);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeFieldName(name);	  buffer.writeFieldName(currName);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
530	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
531	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.endsWith( ".js "))  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.endsWith( ".js "))  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.endsWith( ".js "))  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append('/');    }    	non-compiled	[CE]  <identifier>  expected	24	None	replace
532	[BUG]  [BUGGY]  os.write(assemBuf,  0,  assemSize);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  os.write(assemBuf,  0,  assemSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.write(assemBuf,  0,  assemSize);	  os.close();    	non-compiled	[CE]  <identifier>  expected	75	None	replace
533	[BUG]  [BUGGY]  if(finish)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
534	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
535	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
536	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(0));  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(0));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(0));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
537	[BUG]  [BUGGY]  buffer.append(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(assemBuf,  0,  assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(assemBuf,  0,  assemLen);	  buffer.writeBlock(assemBuf);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
538	[BUG]  [BUGGY]  buffer.append(currName).append('n');  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(currName).append('n');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(currName).append('n');	  buffer.startBlock();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
539	[BUG]  [BUGGY]  if(finish)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
540	[BUG]  [BUGGY]  if(finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
541	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(0));  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(0));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(0));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.charAt(i));    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
542	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
543	[BUG]  [BUGGY]  if(finish)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
544	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  currName  =  currName.substring(0,  currName.length()  -  currName.length());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  currName  =  currName.substring(0,  currName.length()  -  currName.length());  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  currName  =  currName.substring(0,  currName.length()  -  currName.length());	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
545	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  *  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  *  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  *  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
546	[BUG]  [BUGGY]  buffer.delete(currName,  0,  currSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(currName,  0,  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(currName,  0,  currSize);	  buffer.finish(currName);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
547	[BUG]  [BUGGY]  buffer.append(recordBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append(recordBuf,  0,  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(recordBuf,  0,  currSize);	  buffer.finish(currName);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
548	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
549	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(recordBuf[i]);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(recordBuf[i]);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(recordBuf[i]);	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
550	[BUG]  [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(recordBuf[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName  ==  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(recordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
551	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(RecordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(RecordBuf[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  recordBuf.length();  i++)  {  buffer.append(RecordBuf[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(recordBuf[i]);    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
552	[BUG]  [BUGGY]  Os.write(buffer,  0,  os.length);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  Os.write(buffer,  0,  os.length);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	Os.write(buffer,  0,  os.length);	  os.flush();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
553	[BUG]  [BUGGY]  if(finished)  {  writeERROR();  writeEOFRecord();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  writeERROR();  writeEOFRecord();  }  else  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  writeERROR();  writeEOFRecord();  }  else  {  buffer.close();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
554	[BUG]  [BUGGY]  if(finished)  {  writeFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  writeFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  writeFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }	  if(!finished)    {    writeEOFRecord();    writeEOFRecord();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
555	[BUG]  [BUGGY]  buffer.write(LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(LONGFILE_GNU);	  buffer.write(currName);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
556	[BUG]  [BUGGY]  buffer.append('/').append(currName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.append('/').append(currName);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('/').append(currName);	  buffer.append('/');    	non-compiled	[CE]  <identifier>  expected	65	None	replace
557	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currBytes  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  currBytes  -  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currBytes  -  1);	  buffer.writeBlock(assemBuf,    0,    currBytes);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
558	[BUG]  [BUGGY]  while(closed)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(closed)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(closed)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }	  if(closed)    {    buffer.append('n');    }    else    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
559	[BUG]  [BUGGY]  buffer.writeBlock(lONGFILE_GNU,  LONGFILE_TRUNCATE);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(lONGFILE_GNU,  LONGFILE_TRUNCATE);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(lONGFILE_GNU,  LONGFILE_TRUNCATE);	  buffer.writeBlock(lONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
560	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  -  2);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemLen  -  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  -  2);	  buffer.write(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
561	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  -  2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  -  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  -  2);	  buffer.writeBlock(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
562	[BUG]  [BUGGY]  buff.append('n');  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buff.append('n');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buff.append('n');	  buff.endBlock();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
563	[BUG]  [BUGGY]  buffer.write('  ');  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write('  ');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write('  ');	  buffer.write('n');    	non-compiled	[CE]  <identifier>  expected	1	None	replace
564	[BUG]  [BUGGY]  if(!finished)  {  buffer.append(':');  }  else  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append(':');  }  else  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append(':');  }  else  {  buffer.append(currName);  }	  buffer.append(':');    	non-compiled	[CE]  <identifier>  expected	64	None	replace
565	[BUG]  [BUGGY]  if(!finished)  {  buffer.append(':');  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.append(':');  }  else  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append(':');  }  else  {  buffer.append('n');  }	  buffer.append(':');    	non-compiled	[CE]  <identifier>  expected	64	None	replace
566	[BUG]  [BUGGY]  while(!finished  &&  buffer.length  >  0)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(!finished  &&  buffer.length  >  0)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(!finished  &&  buffer.length  >  0)  {  buffer.append('n');  }	  if(!finished)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
567	[BUG]  [BUGGY]  while(!finished  &&  buffer.length  >  0)  {  buffer.append('n');  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(!finished  &&  buffer.length  >  0)  {  buffer.append('n');  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(!finished  &&  buffer.length  >  0)  {  buffer.append('n');	  if(!finished)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
568	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  currSize,  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  currSize,  LONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  currSize,  LONGFILE_GNU);	  buffer.writeBlock(assemBuf,    currSize);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
569	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  <  =  0)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  ||  currName.length()  <  =  0)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  <  =  0)  {  buffer.append(currName);  }	  if(currName!=    null    ||    currName.length()    ==    0)    {    buffer.append(currName);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
570	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
571	[BUG]  [BUGGY]  if(finish)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName[i]);    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
572	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  else  {  out.write(assemBuf,  0,  currSize);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  else  {  out.write(assemBuf,  0,  currSize);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(currName);  }  else  {  out.write(assemBuf,  0,  currSize);  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    out.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
573	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(currName!=  null)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(assemLen  >  0)  {  if(currName!=  null)  {  buffer.append(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(assemLen  >  0)  {  if(currName!=  null)  {  buffer.append(currName);  }	  if(currName!=    null)    {    buffer.append(currName);    }    else    {    out.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
574	[BUG]  [BUGGY]  if(closed)  {  buffer.append('n',  currName);  }  else  {  out.write(currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(closed)  {  buffer.append('n',  currName);  }  else  {  out.write(currName);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('n',  currName);  }  else  {  out.write(currName);  }	  if(closed)    {    buffer.append('n');    }    else    {    out.write(currName);    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
575	[BUG]  [BUGGY]  buffer.remove(currName,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.remove(currName,  LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.remove(currName,  LONGFILE_ERROR);	  buffer.delete(LONGFILE_ERROR,    currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
576	[BUG]  [BUGGY]  buffer.endLong(lONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.endLong(lONGFILE_GNU);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.endLong(lONGFILE_GNU);	  buffer.endLong(currName);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
577	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(buffer[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
578	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(buffer[i]);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(buffer[i]);  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  buffer.append(buffer[i]);  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.append(buffer[i]);    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
579	[BUG]  [BUGGY]  if(finished)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finished)  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finished)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    else    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
580	[BUG]  [BUGGY]  if(!finished)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(!finished)  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    else    {    writeEOFRecord();    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	74	None	replace
581	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemSize  /  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemSize  /  1);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemSize  /  1);	  buffer.write(assemBuf,    0,    assemSize    +    1);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
582	[BUG]  [BUGGY]  while(closed)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(closed)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(closed)  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
583	[BUG]  [BUGGY]  while(!finished)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(!finished)  {  buffer.append('n');  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(!finished)  {  buffer.append('n');  }	  if(closed)    {    buffer.append('n');    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
584	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.toByteArray();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  final  OutputStream  out  =  buffer.toByteArray();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	final  OutputStream  out  =  buffer.toByteArray();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
585	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.close();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  final  OutputStream  out  =  buffer.close();  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	final  OutputStream  out  =  buffer.close();	  final    OutputStream    out    =    buffer.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	76	None	replace
586	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
587	[BUG]  [BUGGY]  if(finish)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(finish)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(finish)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
588	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  *  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  *  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  *  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
589	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  +  currName.length()));  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  +  currName.length()));  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  +  currName.length()));  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    ++i)    {    buffer.append(currName.substring(0,    currName.length()    -    currName.length()));    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
590	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  +  6);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  assemLen  +  6);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  +  6);	  buffer.write(assemBuf,    0,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
591	[BUG]  [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  &&  currName.length()  >  0)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
592	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.endsWith( ".js "))  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.endsWith( ".js "))  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.endsWith( ".js "))  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
593	[BUG]  [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  currName  =  currName.substring(0,  currName.length()  -  1);  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  while(currName!=  null  &&  currName.length()  >  0)  {  currName  =  currName.substring(0,  currName.length()  -  1);  buffer.close();  }  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	while(currName!=  null  &&  currName.length()  >  0)  {  currName  =  currName.substring(0,  currName.length()  -  1);  buffer.close();  }	  if(currName!=    null)    {    for(int    i    =    0;    i    <    currName.length();    i++)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
594	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemSize  -  currSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemSize  -  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemSize  -  currSize);	  buffer.writeBlock(assemBuf,    0,    currSize    -    currSize);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
595	[BUG]  [BUGGY]  buffer.delete(lONGFILE_GNU,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.delete(lONGFILE_GNU,  LONGFILE_ERROR);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(lONGFILE_GNU,  LONGFILE_ERROR);	  buffer.delete(LONGFILE_ERROR,    LONGFILE_GNU);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
596	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  currBytes,  currSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  currBytes,  currSize);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  currBytes,  currSize);	  buffer.write(assemBuf,    0,    currBytes);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
597	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  currBytes,  assemLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  currBytes,  assemLen);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  currBytes,  assemLen);	  buffer.write(assemBuf,    0,    currBytes);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
598	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordSize,  currBytes);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  recordSize,  currBytes);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  recordSize,  currBytes);	  buffer.write(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
599	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  buf.length  /  2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();      [BUGGY]  buffer.write(assemBuf,  0,  buf.length  /  2);  [BUGGY]      finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  buf.length  /  2);	  buffer.write(assemBuf,    0,    buf.length    +    1);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
