bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  buffer.write('n');  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write('n');  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write('n');	  buffer.flush();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
2	[BUG]  [BUGGY]  buffer.setLength(0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.setLength(0);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.setLength(0);	  buffer.flush();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
3	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  buffer.append(currName);  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  buffer.append(currName);  }	  buffer.append(currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
4	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.append(currName);  }  else  {  out.write(assemBuf,  0,  currSize);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  buffer.append(currName);  }  else  {  out.write(assemBuf,  0,  currSize);  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  buffer.append(currName);  }  else  {  out.write(assemBuf,  0,  currSize);  }	  buffer.append(currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
5	[BUG]  [BUGGY]  buffer.append('  ');  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.append('  ');  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('  ');	  buffer.append(currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
6	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  buffer.append(currName);  }  else  {  writeEOFRecord();  }	  buffer.append(currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
7	[BUG]  [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append(currName);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append(currName);  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null  ||  currName.length()  ==  0)  {  buffer.append(currName);  }	  buffer.append(currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
8	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  buffer.append(currName);  }  else  {  buffer.append('n');  }	  buffer.append(currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
9	[BUG]  [BUGGY]  buffer.delete(LONGFILE_ERROR,  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.delete(LONGFILE_ERROR,  LONGFILE_GNU);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(LONGFILE_ERROR,  LONGFILE_GNU);	  buffer.finish();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
10	[BUG]  [BUGGY]  buffer.delete(LONGFILE_ERROR,  currName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.delete(LONGFILE_ERROR,  currName);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(LONGFILE_ERROR,  currName);	  buffer.finish();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
11	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.finish(assemBuf,  0,  assemLen);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  assemLen);	  buffer.finish();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
12	[BUG]  [BUGGY]  buffer.delete(LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.delete(LONGFILE_ERROR);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(LONGFILE_ERROR);	  buffer.finish();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
13	[BUG]  [BUGGY]  if(!finished)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(!finished)  {  buffer.append('n');  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.append('n');  }	  buffer.append('n');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
14	[BUG]  [BUGGY]  if(closed)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(closed)  {  buffer.append('n');  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('n');  }	  buffer.append('n');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
15	[BUG]  [BUGGY]  if(closed)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(closed)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('n');  }  else  {  writeEOFRecord();  }	  buffer.append('n');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
16	[BUG]  [BUGGY]  if(closed)  {  buffer.append('n');  }  else  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(closed)  {  buffer.append('n');  }  else  {  buffer.append('n');  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('n');  }  else  {  buffer.append('n');  }	  buffer.append('n');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
17	[BUG]  [BUGGY]  if(closed)  {  buffer.append('n');  }  else  {  out.write(currName);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(closed)  {  buffer.append('n');  }  else  {  out.write(currName);  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(closed)  {  buffer.append('n');  }  else  {  out.write(currName);  }	  buffer.append('n');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
18	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  writeEOFRecord();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  writeEOFRecord();  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	writeEOFRecord();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(buffer[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
21	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(recordBuf[i]);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(recordBuf[i]);  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(recordBuf[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
22	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('n');  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
23	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
24	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append('/');  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
25	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf);	  buffer.writeBlock(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
26	[BUG]  [BUGGY]  buffer.writeBlock(lONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(lONGFILE_ERROR);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(lONGFILE_ERROR);	  buffer.writeBlock(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
27	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  currName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  currName);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  currName);	  buffer.writeBlock(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
28	[BUG]  [BUGGY]  buffer.writeBlock(assemLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemLen);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemLen);	  buffer.writeBlock(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
29	[BUG]  [BUGGY]  buffer.writeBlock(lONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(lONGFILE_GNU);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(lONGFILE_GNU);	  buffer.writeBlock(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
30	[BUG]  [BUGGY]  buffer.writeBytes(currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBytes(currName);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBytes(currName);	  buffer.writeBlock(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
31	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  assemLen  +  1);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  +  1);	  buffer.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
32	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  +  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  assemLen  +  2);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  +  2);	  buffer.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
33	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  +  4);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  assemLen  +  4);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  +  4);	  buffer.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
34	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  recordSize);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  recordSize);	  buffer.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
35	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  assemLen  -  1);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  -  1);	  buffer.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
36	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  +  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  +  1);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  +  1);	  buffer.writeBlock(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
37	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemSize);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemSize);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemSize);	  buffer.writeBlock(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
38	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName.length);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  0,  currName.length);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currName.length);	  buffer.writeBlock(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
39	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  +  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  +  2);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  +  2);	  buffer.writeBlock(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
40	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  +  4);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  +  4);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  +  4);	  buffer.writeBlock(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
41	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  blockSize);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  blockSize);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  blockSize);	  buffer.write(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
42	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  currBytes);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  currBytes);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  currBytes);	  buffer.write(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
43	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  currSize  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  currSize  +  1);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  currSize  +  1);	  buffer.write(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
44	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  writeEOFRecord());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  writeEOFRecord());  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  writeEOFRecord());	  buffer.write(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
45	[BUG]  [BUGGY]  buffer.finishBlock();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.finishBlock();  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finishBlock();	  buffer.endBlock();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
46	[BUG]  [BUGGY]  buff.endBlock();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buff.endBlock();  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buff.endBlock();	  buffer.endBlock();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
47	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  buf.length  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  buf.length  -  1);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  buf.length  -  1);	  buffer.write(assemBuf,    0,    buf.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
48	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  assemBuf.length);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemBuf.length);	  buffer.write(assemBuf,    0,    buf.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  buf.length  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  buf.length  +  1);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  buf.length  +  1);	  buffer.write(assemBuf,    0,    buf.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
50	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  buf.length  -  2);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  buf.length  -  2);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  buf.length  -  2);	  buffer.write(assemBuf,    0,    buf.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
51	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  buf.length  -  4);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  buf.length  -  4);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  buf.length  -  4);	  buffer.write(assemBuf,    0,    buf.length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
52	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemSize  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  assemSize  +  1);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemSize  +  1);	  buffer.write(assemBuf,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
53	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  blockSize);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  0,  blockSize);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  blockSize);	  buffer.writeBlock(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
54	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  recordSize);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  0,  recordSize);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  recordSize);	  buffer.writeBlock(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
55	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  +  1);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currSize  +  1);	  buffer.writeBlock(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
56	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  -  currSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  -  currSize);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currSize  -  currSize);	  buffer.writeBlock(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
57	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  0,  currSize  -  1);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currSize  -  1);	  buffer.writeBlock(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
58	[BUG]  [BUGGY]  buffer.writeFieldName(currName);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeFieldName(currName);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeFieldName(currName);	  buffer.writeBlock(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
59	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  currSize);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  currSize);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  currSize);	  buffer.writeBlock(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
60	[BUG]  [BUGGY]  buffer.finish(currName);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.finish(currName);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(currName);	  buffer.endBlock();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
61	[BUG]  [BUGGY]  buffer.endLong(currName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.endLong(currName);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.endLong(currName);	  buffer.endBlock();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
62	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  recordBuf.length);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  recordBuf.length);	  buffer.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
63	[BUG]  [BUGGY]  buffer.append('ufffd');  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.append('ufffd');  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('ufffd');	  buffer.append(currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
64	[BUG]  [BUGGY]  buffer.append(':');  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.append(':');  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(':');	  buffer.append(currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
65	[BUG]  [BUGGY]  buffer.append('/');  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.append('/');  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('/');	  buffer.append(currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
66	[BUG]  [BUGGY]  buffer.append(recordBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.append(recordBuf);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(recordBuf);	  buffer.append(currName);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
67	[BUG]  [BUGGY]  buffer.delete(0,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.delete(0,  LONGFILE_ERROR);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.delete(0,  LONGFILE_ERROR);	  buffer.flush();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
68	[BUG]  [BUGGY]  buffer.release();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.release();  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.release();	  buffer.flush();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
69	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  currSize  -  1);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  currSize  -  1);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  currSize  -  1);	  buffer.write(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
70	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  -  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  0,  assemLen  -  1);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  assemLen  -  1);	  buffer.writeBlock(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
71	[BUG]  [BUGGY]  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
72	[BUG]  [BUGGY]  os.flush();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  os.flush();  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.flush();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
73	[BUG]  [BUGGY]  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  writeEOFRecord();  writeEOFRecord();  }  else  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  if(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(!finished)  {  buffer.close();  }  else  {  writeEOFRecord();  writeEOFRecord();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
75	[BUG]  [BUGGY]  os.close();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  os.close();  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	os.close();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
76	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream();  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	final  OutputStream  out  =  buffer.getOutputStream();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
77	[BUG]  [BUGGY]  buffer.append('n',  'n');  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.append('n',  'n');  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('n',  'n');	  buffer.append('n');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
78	[BUG]  [BUGGY]  buffer.append('N');  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.append('N');  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('N');	  buffer.append('n');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
79	[BUG]  [BUGGY]  buffer.append('n',  '/');  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.append('n',  '/');  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('n',  '/');	  buffer.append('n');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
80	[BUG]  [BUGGY]  buffer.append('n',  '-');  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.append('n',  '-');  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append('n',  '-');	  buffer.append('n');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
81	[BUG]  [BUGGY]  buffer.finish(assemBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.finish(assemBuf);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf);	  buffer.finish();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
82	[BUG]  [BUGGY]  buffer.finish(assemBuf,  0,  assemSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.finish(assemBuf,  0,  assemSize);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.finish(assemBuf,  0,  assemSize);	  buffer.finish();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
83	[BUG]  [BUGGY]  buffer.write(currName);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(currName);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(currName);	  buffer.finish();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
84	[BUG]  [BUGGY]  buffer.endArchive();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.endArchive();  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.endArchive();	  buffer.finish();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
85	[BUG]  [BUGGY]  buffer.endBlock(currName);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.endBlock(currName);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.endBlock(currName);	  buffer.endBlock();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
86	[BUG]  [BUGGY]  buffer.startBlock();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.startBlock();  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.startBlock();	  buffer.endBlock();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
87	[BUG]  [BUGGY]  buffer.append(',');  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.append(',');  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.append(',');	  buffer.append('n');    	non-compiled	[CE]  <identifier>  expected	12	None	replace
88	[BUG]  [BUGGY]  buffer.write(assemLen,  0,  assemSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemLen,  0,  assemSize);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemLen,  0,  assemSize);	  buffer.write(assemBuf,    0,    assemSize);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
89	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.charAt(i));  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
90	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  i++)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
91	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.charAt(i));  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
92	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName.substring(0,  currName.length()  -  currName.length()));  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
93	[BUG]  [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	if(currName!=  null)  {  for(int  i  =  0;  i  <  currName.length();  ++i)  {  buffer.append(currName[i]);  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
94	[BUG]  [BUGGY]  buffer.write(assemBuf,  0,  assemLen  +  3);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.write(assemBuf,  0,  assemLen  +  3);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.write(assemBuf,  0,  assemLen  +  3);	  buffer.write(assemBuf,    0,    assemLen);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
95	[BUG]  [BUGGY]  buffer.writeBlock(assemBuf,  0,  currBytes);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeBlock(assemBuf,  0,  currBytes);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeBlock(assemBuf,  0,  currBytes);	  buffer.writeBlock(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
96	[BUG]  [BUGGY]  buffer.writeString(currName);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();    [BUGGY]  buffer.writeString(currName);  [BUGGY]    finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	130	130	1	replace	buffer.writeString(currName);	  buffer.writeBlock(currName);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
