bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(hasUnclosedEntry)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(hasUnclosedEntry)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
2	[BUG]  [BUGGY]  if(!finished)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(!finished)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(!finished)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
3	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
5	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEORFecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEORFecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEORFecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
6	[BUG]  [BUGGY]  if(closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
7	[BUG]  [BUGGY]  if(!closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(!closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(!closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  readEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  readEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	readEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
9	[BUG]  [BUGGY]  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
10	[BUG]  [BUGGY]  readEOFRecord();  buffer.flushBlock();  finished  =  true;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  readEOFRecord();  buffer.flushBlock();  finished  =  true;  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	readEOFRecord();  buffer.flushBlock();  finished  =  true;	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
11	[BUG]  [BUGGY]  if(closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
12	[BUG]  [BUGGY]  if(closed)  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(closed)  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(closed)  {  writeEOFRecord();  }	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
13	[BUG]  [BUGGY]  readEOFRecord();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  readEOFRecord();  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	readEOFRecord();	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
14	[BUG]  [BUGGY]  if(finished)  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(finished)  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(finished)  {  writeEOFRecord();  }	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
15	[BUG]  [BUGGY]  final  haveUnclosedEntry  =  writeEOFRecord();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  final  haveUnclosedEntry  =  writeEOFRecord();  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	final  haveUnclosedEntry  =  writeEOFRecord();	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
16	[BUG]  [BUGGY]  final  hasUnclosedEntry  =  writeEOFRecord();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  final  hasUnclosedEntry  =  writeEOFRecord();  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	final  hasUnclosedEntry  =  writeEOFRecord();	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
17	[BUG]  [BUGGY]  final  haveUnclosedEntry  =  getEOFRecord();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  final  haveUnclosedEntry  =  getEOFRecord();  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	final  haveUnclosedEntry  =  getEOFRecord();	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
18	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(hasUnclosedEntry)  {  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(hasUnclosedEntry)  {  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  if(!finished)  {  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(!finished)  {  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(!finished)  {  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
20	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
21	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
22	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.AUTO_CLOSE_FAILURE))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.AUTO_CLOSE_FAILURE))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR)||  isEnabled(Feature.AUTO_CLOSE_FAILURE))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  finish();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  finish();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR))  {  finish();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
24	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  if(!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(haveUnclosedEntry)  {  if(!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(haveUnclosedEntry)  {  if(!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(!finished)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
25	[BUG]  [BUGGY]  if(closed)  {  if(!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(closed)  {  if(!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(closed)  {  if(!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(!finished)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
26	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(haveUnclosedEntry)  {!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(haveUnclosedEntry)  {!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(!finished)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
27	[BUG]  [BUGGY]  if(closed)  {  if(finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(closed)  {  if(finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(closed)  {  if(finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(!finished)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
28	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
29	[BUG]  [BUGGY]  if(!finished)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(!finished)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(!finished)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
30	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
31	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
32	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasUnclosedEntry))  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasUnclosedEntry))  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasUnclosedEntry))  {  writeEOFRecord();  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
33	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  if(closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(haveUnclosedEntry)  {  if(closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(haveUnclosedEntry)  {  if(closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(closed)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
34	[BUG]  [BUGGY]  if(!closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(!closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(!closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(closed)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
35	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  if(closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  completed  =  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(haveUnclosedEntry)  {  if(closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  completed  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(haveUnclosedEntry)  {  if(closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  completed  =  true;  }	  if(closed)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
36	[BUG]  [BUGGY]  while(!finished  &&  buffer.isEnabled())  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  while(!finished  &&  buffer.isEnabled())  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	while(!finished  &&  buffer.isEnabled())  {  writeEOFRecord();  }	  if(!finished)    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
37	[BUG]  [BUGGY]  while(!finished  &&  buffer.length  >  0)  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  while(!finished  &&  buffer.length  >  0)  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	while(!finished  &&  buffer.length  >  0)  {  writeEOFRecord();  }	  if(!finished)    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
38	[BUG]  [BUGGY]  while(!finished)  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  while(!finished)  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	while(!finished)  {  writeEOFRecord();  }	  if(!finished)    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
39	[BUG]  [BUGGY]  while(!finished  &&  buffer.isEnabled())  {  writeEOFRecord();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  while(!finished  &&  buffer.isEnabled())  {  writeEOFRecord();  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	while(!finished  &&  buffer.isEnabled())  {  writeEOFRecord();	  if(!finished)    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
40	[BUG]  [BUGGY]  if(!closed)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(!closed)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(!closed)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
41	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(hasUnclosedEntry)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(hasUnclosedEntry)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
42	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
43	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(hasUnclosedEntry)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(hasUnclosedEntry)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
44	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(assemBuf!=  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(assemBuf!=  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(recordBuf!=    null)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
45	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(recordBuf  ==  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(recordBuf  ==  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(recordBuf!=    null)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
46	[BUG]  [BUGGY]  if(closed)  {  if(recordBuf!=  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(closed)  {  if(recordBuf!=  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(closed)  {  if(recordBuf!=  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(recordBuf!=    null)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
47	[BUG]  [BUGGY]  if(closed)  {  if(recordBuf  ==  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(closed)  {  if(recordBuf  ==  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(closed)  {  if(recordBuf  ==  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(recordBuf!=    null)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
48	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(recordBuf!=  null)  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(recordBuf!=  null)  {  writeEOFRecord();  }	  if(recordBuf!=    null)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
49	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(recordBuf!=  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(recordBuf!=  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }	  if(recordBuf!=    null)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
50	[BUG]  [BUGGY]  writeEOFRecord();  buffer.flushBlock();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  writeEOFRecord();  buffer.flushBlock();  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	writeEOFRecord();  buffer.flushBlock();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
51	[BUG]  [BUGGY]  os.flush();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  os.flush();  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	os.flush();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
52	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  out.write(assemBuf,  0,  assemLen);  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	out.write(assemBuf,  0,  assemLen);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
53	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currName.length());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  out.write(assemBuf,  0,  currName.length());  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	out.write(assemBuf,  0,  currName.length());	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
54	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  out.write(assemBuf,  0,  currSize);  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	out.write(assemBuf,  0,  currSize);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
55	[BUG]  [BUGGY]  os.write(assemBuf,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  os.write(assemBuf,  0,  buffer.length);  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	os.write(assemBuf,  0,  buffer.length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
56	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(recordBuf  ==  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(recordBuf  ==  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  false;  }	  if(recordBuf!=    null)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
57	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  writeEOFRecord();  }  else  {  buffer.closeBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(recordBuf  ==  null)  {  writeEOFRecord();  }  else  {  buffer.closeBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(recordBuf  ==  null)  {  writeEOFRecord();  }  else  {  buffer.closeBlock();  finished  =  true;  }	  if(recordBuf!=    null)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
58	[BUG]  [BUGGY]  if(!finished)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(!finished)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(!finished)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
59	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
60	[BUG]  [BUGGY]  if(!finished)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(!finished)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(!finished)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
61	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
62	[BUG]  [BUGGY]  while(!closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  while(!closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	while(!closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
63	[BUG]  [BUGGY]  while(!closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  while(!closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	while(!closed)  {  if(haveUnclosedEntry)  {  writeEOFRecord();  }	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
64	[BUG]  [BUGGY]  out.write(currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  out.write(currName);  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	out.write(currName);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
65	[BUG]  [BUGGY]  os.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  os.close();  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	os.close();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
66	[BUG]  [BUGGY]  while(!finished)  {  writeEOFRecord();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  while(!finished)  {  writeEOFRecord();  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	while(!finished)  {  writeEOFRecord();	  if(haveUnclosedEntry)    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
67	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
68	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
69	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
70	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
71	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  writeEOFRecord();  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
72	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_FILE)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  writeEOFRecord();  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
73	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(closed)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
74	[BUG]  [BUGGY]  while(!closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  while(!closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	while(!closed)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(closed)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
75	[BUG]  [BUGGY]  while(!closed)  {  buffer.writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  while(!closed)  {  buffer.writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	while(!closed)  {  buffer.writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(closed)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
76	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)||  hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)||  hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR)||  hasUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
77	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR  ||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
78	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  haveUnclosedEntry)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
79	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
80	[BUG]  [BUGGY]  final  EOFRecord  <  K,  V>  buffer  =  getEOFRecord();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  final  EOFRecord  <  K,  V>  buffer  =  getEOFRecord();  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	final  EOFRecord  <  K,  V>  buffer  =  getEOFRecord();	  if(!finished)    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
81	[BUG]  [BUGGY]  if(finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(!finished)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
82	[BUG]  [BUGGY]  while(!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  while(!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	while(!finished)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(!finished)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
83	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(recordBuf  ==  null)  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(recordBuf  ==  null)  {  writeEOFRecord();  }	  if(recordBuf!=    null)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
84	[BUG]  [BUGGY]  while(recordBuf!=  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  while(recordBuf!=  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	while(recordBuf!=  null)  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(recordBuf!=    null)    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
85	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
86	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  writeEOFRecord();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  writeEOFRecord();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  writeEOFRecord();  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
87	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  out.write(assemBuf,  0,  assemSize);  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	out.write(assemBuf,  0,  assemSize);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
88	[BUG]  [BUGGY]  if(!finished)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(!finished)  {  buffer.close();  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(!finished)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
89	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
90	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR  ||  isEnabled(Feature.AUTO_CLOSE_FAILURE))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR  ||  isEnabled(Feature.AUTO_CLOSE_FAILURE))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR  ||  isEnabled(Feature.AUTO_CLOSE_FAILURE))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
91	[BUG]  [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  isEnabled(Feature.AUTO_CLOSE_NULL_VALUE))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  isEnabled(Feature.AUTO_CLOSE_NULL_VALUE))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.AUTO_CLOSE_ERROR)&&  isEnabled(Feature.AUTO_CLOSE_NULL_VALUE))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.AUTO_CLOSE_ERROR))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
92	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
93	[BUG]  [BUGGY]  if(!closed)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {  if  (finished)  {  throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }    [BUGGY]  if(!closed)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }  [BUGGY]    writeEOFRecord();  buffer.flushBlock();  finished  =  true;  }  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	128	128	1	replace	if(!closed)  {  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  writeEOFRecord();  }  else  {  buffer.flushBlock();  finished  =  true;  }	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    writeEOFRecord();    }    else    {    buffer.flushBlock();    finished    =    true;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
