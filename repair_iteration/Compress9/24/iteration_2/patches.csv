bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  out.write(assemBuf,  0,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	out.write(assemBuf,  0,  assemLen);	  out.close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
2	[BUG]  [BUGGY]  out.flush();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  out.flush();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	out.flush();	  out.close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
3	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  out.close();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
4	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
5	[BUG]  [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)!=  '/')  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)!=  '/')  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)!=  '/')  {  buffer.flush();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
6	[BUG]  [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)!=  'n')  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)!=  'n')  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)!=  'n')  {  buffer.flush();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
7	[BUG]  [BUGGY]  if(buffer.length()  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  >  0)  {  buffer.close();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
8	[BUG]  [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)!=  ':')  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)!=  ':')  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)!=  ':')  {  buffer.flush();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
9	[BUG]  [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)  ==  '/')  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)  ==  '/')  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)  ==  '/')  {  buffer.flush();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
10	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer  ==  null)  {  buffer.close();  }	  if(!closed)    {    if(buffer    ==    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
11	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  }	  if(!closed)    {    if(buffer    ==    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
12	[BUG]  [BUGGY]  if(out!=  null)  {  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(!closed)  {  buffer.close();  }	  if(!closed)    {    if(buffer    ==    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
13	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  if(buffer!=  null)  {  buffer.close();  }	  if(!closed)    {    if(buffer    ==    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
14	[BUG]  [BUGGY]  if(closed)  {  if(buffer  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  if(buffer  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  if(buffer  ==  null)  {  buffer.close();  }	  if(!closed)    {    if(buffer    ==    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
15	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  out.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  out.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  out.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
16	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
17	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
18	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
19	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
20	[BUG]  [BUGGY]  buffer.close(assemBuf,  assemLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  assemLen);	  buffer.close(assemBuf,    closed);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
21	[BUG]  [BUGGY]  buffer.close(assemBuf,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  null);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  null);	  buffer.close(assemBuf,    closed);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
22	[BUG]  [BUGGY]  buffer.close(assemBuf,  closed,  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  closed,  0);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  closed,  0);	  buffer.close(assemBuf,    closed);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
23	[BUG]  [BUGGY]  castExceptionHandler.throwAsIOException( " ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  castExceptionHandler.throwAsIOException( " ");  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	castExceptionHandler.throwAsIOException( " ");	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
24	[BUG]  [BUGGY]  castExceptionHandler.throwInternal();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  castExceptionHandler.throwInternal();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	castExceptionHandler.throwInternal();	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
25	[BUG]  [BUGGY]  cast(recordBuf);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  cast(recordBuf);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	cast(recordBuf);	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
26	[BUG]  [BUGGY]  castError( "TarArchiveOutputStream  closed: "  +  currName);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  castError( "TarArchiveOutputStream  closed: "  +  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	castError( "TarArchiveOutputStream  closed: "  +  currName);	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
27	[BUG]  [BUGGY]  castError( "TarArchiveOutputStream  closed: "+getMessage());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  castError( "TarArchiveOutputStream  closed: "+getMessage());  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	castError( "TarArchiveOutputStream  closed: "+getMessage());	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
28	[BUG]  [BUGGY]  castError( "TarArchiveOutputStream  not  closed. ");  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  castError( "TarArchiveOutputStream  not  closed. ");  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	castError( "TarArchiveOutputStream  not  closed. ");	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
29	[BUG]  [BUGGY]  castError( "Can  not  close  the  TarBuffer. ");  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  castError( "Can  not  close  the  TarBuffer. ");  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	castError( "Can  not  close  the  TarBuffer. ");	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
30	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
33	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  if(buffer!=  null)  {  buffer.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
34	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemBuf  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  if(assemBuf  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  if(assemBuf  ==  null)  {  buffer.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
35	[BUG]  [BUGGY]  if(assemLen  >=  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >=  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >=  0)  {  if(assemBuf!=  null)  {  buffer.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
36	[BUG]  [BUGGY]  if(assemLen!=  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen!=  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen!=  0)  {  if(assemBuf!=  null)  {  buffer.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
37	[BUG]  [BUGGY]  BufferUtil.close(buffer,  assemBuf,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  BufferUtil.close(buffer,  assemBuf,  false);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	BufferUtil.close(buffer,  assemBuf,  false);	  buffer.close(assemBuf,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
38	[BUG]  [BUGGY]  buffer.close(assemBuf,  false,  0);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  false,  0);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  false,  0);	  buffer.close(assemBuf,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
39	[BUG]  [BUGGY]  buffer.close(assemBuf,  false,  currName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  false,  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  false,  currName);	  buffer.close(assemBuf,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
40	[BUG]  [BUGGY]  buffer.close(assemBuf,  false,  true);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  false,  true);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  false,  true);	  buffer.close(assemBuf,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
41	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
42	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
43	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  ':')  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  ':')  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  ':')  {  buffer.flush();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
44	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >  0)  {  buffer.flush();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
45	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
46	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >=  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >=  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >=  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
47	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
48	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  2)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
49	[BUG]  [BUGGY]  if(out!=  null)buffer.flush();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)buffer.flush();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)buffer.flush();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.flush();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
50	[BUG]  [BUGGY]  buffer.flush();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.flush();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.flush();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.flush();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
51	[BUG]  [BUGGY]  if(buffer!=  null)buffer.flush();  if(closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.flush();  if(closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.flush();  if(closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.flush();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
52	[BUG]  [BUGGY]  if(buffer!=  null)buffer.finish();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.finish();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.finish();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.flush();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
53	[BUG]  [BUGGY]  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
54	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
55	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
56	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
57	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >=  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >=  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >=  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
58	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)    ==    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
59	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  >=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  >=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  >=  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)    ==    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
60	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  2)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  2)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  2)!=  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)    ==    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
61	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
62	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  >  0)  {  buffer.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
63	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
64	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length();  i++)  {  buffer.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
65	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  blockSize,  currBytes);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  blockSize,  currBytes);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  blockSize,  currBytes);	  buffer.close(assemBuf,    0,    assemSize,    currBytes);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
66	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currBytes);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currBytes);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen,  currBytes);	  buffer.close(assemBuf,    0,    assemSize,    currBytes);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
67	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currSize,  assemLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currSize,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currSize,  assemLen);	  buffer.close(assemBuf,    0,    assemSize,    currBytes);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
68	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currBytes,  assemSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currBytes,  assemSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currBytes,  assemSize);	  buffer.close(assemBuf,    0,    assemSize,    currBytes);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
69	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  currBytes,  blockSize);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  currBytes,  blockSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize,  currBytes,  blockSize);	  buffer.close(assemBuf,    0,    assemSize,    currBytes);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
70	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  currBytes,  hasUnclosedEntry);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  currBytes,  hasUnclosedEntry);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize,  currBytes,  hasUnclosedEntry);	  buffer.close(assemBuf,    0,    assemSize,    currBytes);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
71	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
72	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
73	[BUG]  [BUGGY]  OutputStream  out  =  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  buffer.close();  if(out!=  null)  {  out.close();  }	  if(out!=    null)buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
74	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  buffer.getOutputStream();  if(out!=  null)  {  out.close();  }	  if(out!=    null)buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
75	[BUG]  [BUGGY]  if(out!=  null)buffer.close();  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)buffer.close();  if(out  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)buffer.close();  if(out  ==  null)  {  out.close();  }	  if(out!=    null)buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	78	None	replace
76	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer.length  >  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
77	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
78	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
79	[BUG]  [BUGGY]  if(closed)  {  if(buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  if(buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  if(buffer.length  >  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
80	[BUG]  [BUGGY]  if(closed)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
81	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  this.currSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  this.currSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  this.currSize);	  buffer.close(assemBuf,    0,    blockSize);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
82	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  shortFileMode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  shortFileMode);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  shortFileMode);	  buffer.close(assemBuf,    0,    blockSize);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
83	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
84	[BUG]  [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
85	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
86	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
87	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
88	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
89	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  ':')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  ':')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  ':')  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
90	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  recordSize,  currBytes);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  recordSize,  currBytes);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  recordSize,  currBytes);	  buffer.close(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
91	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  this.blockSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  this.blockSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  this.blockSize);	  buffer.close(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
92	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)buffer.close();  else  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)buffer.close();  else  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >  0)buffer.close();  else  buffer.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    else    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
93	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)buffer.close();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)buffer.close();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >  0)buffer.close();  else  buffer.close();	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    else    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
94	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  else  buffer.close();	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    else    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	126	None	replace
95	[BUG]  [BUGGY]  buffer.release();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.release();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.release();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
96	[BUG]  [BUGGY]  if(out!=  null)buffer.release();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)buffer.release();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)buffer.release();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
97	[BUG]  [BUGGY]  if(buffer!=  null)buffer.close();  if(closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.close();  if(closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.close();  if(closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
98	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null)  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
99	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
100	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
101	[BUG]  [BUGGY]  if(!finished)  {  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!finished)  {  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!finished)  {  if(buffer!=  null)  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
102	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer  ==  null)  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
103	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  buffer.close();  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null)  {  buffer.close();  out.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
104	[BUG]  [BUGGY]  if(buffer  ==  null  &&  buffer.length  >  0)buffer.close();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  &&  buffer.length  >  0)buffer.close();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  &&  buffer.length  >  0)buffer.close();  else  buffer.close();	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
105	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)buffer.flush();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)buffer.flush();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)buffer.flush();  else  buffer.close();	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
106	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  buffer.getOutputStream();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
107	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.openStream();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.openStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.openStream();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
108	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.close();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.close();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
109	[BUG]  [BUGGY]  OutputStream  out  =  assemBuf.getOutputStream();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  assemBuf.getOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  assemBuf.getOutputStream();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
110	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.defaultOutputStream();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.defaultOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.defaultOutputStream();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
111	[BUG]  [BUGGY]  while(buffer.length  >  0)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer.length  >  0)  {  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer.length  >  0)  {  buffer.close();	  if(buffer.length    ==    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
112	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length()  ==  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length()  ==  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length()  ==  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer    ==    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
113	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  blockSize  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  blockSize  +  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  blockSize  +  1);	  buffer.close(assemBuf,    0,    assemSize    +    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
114	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize  +  2);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize  +  2);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize  +  2);	  buffer.close(assemBuf,    0,    assemSize    +    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
115	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize  *  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize  *  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize  *  1);	  buffer.close(assemBuf,    0,    assemSize    +    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
116	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize  -  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize  -  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize  -  1);	  buffer.close(assemBuf,    0,    assemSize    +    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
117	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currSize,  currBytes);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currSize,  currBytes);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currSize,  currBytes);	  buffer.close(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
118	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currSize  -  currBytes);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currSize  -  currBytes);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currSize  -  currBytes);	  buffer.close(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
119	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >=  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >=  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >=  0)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
120	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  <  0)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
121	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  out);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  out);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  out);	  buffer.close(assemBuf,    0,    close);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
122	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemBuf.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemBuf.length);	  buffer.close(assemBuf,    0,    close);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
123	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  close  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  close  +  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  close  +  1);	  buffer.close(assemBuf,    0,    close);    	non-compiled	[CE]  <identifier>  expected	112	None	replace
124	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  <  =  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.length  <  =  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.length  <  =  0)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    =    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
125	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  <  =  0)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.length  <  =  0)  {  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.length  <  =  0)  {  buffer.close();	  if(buffer!=    null    ||    buffer.length    <    =    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
126	[BUG]  [BUGGY]  if(!closed)  {  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(out!=  null)  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
127	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(out!=  null)  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
128	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf!=  null)  {  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf!=  null)  {  if(out!=  null)  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
129	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(out!=  null)  {  out.close();  }	  if(out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
130	[BUG]  [BUGGY]  if(!closed)  {  if(out!=  null)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(out!=  null)  {  buffer.close();  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(out!=  null)  {  buffer.close();  out.close();  }	  if(out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
131	[BUG]  [BUGGY]  if(!closed)  {  out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  out!=  null)  {  buffer.close();  }	  if(out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
132	[BUG]  [BUGGY]  if(buffer!=  null)buffer.close();  if(cloned)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.close();  if(cloned)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.close();  if(cloned)  {  buffer.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
133	[BUG]  [BUGGY]  because(buffer!=  null)buffer.close();  if(!cloned)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)buffer.close();  if(!cloned)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)buffer.close();  if(!cloned)  {  buffer.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
134	[BUG]  [BUGGY]  if(buffer  ==  null)buffer.close();  if(!cloned)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)buffer.close();  if(!cloned)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)buffer.close();  if(!cloned)  {  buffer.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
135	[BUG]  [BUGGY]  buffer.close();  if(cloned)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close();  if(cloned)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close();  if(cloned)  {  buffer.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
136	[BUG]  [BUGGY]  buffer.close();  if(!cloned)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close();  if(!cloned)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close();  if(!cloned)  {  buffer.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
137	[BUG]  [BUGGY]  if(buffer!=  null)stopBuffer();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)stopBuffer();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)stopBuffer();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)stop    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
138	[BUG]  [BUGGY]  if(!finished)  {  if(buffer!=  null)stop  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!finished)  {  if(buffer!=  null)stop  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!finished)  {  if(buffer!=  null)stop  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)stop    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
139	[BUG]  [BUGGY]  because(buffer!=  null)stop  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)stop  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)stop  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)stop    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
140	[BUG]  [BUGGY]  if(out!=  null)stopBuffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)stopBuffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)stopBuffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)stop    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
141	[BUG]  [BUGGY]  if(buffer!=  null)stop();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)stop();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)stop();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)stop    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
142	[BUG]  [BUGGY]  if(out!=  null)stopBuffer();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)stopBuffer();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)stopBuffer();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)stop    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
143	[BUG]  [BUGGY]  os.flush();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  os.flush();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	os.flush();	  os.close();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
144	[BUG]  [BUGGY]  os.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  os.write(assemBuf,  0,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	os.write(assemBuf,  0,  assemLen);	  os.close();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
145	[BUG]  [BUGGY]  Os.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Os.write(assemBuf,  0,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Os.write(assemBuf,  0,  assemLen);	  os.close();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
146	[BUG]  [BUGGY]  Os.write(buffer,  0,  os.length);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Os.write(buffer,  0,  os.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Os.write(buffer,  0,  os.length);	  os.close();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
147	[BUG]  [BUGGY]  os.write(assemBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  os.write(assemBuf,  0,  currSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	os.write(assemBuf,  0,  currSize);	  os.close();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
148	[BUG]  [BUGGY]  os.write(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  os.write(buffer,  0,  buffer.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	os.write(buffer,  0,  buffer.length);	  os.close();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
149	[BUG]  [BUGGY]  while(buffer!=  null  ||  buffer.size()  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  ||  buffer.size()  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  ||  buffer.size()  >  0)  {  buffer.close();  }	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
150	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.size()  <  =  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.size()  <  =  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.size()  <  =  0)  {  buffer.close();  }	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
151	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  }	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
152	[BUG]  [BUGGY]  while(buffer  ==  null  &&  buffer.size()  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer  ==  null  &&  buffer.size()  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer  ==  null  &&  buffer.size()  >  0)  {  buffer.close();  }	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
153	[BUG]  [BUGGY]  when(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  when(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	when(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  }	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
154	[BUG]  [BUGGY]  if(!closed)  {  if(buffer.length  <  =  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer.length  <  =  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer.length  <  =  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
155	[BUG]  [BUGGY]  if(!closed)  {  if(buffer.length!=  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer.length!=  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer.length!=  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
156	[BUG]  [BUGGY]  if(!closed)  {  if(buffer.length  >=  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer.length  >=  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer.length  >=  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
157	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.length  >  0)  {  out.close();	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
158	[BUG]  [BUGGY]  while(buffer!=  null  ||  buffer.length  >  0)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  ||  buffer.length  >  0)  {  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  ||  buffer.length  >  0)  {  buffer.close();	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
159	[BUG]  [BUGGY]  while(buffer  ==  null  &&  buffer.length  >  0)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer  ==  null  &&  buffer.length  >  0)  {  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer  ==  null  &&  buffer.length  >  0)  {  buffer.close();	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
160	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.flush();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.flush();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.flush();	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
161	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
162	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(!closed)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
163	[BUG]  [BUGGY]  if(closed)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(!closed)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
164	[BUG]  [BUGGY]  if(!closed)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  buffer.close();  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  buffer.close();  out.close();  }	  if(!closed)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
165	[BUG]  [BUGGY]  if(!closed)  {  buffer.close();  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  buffer.close();  if(out  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  buffer.close();  if(out  ==  null)  {  out.close();  }	  if(!closed)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
166	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
167	[BUG]  [BUGGY]  if(assemLen  >  0)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
168	[BUG]  [BUGGY]  if(assemLen  >  0)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  else  {  System.arraycopy(assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  else  {  System.arraycopy(assemBuf,  0,  assemLen);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  else  {  System.arraycopy(assemBuf,  0,  assemLen);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
169	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
170	[BUG]  [BUGGY]  System.err.println( "TarBuffer.closed  source: "  +  currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  System.err.println( "TarBuffer.closed  source: "  +  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	System.err.println( "TarBuffer.closed  source: "  +  currName);	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    source:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
171	[BUG]  [BUGGY]  if(currName!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(currName!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(currName!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    source:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
172	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(currName!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(currName!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    source:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
173	[BUG]  [BUGGY]  if(currName!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(currName!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(currName!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    source:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
174	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(currName  ==  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(currName  ==  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    source:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
175	[BUG]  [BUGGY]  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
176	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
177	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
178	[BUG]  [BUGGY]  assemBuf  =  null;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  assemBuf  =  null;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	assemBuf  =  null;	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
179	[BUG]  [BUGGY]  while(buffer!=  null  ||  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  ||  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  ||  buffer.length  >  0)  {  buffer.close();  }	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
180	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
181	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
182	[BUG]  [BUGGY]  while(buffer  ==  null  &&  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer  ==  null  &&  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer  ==  null  &&  buffer.length  >  0)  {  buffer.close();  }	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
183	[BUG]  [BUGGY]  while(buffer  >=  null  &&  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer  >=  null  &&  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer  >=  null  &&  buffer.length  >  0)  {  buffer.close();  }	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
184	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
185	[BUG]  [BUGGY]  if(buffer.length!=  0)  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0)  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0)  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
186	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.flush();  }	  if(buffer.length    ==    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
187	[BUG]  [BUGGY]  while(buffer.length  >  0)  {  buffer.flush();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer.length  >  0)  {  buffer.flush();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer.length  >  0)  {  buffer.flush();	  if(buffer.length    ==    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
188	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  ':')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  ':')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  ':')  {  buffer.close();  }	  if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
189	[BUG]  [BUGGY]  while(!closed)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(!closed)  {  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(!closed)  {  buffer.close();	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
190	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
191	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
192	[BUG]  [BUGGY]  safeTarBuffer.close();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  safeTarBuffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	safeTarBuffer.close();	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
193	[BUG]  [BUGGY]  while(!closed  &&  buffer.length  >  0)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(!closed  &&  buffer.length  >  0)  {  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(!closed  &&  buffer.length  >  0)  {  buffer.close();	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
194	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  if(buffer.close()  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  if(buffer.close()  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >  0)  {  if(buffer.close()  >  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    if(buffer.close()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
195	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  if(buffer.close()  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  if(buffer.close()  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  if(buffer.close()  >  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    if(buffer.close()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
196	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    if(buffer.close()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
197	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  if(buffer.close()  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  if(buffer.close()  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  if(buffer.close()  >  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    if(buffer.close()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
198	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.close()  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.close()  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.close()  >  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    if(buffer.close()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
199	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    if(buffer.close()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
200	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  'n')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  'n')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  'n')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
201	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
202	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
203	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  2)!=  'n')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  2)!=  'n')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  2)!=  'n')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
204	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
205	[BUG]  [BUGGY]  because(buffer  ==  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer  ==  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer  ==  null)  {  buffer.close();  }  else  {  out.close();  }	  because(buffer!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
206	[BUG]  [BUGGY]  because(buffer  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer  ==  null)  {  buffer.close();  }	  because(buffer!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
207	[BUG]  [BUGGY]  Because(buffer!=  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Because(buffer!=  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Because(buffer!=  null)  {  buffer.close();  }  else  {  out.close();  }	  because(buffer!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
208	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.flush();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
209	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >  0)  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
210	[BUG]  [BUGGY]  if(!closed)  {  if(buffer.length  >  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer.length  >  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer.length  >  0)  {  buffer.flush();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
211	[BUG]  [BUGGY]  if(!closed)  {  if(buffer.length  >  0)  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer.length  >  0)  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer.length  >  0)  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
212	[BUG]  [BUGGY]  buffer.close();  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close();  if(out  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close();  if(out  ==  null)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(out    ==    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
213	[BUG]  [BUGGY]  if(buffer  ==  null)buffer.close();  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)buffer.close();  if(out  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)buffer.close();  if(out  ==  null)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(out    ==    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
214	[BUG]  [BUGGY]  because(buffer!=  null)buffer.close();  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)buffer.close();  if(out  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)buffer.close();  if(out  ==  null)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(out    ==    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
215	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length!=  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length!=  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length!=  0)  {  buffer.close();  }	  if(buffer.length!=    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
216	[BUG]  [BUGGY]  OutputStream  out  =  assemBuf.toByteArray();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  assemBuf.toByteArray();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  assemBuf.toByteArray();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.toByteArray();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
217	[BUG]  [BUGGY]  OutputStream  out  =  buffer.toByteArray();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  buffer.toByteArray();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  buffer.toByteArray();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.toByteArray();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
218	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.toByteArray();  if(out  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.toByteArray();  if(out  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.toByteArray();  if(out  ==  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.toByteArray();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
219	[BUG]  [BUGGY]  out  =  this.recordBuf.toByteArray();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  out  =  this.recordBuf.toByteArray();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	out  =  this.recordBuf.toByteArray();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.toByteArray();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
220	[BUG]  [BUGGY]  byte[]  out  =  this.recordBuf.toByteArray();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  byte[]  out  =  this.recordBuf.toByteArray();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	byte[]  out  =  this.recordBuf.toByteArray();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.toByteArray();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
221	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  out.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  out.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  ==  0)  {  out.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
222	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
223	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length()  ==  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length()  ==  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length()  ==  0)  {  buffer.flush();  }	  if(buffer!=    null)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
224	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.flush();  }	  if(buffer!=    null)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
225	[BUG]  [BUGGY]  if(buffer  ==  null)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)  {  buffer.flush();  }	  if(buffer!=    null)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
226	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length  ==  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length  ==  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer.length  ==  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    ==    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
227	[BUG]  [BUGGY]  if(closed)  {  if(buffer.length  ==  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  if(buffer.length  ==  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  if(buffer.length  ==  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    ==    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
228	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length!=  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length!=  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer.length!=  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    ==    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
229	[BUG]  [BUGGY]  if(closed)  {  if(buffer.length!=  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  if(buffer.length!=  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  if(buffer.length!=  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    ==    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
230	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  out.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  out.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  out.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
231	[BUG]  [BUGGY]  because(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
232	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer!=  null)  {  buffer.flush();  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
233	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
234	[BUG]  [BUGGY]  if(buffer  ==  null)  {  buffer.flush();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)  {  buffer.flush();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)  {  buffer.flush();  }  else  {  out.close();  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
235	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  buffer.flush();  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
236	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(recordBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(recordBuf!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(recordBuf!=  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
237	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
238	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf!=  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
239	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(recordBuf  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(recordBuf  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(recordBuf  ==  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
240	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(recordBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
241	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
242	[BUG]  [BUGGY]  OutputStream  out  =  buffer.toByteArray();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  buffer.toByteArray();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  buffer.toByteArray();	  OutputStream    out    =    this.recordBuf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
243	[BUG]  [BUGGY]  OutputStream  out  =  assemBuf.toByteArray();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  assemBuf.toByteArray();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  assemBuf.toByteArray();	  OutputStream    out    =    this.recordBuf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
244	[BUG]  [BUGGY]  OutputStream  out  =  new  byte[this.recordBuf.toByteArray()  ];  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  new  byte[this.recordBuf.toByteArray()  ];  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  new  byte[this.recordBuf.toByteArray()  ];	  OutputStream    out    =    this.recordBuf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
245	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.toByteArray()  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.toByteArray()  +  1;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.toByteArray()  +  1;	  OutputStream    out    =    this.recordBuf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
246	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuffer.toByteArray();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuffer.toByteArray();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuffer.toByteArray();	  OutputStream    out    =    this.recordBuf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
247	[BUG]  [BUGGY]  out  =  this.recordBuf.toByteArray();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  out  =  this.recordBuf.toByteArray();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	out  =  this.recordBuf.toByteArray();	  OutputStream    out    =    this.recordBuf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
248	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  out.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  out.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >  0)  {  out.close();  }  else  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    >    0)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
249	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >  0)  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    >    0)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
250	[BUG]  [BUGGY]  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
251	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
252	[BUG]  [BUGGY]  if(!closed)  {  if(buffer  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer    ==    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
253	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2  ||  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2  ||  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  2  ||  buffer.length  >  0)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    2)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	140	None	replace
254	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  <  2)  {  buffer.close();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.length  <  2)  {  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.length  <  2)  {  buffer.close();	  if(buffer!=    null    ||    buffer.length    <    2)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	140	None	replace
255	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  <  2)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  <  2)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  <  2)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    2)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	140	None	replace
256	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  <  2)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.length  <  2)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.length  <  2)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    2)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	140	None	replace
257	[BUG]  [BUGGY]  this.recordBuf.flush();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  this.recordBuf.flush();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	this.recordBuf.flush();	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
258	[BUG]  [BUGGY]  this.recordBuf  =  buffer.close();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  this.recordBuf  =  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	this.recordBuf  =  buffer.close();	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
259	[BUG]  [BUGGY]  this.recordBuf.close(buffer);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  this.recordBuf.close(buffer);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	this.recordBuf.close(buffer);	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
260	[BUG]  [BUGGY]  this.recordBuf.release();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  this.recordBuf.release();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	this.recordBuf.release();	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
261	[BUG]  [BUGGY]  this.recordBuf.closeAll();  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  this.recordBuf.closeAll();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	this.recordBuf.closeAll();	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
262	[BUG]  [BUGGY]  because(buffer  ==  null)buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer  ==  null)buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer  ==  null)buffer.close();  if(out!=  null)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
263	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  if(out!=  null)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
264	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.isOpen())buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.isOpen())buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.isOpen())buffer.close();  if(out!=  null)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
265	[BUG]  [BUGGY]  Because(buffer!=  null)buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Because(buffer!=  null)buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Because(buffer!=  null)buffer.close();  if(out!=  null)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
266	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  closed  =  true;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  closed  =  true;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(!closed)  {  out.close();  closed  =  true;  }	  if(!closed)    {    out.close();    closed    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
267	[BUG]  [BUGGY]  out.close();  closed  =  true;  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  out.close();  closed  =  true;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	out.close();  closed  =  true;	  if(!closed)    {    out.close();    closed    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
268	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  closed  =  true;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  closed  =  true;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  out.close();  closed  =  true;  }	  if(!closed)    {    out.close();    closed    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
269	[BUG]  [BUGGY]  if(!hasUnclosed)  {  out.close();  closed  =  true;  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosed)  {  out.close();  closed  =  true;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosed)  {  out.close();  closed  =  true;  }	  if(!closed)    {    out.close();    closed    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
270	[BUG]  [BUGGY]  while(!hasUnclosedEntry)  {  out.close();  closed  =  true;  }  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(!hasUnclosedEntry)  {  out.close();  closed  =  true;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(!hasUnclosedEntry)  {  out.close();  closed  =  true;  }	  if(!closed)    {    out.close();    closed    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
271	[BUG]  [BUGGY]  while(!hasUnclosed)  {  out.close();  closed  =  true;  }  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(!hasUnclosed)  {  out.close();  closed  =  true;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(!hasUnclosed)  {  out.close();  closed  =  true;  }	  if(!closed)    {    out.close();    closed    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
272	[BUG]  [BUGGY]  OutputStream  out  =  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  buffer.close();  if(!closed)  {  out.close();  }	  if(out!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
273	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  buffer.getOutputStream();  if(!closed)  {  out.close();  }	  if(out!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
274	[BUG]  [BUGGY]  if(out!=  null)buffer.flush();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)buffer.flush();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)buffer.flush();  if(!closed)  {  out.close();  }	  if(out!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
275	[BUG]  [BUGGY]  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    buf.length);    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
276	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(assemBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(assemBuf!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(assemBuf!=  null)  {  buffer.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    buf.length);    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
277	[BUG]  [BUGGY]  if(assemLen  >=  0)  {  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >=  0)  {  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >=  0)  {  if(buffer!=  null)  {  buffer.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    buf.length);    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
278	[BUG]  [BUGGY]  if(assemLen  >  0)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    buf.length);    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
279	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(buffer  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  if(buffer  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  if(buffer  ==  null)  {  buffer.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    buf.length);    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
280	[BUG]  [BUGGY]  cast(assemBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  cast(assemBuf,  0,  currSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	cast(assemBuf,  0,  currSize);	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
281	[BUG]  [BUGGY]  while(!hasUnclosedEntry)  {  out.close();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(!hasUnclosedEntry)  {  out.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(!hasUnclosedEntry)  {  out.close();	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
282	[BUG]  [BUGGY]  while(!hasUnclosed)  {  out.close();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(!hasUnclosed)  {  out.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(!hasUnclosed)  {  out.close();	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
283	[BUG]  [BUGGY]  while(!closed)  {  out.close();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(!closed)  {  out.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(!closed)  {  out.close();	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
284	[BUG]  [BUGGY]  while(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(!closed)  {  out.close();  }	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
285	[BUG]  [BUGGY]  cast(buffer,  0,  currSize);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  cast(buffer,  0,  currSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	cast(buffer,  0,  currSize);	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
286	[BUG]  [BUGGY]  OutputStream  os  =  this.getOutputStream();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  os  =  this.getOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  os  =  this.getOutputStream();	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
287	[BUG]  [BUGGY]  OutputStream  os  =  this.recordBuf.getOutputStream();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  os  =  this.recordBuf.getOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  os  =  this.recordBuf.getOutputStream();	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
288	[BUG]  [BUGGY]  OutputStream  os  =  getOutputStream(true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  os  =  getOutputStream(true);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  os  =  getOutputStream(true);	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
289	[BUG]  [BUGGY]  OutputStream  os  =  getInputStream();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  os  =  getInputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  os  =  getInputStream();	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
290	[BUG]  [BUGGY]  OutputStream  os  =  getErrorStream();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  os  =  getErrorStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  os  =  getErrorStream();	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
291	[BUG]  [BUGGY]  assemBuf.close();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  assemBuf.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	assemBuf.close();	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
292	[BUG]  [BUGGY]  ((  TarBuffer)assemBuf).close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  ((  TarBuffer)assemBuf).close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	((  TarBuffer)assemBuf).close();	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
293	[BUG]  [BUGGY]  assemBuf  =  new  byte[assemLen];  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  assemBuf  =  new  byte[assemLen];  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	assemBuf  =  new  byte[assemLen];	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
294	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf!=  null)  {  out.close();  }	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
295	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  out.close();  }	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
296	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  out.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
297	[BUG]  [BUGGY]  OutputStream  out  =  this.assemBuf.getOutputStream();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.assemBuf.getOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.assemBuf.getOutputStream();	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
298	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  blockSize,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  blockSize,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  blockSize,  assemLen);	  buffer.close(assemBuf,    0,    assemLen,    assemSize);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
299	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize,  assemLen);	  buffer.close(assemBuf,    0,    assemLen,    assemSize);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
300	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  blockSize,  assemSize);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  blockSize,  assemSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  blockSize,  assemSize);	  buffer.close(assemBuf,    0,    assemLen,    assemSize);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
301	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currSize);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen,  currSize);	  buffer.close(assemBuf,    0,    assemLen,    assemSize);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
302	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  blockSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  blockSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen,  blockSize);	  buffer.close(assemBuf,    0,    assemLen,    assemSize);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
303	[BUG]  [BUGGY]  if(out!=  null)  {  if(closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(closed)  {  buffer.close();  }	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
304	[BUG]  [BUGGY]  because(buffer  ==  null)buffer.close();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer  ==  null)buffer.close();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer  ==  null)buffer.close();  else  buffer.close();	  because(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
305	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.isOpen())buffer.close();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.isOpen())buffer.close();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.isOpen())buffer.close();  else  buffer.close();	  because(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
306	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.close()  >  0)buffer.close();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.close()  >  0)buffer.close();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.close()  >  0)buffer.close();  else  buffer.close();	  because(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
307	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.close()  >  0)buffer.close();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.close()  >  0)buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.close()  >  0)buffer.close();	  because(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
308	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.close());  else  buffer.close();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.close());  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.close());  else  buffer.close();	  because(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
309	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.close()  >  0)buffer.close();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.close()  >  0)buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.close()  >  0)buffer.close();	  if(buffer    ==    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	102	None	replace
310	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.close()  >  0)buffer.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.close()  >  0)buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.close()  >  0)buffer.close();	  if(buffer    ==    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	102	None	replace
311	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.close())buffer.close();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.close())buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.close())buffer.close();	  if(buffer    ==    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	102	None	replace
312	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
313	[BUG]  [BUGGY]  if(buffer  ==  null)  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
314	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
315	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
316	[BUG]  [BUGGY]  if(buffer.length()  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
317	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
318	[BUG]  [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
319	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
320	[BUG]  [BUGGY]  if(buffer.length  >=  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >=  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >=  0)  {  buffer.close();  }	  if(buffer.length!=    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
321	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  0L  +  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  0L  +  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  0L  +  1);	  buffer.close(assemBuf,    0,    0L);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
322	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  out.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
323	[BUG]  [BUGGY]  if(!finished)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!finished)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!finished)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
324	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currName.length  -  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currName.length  -  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currName.length  -  1);	  buffer.close(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
325	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currName.length  +  1);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currName.length  +  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currName.length  +  1);	  buffer.close(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
326	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currName.length,  assemLen);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currName.length,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currName.length,  assemLen);	  buffer.close(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
327	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currName.length  -  2);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currName.length  -  2);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currName.length  -  2);	  buffer.close(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
328	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currName.length,  0);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currName.length,  0);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currName.length,  0);	  buffer.close(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
329	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
330	[BUG]  [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
331	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)  ==  'n')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)  ==  'n')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)  ==  'n')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
332	[BUG]  [BUGGY]  if(buffer.length()  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
333	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
334	[BUG]  [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
335	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
336	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
337	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length  +  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(buffer.length  +  1);	  Buffer    buffer    =    new    Buffer(buffer.length);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
338	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(out.length);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(out.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(out.length);	  Buffer    buffer    =    new    Buffer(buffer.length);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
339	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length  -  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(buffer.length  -  1);	  Buffer    buffer    =    new    Buffer(buffer.length);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
340	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(recordBuf.length);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(recordBuf.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(recordBuf.length);	  Buffer    buffer    =    new    Buffer(buffer.length);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
341	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(buffer,  0,  buffer.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(buffer,  0,  buffer.length);	  Buffer    buffer    =    new    Buffer(buffer.length);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
342	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length  +  2);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length  +  2);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(buffer.length  +  2);	  Buffer    buffer    =    new    Buffer(buffer.length);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
343	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer.length  ==  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer.length  ==  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer.length  ==  0)  {  buffer.close();  }	  if(buffer.length    ==    0)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
344	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    ==    0)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
345	[BUG]  [BUGGY]  if(buffer.length!=  0)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0)  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    ==    0)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	65	None	replace
346	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.isClosed())buffer.close();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.isClosed())buffer.close();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.isClosed())buffer.close();  else  buffer.close();	  if(buffer!=    null    &&    buffer.isClosed())buffer.close();    else    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
347	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isClosed())buffer.close();  else  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.isClosed())buffer.close();  else  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.isClosed())buffer.close();  else  buffer.close();  }	  if(buffer!=    null    &&    buffer.isClosed())buffer.close();    else    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
348	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.isClosed())buffer.close();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.isClosed())buffer.close();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.isClosed())buffer.close();  else  buffer.close();	  if(buffer!=    null    &&    buffer.isClosed())buffer.close();    else    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
349	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.isClosed())buffer.close();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.isClosed())buffer.close();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.isClosed())buffer.close();  else  buffer.close();	  if(buffer!=    null    &&    buffer.isClosed())buffer.close();    else    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
350	[BUG]  [BUGGY]  OutputStream  os  =  this.recordBuf.toByteArray();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  os  =  this.recordBuf.toByteArray();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  os  =  this.recordBuf.toByteArray();	  if(!closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
351	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  buffer.flush();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  buffer.flush();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >  0)  {  buffer.flush();  }  else  {  out.close();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
352	[BUG]  [BUGGY]  while(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
353	[BUG]  [BUGGY]  while(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
354	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)  ==  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)  ==  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)  ==  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
355	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferSize  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferSize  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(bufferSize  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
356	[BUG]  [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
357	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  2)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  2)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  2)!=  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
358	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize.length);	  buffer.close(assemSize,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
359	[BUG]  [BUGGY]  buffer.close(assemLen,  0,  assemBuf.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemLen,  0,  assemBuf.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemLen,  0,  assemBuf.length);	  buffer.close(assemSize,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
360	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  buffer.getOutputStream();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
361	[BUG]  [BUGGY]  OutputStream  out  =  assemBuf.getOutputStream();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  assemBuf.getOutputStream();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  assemBuf.getOutputStream();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
362	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.getOutputStream();  if(out  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.getOutputStream();  if(out  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.getOutputStream();  if(out  ==  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
363	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.openStream();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.openStream();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.openStream();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
364	[BUG]  [BUGGY]  byte[]  out  =  this.recordBuf.getOutputStream();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  byte[]  out  =  this.recordBuf.getOutputStream();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	byte[]  out  =  this.recordBuf.getOutputStream();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
365	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.toOutputStream();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.toOutputStream();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.toOutputStream();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
366	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName,  buffer.getName());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName,  buffer.getName());  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName,  buffer.getName());	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    buffer.getName());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
367	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  buffer.toString());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  buffer.toString());  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  buffer.toString());	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    buffer.getName());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
368	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  assemBuf.getName());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  assemBuf.getName());  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  assemBuf.getName());	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    buffer.getName());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
369	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName  + ".getName());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName  + ".getName());  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName  + ".getName());	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    buffer.getName());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
370	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  buffer.getName(),  currName);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  buffer.getName(),  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  buffer.getName(),  currName);	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    buffer.getName());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
371	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  if(!closed)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
372	[BUG]  [BUGGY]  because(buffer  ==  null)buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer  ==  null)buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer  ==  null)buffer.close();  if(!closed)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
373	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.isOpen())buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.isOpen())buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.isOpen())buffer.close();  if(!closed)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
374	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
375	[BUG]  [BUGGY]  because(buffer!=  null)buffer.release();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)buffer.release();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)buffer.release();  if(!closed)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
376	[BUG]  [BUGGY]  because(buffer!=  null)stop  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)stop  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)stop  buffer.close();  if(!closed)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
377	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
378	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
379	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  out.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)  {  out.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >  0)  {  out.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
380	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
381	[BUG]  [BUGGY]  if(buffer!=  null)buffer.close();  if(cloned)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.close();  if(cloned)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.close();  if(cloned)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
382	[BUG]  [BUGGY]  if(buffer  ==  null)buffer.close();  if(!cloned)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)buffer.close();  if(!cloned)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)buffer.close();  if(!cloned)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
383	[BUG]  [BUGGY]  because(buffer!=  null)buffer.close();  if(!cloned)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)buffer.close();  if(!cloned)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)buffer.close();  if(!cloned)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
384	[BUG]  [BUGGY]  buffer.close();  if(!cloned)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close();  if(!cloned)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close();  if(!cloned)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
385	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  if(!cloned)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  if(!cloned)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  if(!cloned)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
386	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  out.close();  }	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
387	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  out.close();  }	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
388	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >=  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >=  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >=  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
389	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
390	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  ==  0)  {  out.close();  }  else  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
391	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
392	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
393	[BUG]  [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
394	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
395	[BUG]  [BUGGY]  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
396	[BUG]  [BUGGY]  while(buffer.length()  >  0)  {  buffer.flush();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer.length()  >  0)  {  buffer.flush();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer.length()  >  0)  {  buffer.flush();	  if(buffer.length()    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
397	[BUG]  [BUGGY]  if(buffer.length()  ==  0)  {  buffer.flush();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  ==  0)  {  buffer.flush();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  ==  0)  {  buffer.flush();  }  else  {  out.close();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
398	[BUG]  [BUGGY]  if(buffer.length()  ==  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  ==  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  ==  0)  {  buffer.flush();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
399	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length()  ==  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length()  ==  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length()  ==  0)  {  buffer.close();  }	  if(buffer    ==    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
400	[BUG]  [BUGGY]  buffer.close(assemBuf,  out,  currName);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  out,  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  out,  currName);	  buffer.close(assemBuf,    out);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
401	[BUG]  [BUGGY]  buffer.close(assemBuf,  out,  0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  out,  0);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  out,  0);	  buffer.close(assemBuf,    out);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
402	[BUG]  [BUGGY]  buffer.close(assemBuf,  out,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  out,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  out,  assemLen);	  buffer.close(assemBuf,    out);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
403	[BUG]  [BUGGY]  buffer.close(assemBuf,  out,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  out,  false);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  out,  false);	  buffer.close(assemBuf,    out);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
404	[BUG]  [BUGGY]  buffer.close(assemBuf,  out,  null);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  out,  null);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  out,  null);	  buffer.close(assemBuf,    out);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
405	[BUG]  [BUGGY]  buffer.close(assemBuf,  out,  closed);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  out,  closed);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  out,  closed);	  buffer.close(assemBuf,    out);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
406	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currBytes,  currSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currBytes,  currSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currBytes,  currSize);	  buffer.close(assemBuf,    0,    currBytes);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
407	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currBytes  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currBytes  +  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currBytes  +  1);	  buffer.close(assemBuf,    0,    currBytes);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
408	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currBytes  -  currSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currBytes  -  currSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currBytes  -  currSize);	  buffer.close(assemBuf,    0,    currBytes);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
409	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currBytes,  assemLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currBytes,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currBytes,  assemLen);	  buffer.close(assemBuf,    0,    currBytes);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
410	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  true);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  true);	  buffer.close(assemBuf,    true);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
411	[BUG]  [BUGGY]  Buffer.close(assemBuf,  false);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer.close(assemBuf,  false);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer.close(assemBuf,  false);	  buffer.close(assemBuf,    true);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
412	[BUG]  [BUGGY]  buffer.close(assemBuf,  true,  0);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  true,  0);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  true,  0);	  buffer.close(assemBuf,    true);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
413	[BUG]  [BUGGY]  while(buffer!=  null  ||  buffer.size()  >  0)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  ||  buffer.size()  >  0)  {  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  ||  buffer.size()  >  0)  {  buffer.close();	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
414	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.size()  >  0)  {  out.close();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.size()  >  0)  {  out.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.size()  >  0)  {  out.close();	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
415	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.size()  <  =  0)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.size()  <  =  0)  {  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.size()  <  =  0)  {  buffer.close();	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
416	[BUG]  [BUGGY]  while(buffer  ==  null  &&  buffer.size()  >  0)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer  ==  null  &&  buffer.size()  >  0)  {  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer  ==  null  &&  buffer.size()  >  0)  {  buffer.close();	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
417	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
418	[BUG]  [BUGGY]  System.err.println( "TarBuffer.closed  entry: "  +  currName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  System.err.println( "TarBuffer.closed  entry: "  +  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	System.err.println( "TarBuffer.closed  entry: "  +  currName);	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    entry:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
419	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(currName!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(currName!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    entry:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
420	[BUG]  [BUGGY]  if(currName!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(currName!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(currName!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    entry:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
421	[BUG]  [BUGGY]  if(currName  ==  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(currName  ==  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(currName  ==  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    entry:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
422	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen  +  2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen  +  2);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen  +  2);	  buffer.close(assemBuf,    0,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
423	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen  +  3);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen  +  3);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen  +  3);	  buffer.close(assemBuf,    0,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
424	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen  *  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen  *  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen  *  1);	  buffer.close(assemBuf,    0,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
425	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  recordBuf.length  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  recordBuf.length  -  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  recordBuf.length  -  1);	  buffer.close(assemBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
426	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  recordBuf.length  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  recordBuf.length  +  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  recordBuf.length  +  1);	  buffer.close(assemBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
427	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  recordBuf.length  -  2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  recordBuf.length  -  2);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  recordBuf.length  -  2);	  buffer.close(assemBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
428	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  recordBuf.length  -  4);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  recordBuf.length  -  4);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  recordBuf.length  -  4);	  buffer.close(assemBuf,    0,    recordBuf.length);    	non-compiled	[CE]  <identifier>  expected	103	None	replace
429	[BUG]  [BUGGY]  because(buffer  ==  null)buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer  ==  null)buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer  ==  null)buffer.close();  if(!closed)  {  buffer.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
430	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
431	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
432	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  if(!closed)  {  buffer.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
433	[BUG]  [BUGGY]  because(buffer!=  null)buffer.close();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)buffer.close();	  because(buffer!=    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
434	[BUG]  [BUGGY]  because(buffer!=  null)buffer.release();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)buffer.release();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)buffer.release();  if(!closed)  {  buffer.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
435	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  blockSize  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  blockSize  -  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  blockSize  -  1);	  buffer.close(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
436	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen  /  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen  /  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen  /  1);	  buffer.close(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
437	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen  *  2  -  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen  *  2  -  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen  *  2  -  1);	  buffer.close(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
438	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.isEnabled())  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.isEnabled())  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.isEnabled())  {  buffer.close();  }	  because(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
439	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.getType()  ==  Token.BLOCK)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.getType()  ==  Token.BLOCK)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.getType()  ==  Token.BLOCK)  {  buffer.close();  }	  because(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
440	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.getType()  ==  Token.EXPR_RESULT)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.getType()  ==  Token.EXPR_RESULT)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.getType()  ==  Token.EXPR_RESULT)  {  buffer.close();  }	  because(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
441	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.getType()  ==  Token.NAME)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.getType()  ==  Token.NAME)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.getType()  ==  Token.NAME)  {  buffer.close();  }	  because(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
442	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
443	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  ==  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.length  ==  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.length  ==  0)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
444	[BUG]  [BUGGY]  OutputStream  out  =  os.getOutputStream();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  os.getOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  os.getOutputStream();	  if(buffer!=    null    &&    buffer.length    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
445	[BUG]  [BUGGY]  OutputStream  out  =  System.getProperty( "line.separator ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.getProperty( "line.separator ");  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.getProperty( "line.separator ");	  if(buffer!=    null    &&    buffer.length    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
446	[BUG]  [BUGGY]  this.buffer.close();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  this.buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	this.buffer.close();	  this.buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
447	[BUG]  [BUGGY]  if(this.buffer!=  null)  {  this.buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(this.buffer!=  null)  {  this.buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(this.buffer!=  null)  {  this.buffer.close();  if(out!=  null)  {  out.close();  }	  this.buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
448	[BUG]  [BUGGY]  if(!closed)  {  this.buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  this.buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  this.buffer.close();  if(out!=  null)  {  out.close();  }	  this.buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
449	[BUG]  [BUGGY]  this.buffer.close();  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  this.buffer.close();  if(out  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	this.buffer.close();  if(out  ==  null)  {  out.close();  }	  this.buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
450	[BUG]  [BUGGY]  if(this.buffer!=  null)  {  this.buffer.close();  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(this.buffer!=  null)  {  this.buffer.close();  if(out  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(this.buffer!=  null)  {  this.buffer.close();  if(out  ==  null)  {  out.close();  }	  this.buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
451	[BUG]  [BUGGY]  this.buffer.flush();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  this.buffer.flush();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	this.buffer.flush();  if(out!=  null)  {  out.close();  }	  this.buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
452	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
453	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
454	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
455	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
456	[BUG]  [BUGGY]  out.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  out.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	out.close();  if(!closed)  {  buffer.close();  }	  if(out!=    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
457	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream();  if(out!=  null)buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  getOutputStream();  if(out!=  null)buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  getOutputStream();  if(out!=  null)buffer.close();  if(!closed)  {  buffer.close();  }	  if(out!=    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
458	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  if(out!=  null)buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  if(out!=  null)buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  buffer.getOutputStream();  if(out!=  null)buffer.close();  if(!closed)  {  buffer.close();  }	  if(out!=    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
459	[BUG]  [BUGGY]  buffer.release();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.release();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.release();  if(!closed)  {  out.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
460	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length()  ==  0)  {  buffer.release();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length()  ==  0)  {  buffer.release();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length()  ==  0)  {  buffer.release();  if(!closed)  {  out.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
461	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  out.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  out.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  out.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
462	[BUG]  [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
463	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
464	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)  ==  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)  ==  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)  ==  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
465	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferSize  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferSize  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(bufferSize  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
466	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currName,  closed);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currName,  closed);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen,  currName,  closed);	  buffer.close(assemBuf,    0,    assemLen,    currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
467	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currName,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currName,  null);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen,  currName,  null);	  buffer.close(assemBuf,    0,    assemLen,    currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
468	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currName,  hasUnclosedEntry);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currName,  hasUnclosedEntry);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen,  currName,  hasUnclosedEntry);	  buffer.close(assemBuf,    0,    assemLen,    currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
469	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize,  currName);	  buffer.close(assemBuf,    0,    assemLen,    currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
470	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)buffer.close();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  >  0)buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  >  0)buffer.close();	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    	non-compiled	[CE]  <identifier>  expected	128	None	replace
471	[BUG]  [BUGGY]  if(buffer  ==  null  &&  buffer.length  >  0)buffer.close();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  &&  buffer.length  >  0)buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  &&  buffer.length  >  0)buffer.close();	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    	non-compiled	[CE]  <identifier>  expected	128	None	replace
472	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)buffer.flush();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)buffer.flush();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)buffer.flush();	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    	non-compiled	[CE]  <identifier>  expected	128	None	replace
473	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)buffer.close();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  >  0)buffer.close();	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    	non-compiled	[CE]  <identifier>  expected	128	None	replace
474	[BUG]  [BUGGY]  if(buffer  >=  null  &&  buffer.length  >  0)buffer.close();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  >=  null  &&  buffer.length  >  0)buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  >=  null  &&  buffer.length  >  0)buffer.close();	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    	non-compiled	[CE]  <identifier>  expected	128	None	replace
475	[BUG]  [BUGGY]  System.err.println( "TarBuffer.close  closed: "  +  currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  System.err.println( "TarBuffer.close  closed: "  +  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	System.err.println( "TarBuffer.close  closed: "  +  currName);	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
476	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.close  closed: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(currName!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.close  closed: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(currName!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.close  closed: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
477	[BUG]  [BUGGY]  if(currName!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.close  closed: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(currName!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.close  closed: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(currName!=  null)  {  if(buffer!=  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.close  closed: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
478	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.close  closed: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(currName  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.close  closed: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(currName  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.close  closed: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
479	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(buffer!=    null    ||    out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
480	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(buffer!=    null    ||    out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
481	[BUG]  [BUGGY]  if(!closed)  {  if(buffer!=  null  ||  out!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer!=  null  ||  out!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer!=  null  ||  out!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(buffer!=    null    ||    out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
482	[BUG]  [BUGGY]  if(buffer  ==  null  ||  out!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  out!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  out!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(buffer!=    null    ||    out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
483	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null  ||  out!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  if(buffer!=  null  ||  out!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  if(buffer!=  null  ||  out!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(buffer!=    null    ||    out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
484	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed:n "  +  currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed:n "  +  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close  closed:n "  +  currName);	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
485	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName,  finished);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName,  finished);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName,  finished);	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
486	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName,  closed);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName,  closed);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName,  closed);	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
487	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  close: "  +  currName);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  close: "  +  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close  close: "  +  currName);	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
488	[BUG]  [BUGGY]  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  out  =  System.err.println( "TarBuffer.close  closed: "  +  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	out  =  System.err.println( "TarBuffer.close  closed: "  +  currName);	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
489	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  LONGFILE_ERROR);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  LONGFILE_ERROR);	  buffer.close(assemBuf,    0);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
490	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  len);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  len);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  len);	  buffer.close(assemBuf,    0);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
491	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  LONGFILE_GNU);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  LONGFILE_GNU);	  buffer.close(assemBuf,    0);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
492	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currName);	  buffer.close(assemBuf,    0);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
493	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
494	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosed)  {  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosed)  {  if(buffer!=  null)  {  buffer.close();  }	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
495	[BUG]  [BUGGY]  if(hasUnclosed)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosed)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosed)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
496	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  hasUnclosedEntry);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  hasUnclosedEntry);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen,  hasUnclosedEntry);	  buffer.close(assemBuf,    0,    assemLen,    closed);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
497	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  closed);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  closed);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize,  closed);	  buffer.close(assemBuf,    0,    assemLen,    closed);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
498	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  8);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  8);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen,  8);	  buffer.close(assemBuf,    0,    assemLen,    closed);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
499	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.getOutputStream();  if(buffer  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.getOutputStream();  if(buffer  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.getOutputStream();  if(buffer  ==  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
500	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  buffer.getOutputStream();  if(buffer!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
501	[BUG]  [BUGGY]  final  OutputStream  out  =  this.recordBuf.getOutputStream();  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  final  OutputStream  out  =  this.recordBuf.getOutputStream();  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	final  OutputStream  out  =  this.recordBuf.getOutputStream();  if(buffer!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
502	[BUG]  [BUGGY]  OutputStream  out  =  assemBuf.getOutputStream();  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  assemBuf.getOutputStream();  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  assemBuf.getOutputStream();  if(buffer!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
503	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.openStream();  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.openStream();  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.openStream();  if(buffer!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
504	[BUG]  [BUGGY]  OutputStream  out  =  this.getOutputStream();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.getOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.getOutputStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
505	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  getOutputStream(true);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  getOutputStream(true);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
506	[BUG]  [BUGGY]  OutputStream  out  =  getErrorStream();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  getErrorStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  getErrorStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
507	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream().getOutputStream();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  getOutputStream().getOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  getOutputStream().getOutputStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
508	[BUG]  [BUGGY]  OutputStream  out  =  getInputStream();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  getInputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  getInputStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
509	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  buffer.close();  if(!closed)  {  out.close();  }	  buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
510	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  if(!closed)  {  out.close();  }	  buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
511	[BUG]  [BUGGY]  if(!hasUnclosed)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosed)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosed)  {  buffer.close();  if(!closed)  {  out.close();  }	  buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
512	[BUG]  [BUGGY]  if(hasUnclosed)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosed)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosed)  {  buffer.close();  if(!closed)  {  out.close();  }	  buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
513	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
514	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  buffer.close();  }	  buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
515	[BUG]  [BUGGY]  if(buffer  ==  null)buffer.close();  out  =  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)buffer.close();  out  =  null;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)buffer.close();  out  =  null;	  if(buffer!=    null)buffer.close();    out    =    null;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
516	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.close()  >  0)buffer.close();  out  =  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.close()  >  0)buffer.close();  out  =  null;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.close()  >  0)buffer.close();  out  =  null;	  if(buffer!=    null)buffer.close();    out    =    null;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
517	[BUG]  [BUGGY]  because(buffer!=  null)buffer.close();  out  =  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)buffer.close();  out  =  null;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)buffer.close();  out  =  null;	  if(buffer!=    null)buffer.close();    out    =    null;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
518	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.close())out  =  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.close())out  =  null;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.close())out  =  null;	  if(buffer!=    null)buffer.close();    out    =    null;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
519	[BUG]  [BUGGY]  if(buffer!=  null)buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.close();  out  =  null;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.close();  out  =  null;  }	  if(buffer!=    null)buffer.close();    out    =    null;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
520	[BUG]  [BUGGY]  OutputStream  os  =  getOutputStream(out);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  os  =  getOutputStream(out);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  os  =  getOutputStream(out);	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
521	[BUG]  [BUGGY]  OutputStream  os  =  getOutputStream(recordBuf);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  os  =  getOutputStream(recordBuf);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  os  =  getOutputStream(recordBuf);	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
522	[BUG]  [BUGGY]  OutputStream  os  =  getOutputStream().getOutputStream();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  os  =  getOutputStream().getOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  os  =  getOutputStream().getOutputStream();	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
523	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length,  assemBuf.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length,  assemBuf.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(buffer.length,  assemBuf.length);	  Buffer    buffer    =    new    Buffer(buffer.length);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
524	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length,  assemLen);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(buffer.length,  assemLen);	  Buffer    buffer    =    new    Buffer(buffer.length);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
525	[BUG]  [BUGGY]  this.recordBuf.closeAll(assemBuf);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  this.recordBuf.closeAll(assemBuf);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	this.recordBuf.closeAll(assemBuf);	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
526	[BUG]  [BUGGY]  this.recordBuf.close(buffer,  0,  0);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  this.recordBuf.close(buffer,  0,  0);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	this.recordBuf.close(buffer,  0,  0);	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
527	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  out.close();  }  else  {  buffer.close();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
528	[BUG]  [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  out.close();  }  else  {  buffer.flush();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
529	[BUG]  [BUGGY]  if(buffer!=  null  ||  out  ==  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  out  ==  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  out  ==  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(buffer!=    null    ||    out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
530	[BUG]  [BUGGY]  if(out!=  null)buffer.close();  if(!cloned)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)buffer.close();  if(!cloned)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)buffer.close();  if(!cloned)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
531	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  if(!cloned)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  buffer.close();  if(!cloned)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  buffer.close();  if(!cloned)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
532	[BUG]  [BUGGY]  if(buffer!=  null)buffer.release();  if(!cloned)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.release();  if(!cloned)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.release();  if(!cloned)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
533	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.flush();  }	  if(buffer!=    null)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
534	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf!=  null)  {  buffer.close();  if(!closed)  {  out.close();  }	  buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
535	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf  ==  null)  {  buffer.close();  if(!closed)  {  out.close();  }	  buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
536	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  if(closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  if(closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  if(closed)  {  out.close();  }	  buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
537	[BUG]  [BUGGY]  if(buffer.length  ==  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  ==  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  ==  0)  {  buffer.flush();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
538	[BUG]  [BUGGY]  if(buffer.length!=  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0)  {  buffer.flush();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
539	[BUG]  [BUGGY]  if(buffer.length  >=  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >=  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >=  0)  {  buffer.flush();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	139	None	replace
540	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed:  [ "  +  currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed:  [ "  +  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close  closed:  [ "  +  currName);	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
541	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "JarBuffer.close  closed: "  +  currName);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "JarBuffer.close  closed: "  +  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "JarBuffer.close  closed: "  +  currName);	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
542	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
543	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
544	[BUG]  [BUGGY]  if(!hasUnclosed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
545	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemLen,  0,  currSize);  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemLen,  0,  currSize);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemLen,  0,  currSize);  }	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
546	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemSize,  0,  currSize);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemSize,  0,  currSize);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.write(assemSize,  0,  currSize);  }	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
547	[BUG]  [BUGGY]  if(buffer.length!=  4)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  4)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  4)  {  buffer.close();  }	  if(buffer.length!=    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
548	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer.length  >  0  ||  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer.length  >  0  ||  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer.length  >  0  ||  buffer.length  >  0)  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
549	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  'n')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  'n')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  'n')  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
550	[BUG]  [BUGGY]  if(buffer!=  null)buffer.flush();  out  =  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.flush();  out  =  null;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.flush();  out  =  null;	  if(buffer!=    null)buffer.close();    out    =    null;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
551	[BUG]  [BUGGY]  if(out!=  null)buffer.close();  out  =  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)buffer.close();  out  =  null;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)buffer.close();  out  =  null;	  if(buffer!=    null)buffer.close();    out    =    null;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
552	[BUG]  [BUGGY]  if(buffer!=  null)buffer.release();  out  =  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.release();  out  =  null;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.release();  out  =  null;	  if(buffer!=    null)buffer.close();    out    =    null;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
553	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer.length  ==  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer.length  ==  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer.length  ==  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    ==    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
554	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer.length!=  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer.length!=  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer.length!=  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    ==    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
555	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer.length  >=  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer.length  >=  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer.length  >=  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    ==    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
556	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  out.close();  closed  =  true;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  out.close();  closed  =  true;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  out.close();  closed  =  true;  }	  if(!closed)    {    out.close();    closed    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
557	[BUG]  [BUGGY]  if(haveUnclosedEntry)  {  out.close();  closed  =  true;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(haveUnclosedEntry)  {  out.close();  closed  =  true;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(haveUnclosedEntry)  {  out.close();  closed  =  true;  }	  if(!closed)    {    out.close();    closed    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
558	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!closed)  {  out.close();  closed  =  true;  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry  ||!closed)  {  out.close();  closed  =  true;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry  ||!closed)  {  out.close();  closed  =  true;  }	  if(!closed)    {    out.close();    closed    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
559	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  closed  =  false;  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  closed  =  false;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  out.close();  closed  =  false;  }	  if(!closed)    {    out.close();    closed    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
560	[BUG]  [BUGGY]  if(buffer  ==  null  &&  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  &&  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  &&  buffer.length  >  0)  {  buffer.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
561	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.flush();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
562	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  this.buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  this.buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  this.buffer.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
563	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)buffer.release();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)buffer.release();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)buffer.release();	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    	non-compiled	[CE]  <identifier>  expected	128	None	replace
564	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)buffer.finish();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)buffer.finish();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)buffer.finish();	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    	non-compiled	[CE]  <identifier>  expected	128	None	replace
565	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.releaseOutputStream();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.releaseOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.releaseOutputStream();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
566	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuffer.getOutputStream();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuffer.getOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuffer.getOutputStream();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
567	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.releaseOutputStream(buffer);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.releaseOutputStream(buffer);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.releaseOutputStream(buffer);	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
568	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(!closed)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
569	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!closed)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!closed)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf!=  null)  {  if(!closed)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(!closed)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
570	[BUG]  [BUGGY]  if(!hadUnclosed)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hadUnclosed)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hadUnclosed)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(!closed)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
571	[BUG]  [BUGGY]  if(!hasUnclosed)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosed)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosed)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(!closed)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
572	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
573	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf  ==  null)  {  buffer.close();  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
574	[BUG]  [BUGGY]  if(buffer!=  null)  {  recordBuf  =  null;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  recordBuf  =  null;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  recordBuf  =  null;  }	  if(recordBuf!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	141	None	replace
575	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  <  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  <  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  <  0)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	83	None	replace
576	[BUG]  [BUGGY]  if(out!=  null)buffer.release();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)buffer.release();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)buffer.release();  if(!closed)  {  out.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
577	[BUG]  [BUGGY]  if(buffer  ==  null)buffer.release();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)buffer.release();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)buffer.release();  if(!closed)  {  out.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
578	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
579	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
580	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	113	None	replace
581	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currSize,  assemBuf);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currSize,  assemBuf);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currSize,  assemBuf);	  buffer.close(assemBuf,    0,    assemSize,    currBytes);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
582	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  currBytes,  haveUnclosedEntry);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  currBytes,  haveUnclosedEntry);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize,  currBytes,  haveUnclosedEntry);	  buffer.close(assemBuf,    0,    assemSize,    currBytes);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
583	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
584	[BUG]  [BUGGY]  if(bufferLength  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(bufferLength  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(bufferLength  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
585	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
586	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  recordSize  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  recordSize  -  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  recordSize  -  1);	  buffer.close(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
587	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  recordSize  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  recordSize  +  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  recordSize  +  1);	  buffer.close(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
588	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer    ==    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
589	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer    ==    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
590	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer    ==    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
591	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  >  0)buffer.close();	  because(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
592	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  }	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
593	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer  ==  null)  {  buffer.close();  }	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
594	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf!=  null)  {  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf!=  null)  {  if(!closed)  {  buffer.close();  }	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
595	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  if(closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf!=  null)  {  if(closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf!=  null)  {  if(closed)  {  buffer.close();  }	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
596	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currSize  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currSize  +  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currSize  +  1);	  buffer.close(assemBuf,    0,    assemSize    +    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
597	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize  /  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize  /  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize  /  1);	  buffer.close(assemBuf,    0,    assemSize    +    1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
598	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
599	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
600	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.length  <  =  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.length  <  =  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.length  <  =  0)  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
601	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  >  0)  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
602	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currBytes  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currBytes  -  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currBytes  -  1);	  buffer.close(assemBuf,    0,    currBytes);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
603	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf  ==  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf  ==  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
604	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  if(out  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf!=  null)  {  buffer.close();  if(out  ==  null)  {  out.close();  }	  buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
605	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
606	[BUG]  [BUGGY]  if(!closed)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  buffer.flush();  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	110	None	replace
607	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(recordBuf);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  getOutputStream(recordBuf);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  getOutputStream(recordBuf);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
608	[BUG]  [BUGGY]  OutputStream  out  =  super.close();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  super.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  super.close();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
609	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream()  -  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  getOutputStream()  -  1;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  getOutputStream()  -  1;	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
610	[BUG]  [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)    ==    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
611	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)    ==    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
612	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.charAt(buffer.length  -  1)  ==  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)    ==    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	144	None	replace
613	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer.length  >  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
614	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
615	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer.length  <  =  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer.length  <  =  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer.length  <  =  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
616	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  out);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  out);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen,  out);	  buffer.close(assemBuf,    0,    assemLen,    closed);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
617	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  recordBuf.length,  closed);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  recordBuf.length,  closed);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  recordBuf.length,  closed);	  buffer.close(assemBuf,    0,    assemLen,    closed);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
618	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  closed,  assemLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  closed,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  closed,  assemLen);	  buffer.close(assemBuf,    0,    assemLen,    closed);    	non-compiled	[CE]  <identifier>  expected	117	None	replace
619	[BUG]  [BUGGY]  because(buffer!=  null)out.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)out.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)out.close();  if(out!=  null)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
620	[BUG]  [BUGGY]  because(buffer!=  null)flushBuffer();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)flushBuffer();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)flushBuffer();  if(out!=  null)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
621	[BUG]  [BUGGY]  because(buffer!=  null)buffer.release();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)buffer.release();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)buffer.release();  if(out!=  null)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
622	[BUG]  [BUGGY]  if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
623	[BUG]  [BUGGY]  if(assemLen!=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen!=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen!=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
624	[BUG]  [BUGGY]  if(buffer!=  null)buffer.flush();  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.flush();  if(out  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.flush();  if(out  ==  null)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(out    ==    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
625	[BUG]  [BUGGY]  if(buffer!=  null)buffer.release();  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.release();  if(out  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.release();  if(out  ==  null)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(out    ==    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
626	[BUG]  [BUGGY]  if(buffer  ==  null  &&  buffer.isClosed())buffer.close();  else  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  &&  buffer.isClosed())buffer.close();  else  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  &&  buffer.isClosed())buffer.close();  else  buffer.close();  }	  if(buffer!=    null    &&    buffer.isClosed())buffer.close();    else    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	127	None	replace
627	[BUG]  [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf  ==  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
628	[BUG]  [BUGGY]  if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
629	[BUG]  [BUGGY]  if(assemLen!=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen!=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen!=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
630	[BUG]  [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosed)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
631	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry  ||!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry  ||!closed)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
632	[BUG]  [BUGGY]  if(out!=  null)buffer.close();  if(!cloned)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)buffer.close();  if(!cloned)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)buffer.close();  if(!cloned)  {  buffer.close();  }	  if(out!=    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
633	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  out.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf!=  null)  {  out.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf!=  null)  {  out.close();  if(out!=  null)  {  out.close();  }	  if(out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
634	[BUG]  [BUGGY]  if(!closed)  {  out  =  null;  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  out  =  null;  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  out  =  null;  buffer.close();  if(out!=  null)  {  out.close();  }	  if(out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
635	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.size()  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.size()  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.size()  >  0)  {  out.close();  }	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
636	[BUG]  [BUGGY]  While(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  While(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	While(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.close();  }	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
637	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.size()  ==  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.size()  ==  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.size()  ==  0)  {  buffer.close();  }	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	73	None	replace
638	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	143	None	replace
639	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
640	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
641	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
642	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  out.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  out.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  0)  {  out.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
643	[BUG]  [BUGGY]  because(buffer!=  null)flushBuffer();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)flushBuffer();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)flushBuffer();  if(!closed)  {  buffer.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
644	[BUG]  [BUGGY]  because(buffer!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
645	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
646	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close()  :  closed ");  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close()  :  closed ");  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close()  :  closed ");	  if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
647	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currSize  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currSize  -  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currSize  -  1);	  buffer.close(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
648	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  out.length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  out.length  -  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  out.length  -  1);	  buffer.close(assemBuf,    0,    assemLen    -    1);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
649	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed:n "  +  buffer.getName());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed:n "  +  buffer.getName());  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close  closed:n "  +  buffer.getName());	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    buffer.getName());    	non-compiled	[CE]  <identifier>  expected	82	None	replace
650	[BUG]  [BUGGY]  OutputStream  out  =(this.recordBuf!=  null)?  this.recordBuf.toByteArray()  :  recordBuf.toByteArray();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =(this.recordBuf!=  null)?  this.recordBuf.toByteArray()  :  recordBuf.toByteArray();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =(this.recordBuf!=  null)?  this.recordBuf.toByteArray()  :  recordBuf.toByteArray();	  OutputStream    out    =    this.recordBuf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
651	[BUG]  [BUGGY]  OutputStream  out  =(this.recordBuf!=  null)?  this.recordBuf.toByteArray()  :  buffer.toByteArray();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =(this.recordBuf!=  null)?  this.recordBuf.toByteArray()  :  buffer.toByteArray();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =(this.recordBuf!=  null)?  this.recordBuf.toByteArray()  :  buffer.toByteArray();	  OutputStream    out    =    this.recordBuf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
652	[BUG]  [BUGGY]  OutputStream  out  =(this.recordBuf!=  null)?  this.recordBuf.toByteArray()  :  Collections.EMPTY_LIST;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =(this.recordBuf!=  null)?  this.recordBuf.toByteArray()  :  Collections.EMPTY_LIST;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =(this.recordBuf!=  null)?  this.recordBuf.toByteArray()  :  Collections.EMPTY_LIST;	  OutputStream    out    =    this.recordBuf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
653	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  ==  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  ==  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  ==  0)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	38	None	replace
654	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
655	[BUG]  [BUGGY]  if(bufferLength  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(bufferLength  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(bufferLength  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
656	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(bufferSize  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(bufferSize  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  ==  0  ||  buffer.charAt(bufferSize  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
657	[BUG]  [BUGGY]  buffer.close(assemBuf,  0L);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0L);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0L);	  buffer.close(assemBuf,    0);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
658	[BUG]  [BUGGY]  because(buffer!=  null)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)  {  buffer.flush();  }	  because(buffer!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
659	[BUG]  [BUGGY]  Because(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Because(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Because(buffer!=  null)  {  buffer.close();  }	  because(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
660	[BUG]  [BUGGY]  because(buffer!=  null)  {  buffer.release();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)  {  buffer.release();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)  {  buffer.release();  }	  because(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
661	[BUG]  [BUGGY]  because(buffer!=  null)  {  buffer.finish();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)  {  buffer.finish();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)  {  buffer.finish();  }	  because(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
662	[BUG]  [BUGGY]  buffer.close(assemBuf,  false;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  false;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  false;	  buffer.close(assemBuf,    true);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
663	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  >  0)  {  if(buffer.close()  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  >  0)  {  if(buffer.close()  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  >  0)  {  if(buffer.close()  >  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    if(buffer.close()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
664	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  if(buffer.closed()  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  if(buffer.closed()  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  if(buffer.closed()  >  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    if(buffer.close()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
665	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
666	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
667	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  out.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
668	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
669	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  2)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
670	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  ==  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
671	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
672	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
673	[BUG]  [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
674	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	91	None	replace
675	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currName,  haveUnclosedEntry);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currName,  haveUnclosedEntry);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen,  currName,  haveUnclosedEntry);	  buffer.close(assemBuf,    0,    assemLen,    currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
676	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currName,  assemLen);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currName,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currName,  assemLen);	  buffer.close(assemBuf,    0,    assemLen,    currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
677	[BUG]  [BUGGY]  if(buffer.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0)  {  out.close();  }	  if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
678	[BUG]  [BUGGY]  if(buffer!=  null)buffer.close();  else  buffer.flush();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.close();  else  buffer.flush();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.close();  else  buffer.flush();	  if(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
679	[BUG]  [BUGGY]  if(buffer!=  null)buffer.flush();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.flush();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.flush();  else  buffer.close();	  if(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
680	[BUG]  [BUGGY]  if(buffer!=  null)buffer.close();  else  buffer.finish();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.close();  else  buffer.finish();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.close();  else  buffer.finish();	  if(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
681	[BUG]  [BUGGY]  if(buffer!=  null)buffer.close();  else  buffer.release();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.close();  else  buffer.release();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.close();  else  buffer.release();	  if(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
682	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
683	[BUG]  [BUGGY]  if(assemLen!=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen!=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen!=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
684	[BUG]  [BUGGY]  if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
685	[BUG]  [BUGGY]  if(assemLen  ==  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  ==  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  ==  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
686	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    buf.length);    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
687	[BUG]  [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    buf.length);    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
688	[BUG]  [BUGGY]  if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    buf.length);    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
689	[BUG]  [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.flush();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
690	[BUG]  [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)  ==  'n')  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)  ==  'n')  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length()  >  0  ||  buffer.charAt(buffer.length()  -  1)  ==  'n')  {  buffer.flush();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
691	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.flush();  }	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
692	[BUG]  [BUGGY]  While(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  While(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	While(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
693	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  recordSize,  assemLen);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  recordSize,  assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  recordSize,  assemLen);	  buffer.close(assemBuf,    0,    assemLen,    assemSize);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
694	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize;	  buffer.close(assemSize,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
695	[BUG]  [BUGGY]  if(buffer  ==  null)buffer.flush();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)buffer.flush();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)buffer.flush();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.flush();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
696	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.flush();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  buffer.flush();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  buffer.flush();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.flush();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
697	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.flush();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  buffer.flush();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  buffer.flush();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.flush();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
698	[BUG]  [BUGGY]  if(buffer!=  null)buffer.flush();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.flush();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.flush();  if(!closed)  {  out.close();  }	  if(buffer    ==    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
699	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf  ==  null)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf  ==  null)  {  out.close();  }  else  {  buffer.close();  }	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
700	[BUG]  [BUGGY]  if(recordBuf  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf  ==  null)  {  out.close();  }	  if(recordBuf!=    null)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	142	None	replace
701	[BUG]  [BUGGY]  buffer.close(assemBuf,  false,  currSize);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  false,  currSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  false,  currSize);	  buffer.close(assemBuf,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
702	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }	  if(!closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
703	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  out.close();  }  else  {  buffer.close();  }	  if(!closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
704	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  if(!cloned)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  buffer.close();  if(!cloned)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  buffer.close();  if(!cloned)  {  buffer.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
705	[BUG]  [BUGGY]  if(buffer!=  null)buffer.flush();  if(!cloned)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.flush();  if(!cloned)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.flush();  if(!cloned)  {  buffer.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
706	[BUG]  [BUGGY]  if(buffer!=  null)buffer.release();  if(!cloned)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.release();  if(!cloned)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.release();  if(!cloned)  {  buffer.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	97	None	replace
707	[BUG]  [BUGGY]  if(!closed)  {  this.buffer.close();  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  this.buffer.close();  if(out  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  this.buffer.close();  if(out  ==  null)  {  out.close();  }	  this.buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
708	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  <  =  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  <  =  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  <  =  0)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    =    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
709	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  0)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    =    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
710	[BUG]  [BUGGY]  if(assemLen!=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen!=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen!=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
711	[BUG]  [BUGGY]  if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >=  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
712	[BUG]  [BUGGY]  if(!closed)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(assemBuf!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
713	[BUG]  [BUGGY]  cast(buffer,  0,  0);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  cast(buffer,  0,  0);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	cast(buffer,  0,  0);	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
714	[BUG]  [BUGGY]  cast(buffer);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  cast(buffer);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	cast(buffer);	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
715	[BUG]  [BUGGY]  tate  <  T>  out  =  getOutputStream();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  tate  <  T>  out  =  getOutputStream();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	tate  <  T>  out  =  getOutputStream();	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
716	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.releaseOutputStream();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.releaseOutputStream();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.releaseOutputStream();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
717	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.close();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.close();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.close();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
718	[BUG]  [BUGGY]  if(buffer.length  >=  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >=  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >=  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length!=    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
719	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.flush();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  buffer.flush();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  buffer.flush();  }  else  {  out.close();  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
720	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.closed  source: "  +  currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.closed  source: "  +  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.closed  source: "  +  currName);	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    source:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
721	[BUG]  [BUGGY]  if(currName!=  null)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(currName!=  null)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(currName!=  null)  {  buffer.flush();  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    source:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
722	[BUG]  [BUGGY]  if(buffer.length  ==  0)  {  buffer.flush();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  ==  0)  {  buffer.flush();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  ==  0)  {  buffer.flush();  }  else  {  out.close();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
723	[BUG]  [BUGGY]  if(buffer.length!=  0)  {  buffer.flush();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0)  {  buffer.flush();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0)  {  buffer.flush();  }  else  {  out.close();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
724	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.releaseOutputStream();  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.releaseOutputStream();  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.releaseOutputStream();  if(buffer!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
725	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.release();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.release();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.length  >  0)  {  buffer.release();	  while(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	72	None	replace
726	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.closed  entry: "  +  currName);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.closed  entry: "  +  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.closed  entry: "  +  currName);	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    entry:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
727	[BUG]  [BUGGY]  if(closed)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    entry:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
728	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  buffer.close();  }  else  {  out.close();  }	  if(buffer    ==    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	133	None	replace
729	[BUG]  [BUGGY]  if(bufferLength  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(bufferLength  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(bufferLength  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	135	None	replace
730	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
731	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
732	[BUG]  [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >=  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
733	[BUG]  [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
734	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  >  0)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  >  0)  {  buffer.close();  }  else  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    >    0)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
735	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  0)  {  buffer.close();  }  else  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    >    0)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
736	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
737	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
738	[BUG]  [BUGGY]  if(buffer  >=  null)buffer.close();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  >=  null)buffer.close();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  >=  null)buffer.close();  else  buffer.close();	  if(buffer    ==    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	102	None	replace
739	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.flush();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.flush();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.size()  >  0)  {  buffer.flush();	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
740	[BUG]  [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf  ==  null)  {  buffer.close();  }  else  {  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
741	[BUG]  [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf  ==  null)  {  buffer.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
742	[BUG]  [BUGGY]  buffer.close(assemBuf,  out,  currSize);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  out,  currSize);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  out,  currSize);	  buffer.close(assemBuf,    out);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
743	[BUG]  [BUGGY]  this.os.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  this.os.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	this.os.close();	  os.close();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
744	[BUG]  [BUGGY]  os.close(buffer);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  os.close(buffer);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	os.close(buffer);	  os.close();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
745	[BUG]  [BUGGY]  Os.close();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Os.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Os.close();	  os.close();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
746	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
747	[BUG]  [BUGGY]  because(buffer!=  null)flushBuffer();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)flushBuffer();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)flushBuffer();  if(!closed)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
748	[BUG]  [BUGGY]  because(buffer!=  null)scheduled.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)scheduled.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)scheduled.close();  if(!closed)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
749	[BUG]  [BUGGY]  because(buffer!=  null)out.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null)out.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null)out.close();  if(!closed)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
750	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
751	[BUG]  [BUGGY]  if(bufferLength  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(bufferLength  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(bufferLength  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
752	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  ==  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
753	[BUG]  [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >=  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
754	[BUG]  [BUGGY]  if(buffer  ==  null)buffer.release();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)buffer.release();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)buffer.release();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
755	[BUG]  [BUGGY]  if(buffer!=  null)buffer.close();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.close();	  if(buffer!=    null)buffer.release();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
756	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.release();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.release();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  buffer.release();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
757	[BUG]  [BUGGY]  buffer.close(assemBuf,  recordBuf);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  recordBuf);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  recordBuf);	  buffer.close(assemBuf,    closed);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
758	[BUG]  [BUGGY]  buffer.close(assemBuf,  off);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  off);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  off);	  buffer.close(assemBuf,    closed);    	non-compiled	[CE]  <identifier>  expected	98	None	replace
759	[BUG]  [BUGGY]  if(out!=  null  &&  buffer.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null  &&  buffer.length  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null  &&  buffer.length  >  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
760	[BUG]  [BUGGY]  OutputStream  out  =  new  OutputStream(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  new  OutputStream(buffer,  0,  buffer.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  new  OutputStream(buffer,  0,  buffer.length);	  if(buffer!=    null    &&    buffer.length    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
761	[BUG]  [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
762	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
763	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer!=  null)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
764	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2  ||  buffer.length  >  6)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2  ||  buffer.length  >  6)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  2  ||  buffer.length  >  6)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    2)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	140	None	replace
765	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null)stop  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  if(buffer!=  null)stop  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  if(buffer!=  null)stop  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)stop    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
766	[BUG]  [BUGGY]  if(recordBuf!=  null)stopBuffer();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf!=  null)stopBuffer();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf!=  null)stopBuffer();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)stop    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
767	[BUG]  [BUGGY]  if(out!=  null)stop  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)stop  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)stop  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)stop    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
768	[BUG]  [BUGGY]  if(buffer  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    entry:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
769	[BUG]  [BUGGY]  if(currName  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(currName  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(currName  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  entry: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    entry:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	111	None	replace
770	[BUG]  [BUGGY]  if(buffer!=  null  ||  out  ==  null)  {  buffer.close();  if(out  ==  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  out  ==  null)  {  buffer.close();  if(out  ==  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  out  ==  null)  {  buffer.close();  if(out  ==  null)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(out    ==    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
771	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.release();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  buffer.release();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  buffer.release();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	70	None	replace
772	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  else  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    >    0)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
773	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  =  0)  {  buffer.close();  }  else  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    >    0)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	64	None	replace
774	[BUG]  [BUGGY]  buffer.close(assemSize,  0,  assemBuf.length  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemSize,  0,  assemBuf.length  +  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemSize,  0,  assemBuf.length  +  1);	  buffer.close(assemSize,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
775	[BUG]  [BUGGY]  buffer.close(assemSize,  0,  assemBuf.length  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemSize,  0,  assemBuf.length  -  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemSize,  0,  assemBuf.length  -  1);	  buffer.close(assemSize,    0,    assemBuf.length);    	non-compiled	[CE]  <identifier>  expected	116	None	replace
776	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  out.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
777	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
778	[BUG]  [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf  ==  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf  ==  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
779	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.flush();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  buffer.flush();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  buffer.flush();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	124	None	replace
780	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currLen);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currLen);	  buffer.close(assemBuf,    0,    currSize);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
781	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  <  2)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  <  2)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  <  2)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    2)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	140	None	replace
782	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2  ||  buffer.length  >  4)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2  ||  buffer.length  >  4)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  2  ||  buffer.length  >  4)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    2)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	140	None	replace
783	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.getLength()  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.getLength()  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.getLength()  >  0)  {  buffer.close();  }	  because(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
784	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  buffer.close();  }	  because(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
785	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.isEnabled(Feature.QUOTED_FIELD_NAMES))  {  buffer.close();  }	  because(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
786	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.isEnabled(Feature.AUTO_CLOSE_ERROR))  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.isEnabled(Feature.AUTO_CLOSE_ERROR))  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.isEnabled(Feature.AUTO_CLOSE_ERROR))  {  buffer.close();  }	  because(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	132	None	replace
787	[BUG]  [BUGGY]  if(assemLen  >  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
788	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  =  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  =  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	147	None	replace
789	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  recordSize,  currName);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  recordSize,  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  recordSize,  currName);	  buffer.close(assemBuf,    0,    recordSize);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
790	[BUG]  [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  if(buffer.length  >  0  ||  buffer.length  >  0)  {  buffer.close();  }	  if(buffer    ==    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
791	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  getOutputStream();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  getOutputStream();  if(out!=  null)  {  buffer.close();  }	  if(buffer    ==    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
792	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  out.close();  }  else  {  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
793	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  buffer.flush();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
794	[BUG]  [BUGGY]  if(closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  buffer.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
795	[BUG]  [BUGGY]  if(buffer.length  ==  0)buffer.close();  else  buffer.close();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  ==  0)buffer.close();  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  ==  0)buffer.close();  else  buffer.close();	  if(buffer    ==    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	102	None	replace
796	[BUG]  [BUGGY]  if(buffer!=  null)buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)buffer.close();  }  else  {  buffer.close();  }	  if(buffer    ==    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	102	None	replace
797	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.close())  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.close())  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.close())  {  buffer.close();  }	  if(buffer    ==    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	102	None	replace
798	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.close())buffer.close();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.close())buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.close())buffer.close();	  if(buffer    ==    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	102	None	replace
799	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  null;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer[i]  =  null;  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
800	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  i++)  {  buffer[i]  =  null;  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
801	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  for(int  i  =  0;  i  <  buffer.length;  ++i)  {  buffer.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	129	None	replace
802	[BUG]  [BUGGY]  if(buffer!=  null  &&  out!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  out!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  out!=  null)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  if(buffer!=    null    ||    out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
803	[BUG]  [BUGGY]  if(buffer  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    source:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
804	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  buffer.close();  }  else  {  System.err.println( "TarBuffer.closed  source: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.closed    source:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	108	None	replace
805	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  else  {  out.close();  }	  because(buffer!=    null)    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	134	None	replace
806	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
807	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  out.flush();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  out.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  out.flush();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	115	None	replace
808	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen  +  4);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen  +  4);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen  +  4);	  buffer.close(assemBuf,    0,    assemLen    +    1);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
809	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer!=    null)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
810	[BUG]  [BUGGY]  while(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(!closed)  {  buffer.close();  }	  if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
811	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
812	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  this.assemLen);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  this.assemLen);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  this.assemLen);	  buffer.close(assemBuf,    0,    closed);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
813	[BUG]  [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!hasUnclosedEntry)  {  buffer.close();  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!hasUnclosedEntry)  {  buffer.close();  out.close();  }	  if(!closed)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
814	[BUG]  [BUGGY]  if(closed)  {  buffer.close();  out!=  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  buffer.close();  out!=  null;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  buffer.close();  out!=  null;  }	  if(!closed)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
815	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemName.length);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemName.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemName.length);	  buffer.close(assemBuf,    0,    currName.length);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
816	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	105	None	replace
817	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  else  {  out.close();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
818	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.flush();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.flush();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.flush();  }  else  {  out.close();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
819	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.flush();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
820	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  'n')  {  buffer.flush();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  'n')  {  buffer.flush();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  'n')  {  buffer.flush();  }  else  {  out.close();  }	  if(buffer.length()    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
821	[BUG]  [BUGGY]  if(assemLen  >  0)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  >  0)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  >  0)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemLen);  out.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
822	[BUG]  [BUGGY]  if(assemLen  ==  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemLen  ==  0)  {  if(assemBuf!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemLen  ==  0)  {  if(assemBuf!=  null)  {  buffer.close();  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemLen);    out.close();    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
823	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  currBytes,  closed);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemSize,  currBytes,  closed);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemSize,  currBytes,  closed);	  buffer.close(assemBuf,    0,    assemSize,    currBytes);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
824	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currName,  LONGFILE_GNU);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  assemLen,  currName,  LONGFILE_GNU);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  assemLen,  currName,  LONGFILE_GNU);	  buffer.close(assemBuf,    0,    assemLen,    currName);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
825	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  buffer.close();  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
826	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
827	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  assemBuf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  assemBuf.length);  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
828	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  assemBuf.length);  out.close();  }  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  assemBuf.length);  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  System.arraycopy(assemBuf,  0,  recordBuf,  0,  assemBuf.length);  out.close();  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
829	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(this.recordBuf!=  null)  {  this.recordBuf.close();  }  else  {  out.close();  }	  this.recordBuf.close();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
830	[BUG]  [BUGGY]  final  OutputStream  out  =  this.recordBuf.toByteArray();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  final  OutputStream  out  =  this.recordBuf.toByteArray();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	final  OutputStream  out  =  this.recordBuf.toByteArray();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.toByteArray();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	86	None	replace
831	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
832	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)buffer.close();  }  else  buffer.close();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)buffer.close();  }  else  buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)buffer.close();  }  else  buffer.close();	  if(buffer!=    null    &&    buffer.length    >    0)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
833	[BUG]  [BUGGY]  if(closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  out.close();  }	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
834	[BUG]  [BUGGY]  if(hasUnclosed)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosed)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosed)  {  out.close();  }  else  {  buffer.close();  }	  if(closed)    {    out.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	75	None	replace
835	[BUG]  [BUGGY]  if(!closed)  {  if(buffer.length  >  0  ||  buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!closed)  {  if(buffer.length  >  0  ||  buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!closed)  {  if(buffer.length  >  0  ||  buffer.length  >  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
836	[BUG]  [BUGGY]  if(closed)  {  if(buffer.length  <  =  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  if(buffer.length  <  =  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  if(buffer.length  <  =  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
837	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  =  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  =  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	145	None	replace
838	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
839	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }	  if(buffer.length    ==    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
840	[BUG]  [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  ==  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	138	None	replace
841	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(out!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(out!=  null)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
842	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  =  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null  ||  buffer.length  <  =  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer    ==    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
843	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.close())buffer.close();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.close())buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.close())buffer.close();	  if(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
844	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.isClosed())buffer.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.isClosed())buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.isClosed())buffer.close();	  if(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	53	None	replace
845	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  ==  0)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  ==  0)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  ==  0)  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
846	[BUG]  [BUGGY]  OutputStream  out  =(this.recordBuf!=  null?  this.recordBuf.toByteArray()  :  buffer.toByteArray());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =(this.recordBuf!=  null?  this.recordBuf.toByteArray()  :  buffer.toByteArray());  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =(this.recordBuf!=  null?  this.recordBuf.toByteArray()  :  buffer.toByteArray());	  OutputStream    out    =    this.recordBuf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
847	[BUG]  [BUGGY]  OutputStream  out  =(this.recordBuf!=  null?  this.recordBuf.toByteArray()  :  Collections.EMPTY_LIST);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =(this.recordBuf!=  null?  this.recordBuf.toByteArray()  :  Collections.EMPTY_LIST);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =(this.recordBuf!=  null?  this.recordBuf.toByteArray()  :  Collections.EMPTY_LIST);	  OutputStream    out    =    this.recordBuf.toByteArray();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
848	[BUG]  [BUGGY]  if(recordBuf.length  ==  0)  {  out.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(recordBuf.length  ==  0)  {  out.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(recordBuf.length  ==  0)  {  out.close();  }  else  {  buffer.close();  }	  out.close();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
849	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  =  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  =  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
850	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(buffer.length    -    1)!=    '/')    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
851	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  buffer.close();  out  =  null;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  buffer.close();  out  =  null;  }	  buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
852	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)buffer.close();  out  =  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)buffer.close();  out  =  null;  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)buffer.close();  out  =  null;	  if(buffer!=    null)buffer.close();    out    =    null;    	non-compiled	[CE]  <identifier>  expected	119	None	replace
853	[BUG]  [BUGGY]  if(buffer!=  null)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  out.close();  }	  if(out!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
854	[BUG]  [BUGGY]  if(buffer!=  null)  {  out.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  out.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  out.close();  if(!closed)  {  out.close();  }	  if(out!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	104	None	replace
855	[BUG]  [BUGGY]  if(closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  out.close();  }  else  {  buffer.write(assemBuf,  0,  currSize);  }	  if(!closed)    {    out.close();    }    else    {    buffer.write(assemBuf,    0,    currSize);    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
856	[BUG]  [BUGGY]  Buffer  buffer  =  new  TarBuffer(buffer.length,  buffer.length);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  TarBuffer(buffer.length,  buffer.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  TarBuffer(buffer.length,  buffer.length);	  if(buffer    ==    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
857	[BUG]  [BUGGY]  Buffer  buffer  =  new  TarBuffer(buffer.length);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  TarBuffer(buffer.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  TarBuffer(buffer.length);	  if(buffer    ==    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
858	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  out.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    buf.length);    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
859	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    buf.length);    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
860	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    buf.length);    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
861	[BUG]  [BUGGY]  if(assemBuf!=  null  ||  assemBuf.length  <  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null  ||  assemBuf.length  <  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null  ||  assemBuf.length  <  0)  {  buffer.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  buf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    buf.length);    }    	non-compiled	[CE]  <identifier>  expected	125	None	replace
862	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  <  =  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  <  =  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  <  =  0)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    =    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	131	None	replace
863	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
864	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
865	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.flush();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.flush();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.flush();  }  else  {  buffer.close();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	137	None	replace
866	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.release();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  buffer.release();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  buffer.release();  if(!closed)  {  out.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
867	[BUG]  [BUGGY]  if(out!=  null)  {  buffer.release();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  buffer.release();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  buffer.release();  if(!closed)  {  out.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
868	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.release();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.release();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  buffer.release();  if(!closed)  {  out.close();  }	  if(buffer!=    null)buffer.release();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	106	None	replace
869	[BUG]  [BUGGY]  if(this.buffer!=  null)  {  this.buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(this.buffer!=  null)  {  this.buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(this.buffer!=  null)  {  this.buffer.close();  }	  this.buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
870	[BUG]  [BUGGY]  if(this.buffer!=  null)  {  this.buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(this.buffer!=  null)  {  this.buffer.close();  out  =  null;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(this.buffer!=  null)  {  this.buffer.close();  out  =  null;  }	  this.buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
871	[BUG]  [BUGGY]  if(this.buffer!=  null)  {  this.buffer.close();  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(this.buffer!=  null)  {  this.buffer.close();  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(this.buffer!=  null)  {  this.buffer.close();  out.close();  }	  this.buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
872	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  if(!cloned)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  if(!cloned)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  if(!cloned)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
873	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  if(buffer.close()  <  LONGFILE_GNU)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  >  0)  {  if(buffer.close()  <  LONGFILE_GNU)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  >  0)  {  if(buffer.close()  <  LONGFILE_GNU)  {  out.close();  }	  if(buffer!=    null)buffer.close();    if(!cloned)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	107	None	replace
874	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	136	None	replace
875	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  ==  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  ==  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  ==  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  if(buffer!=    null    ||    buffer.length    ==    0)    {    buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
876	[BUG]  [BUGGY]  if(this.recordBuf!=  null)  {  OutputStream  out  =  this.recordBuf.getOutputStream();  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(this.recordBuf!=  null)  {  OutputStream  out  =  this.recordBuf.getOutputStream();  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(this.recordBuf!=  null)  {  OutputStream  out  =  this.recordBuf.getOutputStream();  if(buffer!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
877	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.close();  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.close();  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.close();  if(buffer!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
878	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.toByteArray();  if(buffer!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.toByteArray();  if(buffer!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.toByteArray();  if(buffer!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(buffer!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	87	None	replace
879	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length  ==  0  ||  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length  ==  0  ||  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer.length  ==  0  ||  buffer.length  >  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    ==    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
880	[BUG]  [BUGGY]  if(buffer.length  <  =  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  =  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  =  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
881	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  0  ||  buffer.charAt(bufferLength  -  1)!=  '/')  {  buffer.close();  }  else  {  buffer.close();  }	  if(buffer.length    ==    0    ||    buffer.charAt(bufferLength    -    1)!=    '/')    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	146	None	replace
882	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.length  >  0)  {  buffer.close();  if(!closed)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
883	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  buffer.close();  if(!closed)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  buffer.close();  if(!closed)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  buffer.close();  if(!closed)  {  out.close();  }	  because(buffer!=    null)buffer.close();    if(!closed)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
884	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.flush();  }  else  {  out.close();  }	  if(buffer.length    >    0)    {    buffer.flush();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
885	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer  ==  null)  {  buffer.close();  }  else  {  buffer.close();  }	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
886	[BUG]  [BUGGY]  Iterator  <  TarBuffer>  out  =  this.recordBuf.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Iterator  <  TarBuffer>  out  =  this.recordBuf.entrySet().iterator();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Iterator  <  TarBuffer>  out  =  this.recordBuf.entrySet().iterator();	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
887	[BUG]  [BUGGY]  Iterator  <  TarBuffer>  out  =  buffer.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Iterator  <  TarBuffer>  out  =  buffer.entrySet().iterator();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Iterator  <  TarBuffer>  out  =  buffer.entrySet().iterator();	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
888	[BUG]  [BUGGY]  Iterator  <  TarBuffer>  out  =  buffer.getEntrySet().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Iterator  <  TarBuffer>  out  =  buffer.getEntrySet().iterator();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Iterator  <  TarBuffer>  out  =  buffer.getEntrySet().iterator();	  if(!closed)    {    if(buffer!=    null)    {    buffer.close();    }    else    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
889	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(),  buffer.releaseAbsolutePath());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  getOutputStream(),  buffer.releaseAbsolutePath());  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  getOutputStream(),  buffer.releaseAbsolutePath());	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
890	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(),  buffer.getCharset());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  getOutputStream(),  buffer.getCharset());  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  getOutputStream(),  buffer.getCharset());	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
891	[BUG]  [BUGGY]  if(buffer.length!=  3)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length!=  3)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length!=  3)  {  buffer.close();  }	  if(buffer.length!=    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
892	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.size()  >  0)buffer.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.size()  >  0)buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.size()  >  0)buffer.close();	  because(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
893	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.isClosed())buffer.close();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.isClosed())buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.isClosed())buffer.close();	  because(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
894	[BUG]  [BUGGY]  because(buffer!=  null  &&  buffer.isOpen())buffer.close();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  because(buffer!=  null  &&  buffer.isOpen())buffer.close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	because(buffer!=  null  &&  buffer.isOpen())buffer.close();	  because(buffer!=    null)buffer.close();    else    buffer.close();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
895	[BUG]  [BUGGY]  if(buffer  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.close  closed: "  +  currName);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.close  closed: "  +  currName);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer  ==  null)  {  buffer.flush();  }  else  {  System.err.println( "TarBuffer.close  closed: "  +  currName);  }	  if(buffer!=    null)    {    buffer.flush();    }    else    {    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    }    	non-compiled	[CE]  <identifier>  expected	109	None	replace
896	[BUG]  [BUGGY]  Iterator  <  TarBuffer>  out  =  buffer.getOutputs().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Iterator  <  TarBuffer>  out  =  buffer.getOutputs().iterator();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Iterator  <  TarBuffer>  out  =  buffer.getOutputs().iterator();	  if(!closed)    {    if(buffer    ==    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
897	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length,  buffer.length);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length,  buffer.length);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(buffer.length,  buffer.length);	  Buffer    buffer    =    new    Buffer(buffer.length);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
898	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length  *  2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length  *  2);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(buffer.length  *  2);	  Buffer    buffer    =    new    Buffer(buffer.length);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
899	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length,  0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length,  0);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(buffer.length,  0);	  Buffer    buffer    =    new    Buffer(buffer.length);    	non-compiled	[CE]  <identifier>  expected	84	None	replace
900	[BUG]  [BUGGY]  final  OutputStream  out  =  this.recordBuf.getOutputStream();  if(out!=  null)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  final  OutputStream  out  =  this.recordBuf.getOutputStream();  if(out!=  null)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	final  OutputStream  out  =  this.recordBuf.getOutputStream();  if(out!=  null)  {  buffer.close();  }	  OutputStream    out    =    this.recordBuf.getOutputStream();    if(out!=    null)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
901	[BUG]  [BUGGY]  if(closed)  {  out.close();  closed  =  true;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  out.close();  closed  =  true;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  out.close();  closed  =  true;  }	  if(!closed)    {    out.close();    closed    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
902	[BUG]  [BUGGY]  if(!recorded)  {  out.close();  closed  =  true;  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(!recorded)  {  out.close();  closed  =  true;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(!recorded)  {  out.close();  closed  =  true;  }	  if(!closed)    {    out.close();    closed    =    true;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
903	[BUG]  [BUGGY]  OutputStream  os  =  getOutputStream().close();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  os  =  getOutputStream().close();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  os  =  getOutputStream().close();	  OutputStream    os    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	80	None	replace
904	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  0L,  closed);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  0L,  closed);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  0L,  closed);	  buffer.close(assemBuf,    0,    0L);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
905	[BUG]  [BUGGY]  if(buffer!=  null  &&  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  &&  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  &&  buffer.length  <  0)  {  buffer.close();  if(!closed)  {  buffer.close();  }	  if(buffer!=    null    ||    buffer.length    <    0)    {    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
906	[BUG]  [BUGGY]  if(buffer!=  null)  {  buffer.close();  out  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)  {  buffer.close();  out  =  null;  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)  {  buffer.close();  out  =  null;  }	  if(out!=    null)    {    buffer.close();    if(out!=    null)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	77	None	replace
907	[BUG]  [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  'n')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  'n')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)  ==  'n')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
908	[BUG]  [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer.length  <  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  buffer.close();  }  else  {  out.close();  }	  if(buffer.length    >    0    ||    buffer.charAt(buffer.length    -    1)!=    'n')    {    buffer.close();    }    else    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	92	None	replace
909	[BUG]  [BUGGY]  buffer.close(assemBuf,  0,  currBytes,  closed);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  0,  currBytes,  closed);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  0,  currBytes,  closed);	  buffer.close(assemBuf,    0,    currBytes);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
910	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  >  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    if(buffer.close()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
911	[BUG]  [BUGGY]  if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  <  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  <  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(out!=  null)  {  if(buffer!=  null  ||  buffer.length  <  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    if(buffer.close()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
912	[BUG]  [BUGGY]  if(closed)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(closed)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(closed)  {  if(buffer!=  null  &&  buffer.length  >  0)  {  out.close();  }	  if(buffer!=    null    &&    buffer.length    >    0)    {    if(buffer.close()    >    0)    {    out.close();    }    	non-compiled	[CE]  <identifier>  expected	114	None	replace
913	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed:  %s. "  +  currName);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.close  closed:  %s. "  +  currName);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.close  closed:  %s. "  +  currName);	  OutputStream    out    =    System.err.println(   "TarBuffer.close    closed:   "    +    currName);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
914	[BUG]  [BUGGY]  buffer.close(assemBuf,  false,  closed);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  buffer.close(assemBuf,  false,  closed);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	buffer.close(assemBuf,  false,  closed);	  buffer.close(assemBuf,    false);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
915	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.finish();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  OutputStream  out  =  this.recordBuf.finish();  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	OutputStream  out  =  this.recordBuf.finish();	  OutputStream    out    =    this.recordBuf.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
916	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length()  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length()  -  1);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(buffer.length()  -  1);	  if(buffer.length()    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
917	[BUG]  [BUGGY]  Buffer  buffer  =  new  byte[buffer.length()  ];  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  byte[buffer.length()  ];  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  byte[buffer.length()  ];	  if(buffer.length()    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
918	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length(),  buffer.length());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length(),  buffer.length());  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(buffer.length(),  buffer.length());	  if(buffer.length()    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
919	[BUG]  [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  Buffer(buffer.length());  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  Buffer(buffer.length());	  if(buffer.length()    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
920	[BUG]  [BUGGY]  Buffer  buffer  =  new  ArrayBuffer(buffer.length());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  Buffer  buffer  =  new  ArrayBuffer(buffer.length());  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	Buffer  buffer  =  new  ArrayBuffer(buffer.length());	  if(buffer.length()    >    0)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	2	None	replace
921	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null  ||  buffer.length  <  2)  {  buffer.flush();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null  ||  buffer.length  <  2)  {  buffer.flush();  }	  if(buffer!=    null)    {    buffer.flush();    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
922	[BUG]  [BUGGY]  doClose(os);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  doClose(os);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	doClose(os);	  os.close();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
923	[BUG]  [BUGGY]  doClose(os,  buffer);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  doClose(os,  buffer);  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	doClose(os,  buffer);	  os.close();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
924	[BUG]  [BUGGY]  if(buffer!=  null)stopBuffer();  if(closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)stopBuffer();  if(closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)stopBuffer();  if(closed)  {  buffer.close();  }	  if(buffer!=    null)stop    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
925	[BUG]  [BUGGY]  if(buffer!=  null)stop  buffer.close();  if(closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(buffer!=  null)stop  buffer.close();  if(closed)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(buffer!=  null)stop  buffer.close();  if(closed)  {  buffer.close();  }	  if(buffer!=    null)stop    buffer.close();    if(!closed)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	130	None	replace
926	[BUG]  [BUGGY]  while(buffer!=  null  &&  buffer.size()  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  while(buffer!=  null  &&  buffer.size()  >  0)  {  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	while(buffer!=  null  &&  buffer.size()  >  0)  {	  while(buffer!=    null    &&    buffer.size()    >    0)    {    buffer.close();    	non-compiled	[CE]  <identifier>  expected	74	None	replace
927	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  out.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  out.close();  }  else  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
928	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
929	[BUG]  [BUGGY]  if(assemBuf!=  null)  {  for(int  i  =  0;  i  <  assemBuf.length;  ++i)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(assemBuf!=  null)  {  for(int  i  =  0;  i  <  assemBuf.length;  ++i)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(assemBuf!=  null)  {  for(int  i  =  0;  i  <  assemBuf.length;  ++i)  {  System.arraycopy(assemBuf,  0,  assemBuf,  0,  assemBuf.length);  }	  if(assemBuf!=    null)    {    buffer.close();    }    else    {    System.arraycopy(assemBuf,    0,    assemBuf,    0,    assemBuf.length);    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
930	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length  >  0  ||  buffer.length  >  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length  >  0  ||  buffer.length  >  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer.length  >  0  ||  buffer.length  >  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
931	[BUG]  [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length  <  =  0)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  close()  throws  IOException  {  if(!finished)  {  finish();  }  if  (!closed)  {      [BUGGY]  if(hasUnclosedEntry)  {  if(buffer.length  <  =  0)  {  buffer.close();  }  [BUGGY]      out.close();  closed  =  true;  }  }  [CLASS]  TarArchiveOutputStream  [METHOD]  close  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	145	145	1	replace	if(hasUnclosedEntry)  {  if(buffer.length  <  =  0)  {  buffer.close();  }	  if(!closed)    {    if(buffer.length    >    0)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
