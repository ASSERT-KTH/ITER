bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!closed)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!closed)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed)  {	  if(!finished)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
2	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!finished  &&  buffer.isEnabled())  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.isEnabled())  {	  if(!finished)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
3	[BUG]  [BUGGY]  if(!finished  &&  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!finished  &&  hasUnclosedEntry)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  hasUnclosedEntry)  {	  if(!finished)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
4	[BUG]  [BUGGY]  if(!finished  ||  buffer.isEnabled())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!finished  ||  buffer.isEnabled())  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  buffer.isEnabled())  {	  if(!finished)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
5	[BUG]  [BUGGY]  if(!finished  &&  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!finished  &&  buffer.length  >  0)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.length  >  0)  {	  if(!finished)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
6	[BUG]  [BUGGY]  os.flush();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  os.flush();  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	os.flush();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
7	[BUG]  [BUGGY]  final  OutputStream  out  =  os.getOutputStream();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  final  OutputStream  out  =  os.getOutputStream();  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  os.getOutputStream();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
8	[BUG]  [BUGGY]  os.close();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  os.close();  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	os.close();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  final  OutputStream  out  =  getOutputStream();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  final  OutputStream  out  =  getOutputStream();  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  getOutputStream();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
10	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName);  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(currName);	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
11	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  OutputStream  out  =  getOutputStream();  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  getOutputStream();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  final  OutputStream  out  =  this.getOutputStream();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  final  OutputStream  out  =  this.getOutputStream();  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  this.getOutputStream();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
14	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
16	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {	  if(hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
17	[BUG]  [BUGGY]  if(cloned)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(cloned)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(cloned)  {	  if(haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
18	[BUG]  [BUGGY]  if(this.closed)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(this.closed)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.closed)  {	  if(haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  if(finished  ||  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(finished  ||  buffer.length!=  0)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  buffer.length!=  0)  {	  if(finished    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  if(closed  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(closed  ||  buffer!=  null)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  buffer!=  null)  {	  if(finished    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
21	[BUG]  [BUGGY]  if(finished  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(finished  ||  buffer.length  ==  0)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  buffer.length  ==  0)  {	  if(finished    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
22	[BUG]  [BUGGY]  if(finished  ||  buffer  ==  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(finished  ||  buffer  ==  null)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  buffer  ==  null)  {	  if(finished    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
23	[BUG]  [BUGGY]  if(finished  ||  buffer.isEnabled())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(finished  ||  buffer.isEnabled())  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  buffer.isEnabled())  {	  if(finished    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
24	[BUG]  [BUGGY]  if(closed  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(closed  ||  hasUnclosedEntry)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  hasUnclosedEntry)  {	  if(closed)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
25	[BUG]  [BUGGY]  if(!finished  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!finished  ||  hasUnclosedEntry)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  hasUnclosedEntry)  {	  if(finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
26	[BUG]  [BUGGY]  if(haveUnclosedEntry  ||  finished)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(haveUnclosedEntry  ||  finished)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(haveUnclosedEntry  ||  finished)  {	  if(finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
27	[BUG]  [BUGGY]  if(finished  ||  haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(finished  ||  haveUnclosedEntry)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  haveUnclosedEntry)  {	  if(finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
28	[BUG]  [BUGGY]  if(finish  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(finish  ||  hasUnclosedEntry)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finish  ||  hasUnclosedEntry)  {	  if(finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
29	[BUG]  [BUGGY]  if(!closed  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!closed  ||  hasUnclosedEntry)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  ||  hasUnclosedEntry)  {	  if(finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
30	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(finish)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
31	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(finish)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
32	[BUG]  [BUGGY]  if(!cloned)  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!cloned)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!cloned)  {	  if(haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
33	[BUG]  [BUGGY]  if(clone)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(clone)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(clone)  {	  if(haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
34	[BUG]  [BUGGY]  if(!finish)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!finish)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finish)  {	  if(finish)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
35	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(closed)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  if(closed  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(closed  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(closed)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
37	[BUG]  [BUGGY]  if(closed  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(closed  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {	  if(closed)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
38	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.this))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.this))  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(TarBuffer.this))  {	  if(!finished)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
39	[BUG]  [BUGGY]  OutputStream  out  =  this.getOutputStream();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  OutputStream  out  =  this.getOutputStream();  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  this.getOutputStream();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
40	[BUG]  [BUGGY]  out.close();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  out.close();  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	out.close();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
41	[BUG]  [BUGGY]  OutputStream  out  =  System.out;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  OutputStream  out  =  System.out;  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  System.out;	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  if(finish  ||  haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(finish  ||  haveUnclosedEntry)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finish  ||  haveUnclosedEntry)  {	  if(finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
43	[BUG]  [BUGGY]  if(haveUnclosed)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(haveUnclosed)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(haveUnclosed)  {	  if(finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  if(finished  ||  archive!=  null)  {  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(finished  ||  archive!=  null)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  archive!=  null)  {	  if(finished    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
45	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!finished)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
46	[BUG]  [BUGGY]  if(!finished  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!finished  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!finished)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
47	[BUG]  [BUGGY]  if(!finished)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(!finished)  {  buffer.close();  }  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished)  {  buffer.close();  }	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
48	[BUG]  [BUGGY]  if(this.finish)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(this.finish)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finish)  {	  if(finish)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  if(this.finished  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  finish()  throws  IOException  {    [BUGGY]  if(this.finished  ||  hasUnclosedEntry)  {  [BUGGY]    throw  new  IOException(   "This  archive  has  already  been  finished   ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(   "This  archives  contains  unclosed  entries.   ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finished  ||  hasUnclosedEntry)  {	  if(finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
