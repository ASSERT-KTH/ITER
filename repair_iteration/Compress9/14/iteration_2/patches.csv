bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
2	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
3	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
4	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
5	[BUG]  [BUGGY]  if(closed  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  buffer.length  ==  0)  {	  if(finished    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
6	[BUG]  [BUGGY]  if(finished  ||  buffer.length  <  =  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  buffer.length  <  =  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  buffer.length  <  =  0)  {	  if(finished    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
7	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(buffer  ==  null  ||  buffer.length  ==  0)  {	  if(finished    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
8	[BUG]  [BUGGY]  if(!finished  &&  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.length  ==  0)  {	  if(finished    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
9	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
10	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
11	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_FILE)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
12	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
13	[BUG]  [BUGGY]  final  OutputStream  out  =  this.archives.getOutputStream();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  this.archives.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  this.archives.getOutputStream();	  final    OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
14	[BUG]  [BUGGY]  final  OutputStream  out  =  getErrorStream();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  getErrorStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  getErrorStream();	  final    OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
15	[BUG]  [BUGGY]  final  OutputStream  out  =  getInputStream();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  getInputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  getInputStream();	  final    OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
16	[BUG]  [BUGGY]  final  OutputStream  out  =  getOutputStream().getOutputStream();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  getOutputStream().getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  getOutputStream().getOutputStream();	  final    OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
17	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
18	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FILE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FILE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FILE_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
19	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
20	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
21	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
22	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName,  buffer.length);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName,  buffer.length);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(currName,  buffer.length);	  final    OutputStream    out    =    new    FileOutputStream(currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
23	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName.getBytes());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName.getBytes());  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(currName.getBytes());	  final    OutputStream    out    =    new    FileOutputStream(currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
24	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName.length);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName.length);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(currName.length);	  final    OutputStream    out    =    new    FileOutputStream(currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
25	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName,  fileMode);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName,  fileMode);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(currName,  fileMode);	  final    OutputStream    out    =    new    FileOutputStream(currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
26	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(fileName);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(fileName);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(fileName);	  final    OutputStream    out    =    new    FileOutputStream(currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
27	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName,  buffer);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName,  buffer);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(currName,  buffer);	  final    OutputStream    out    =    new    FileOutputStream(currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
28	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_FILE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
29	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_FILE_ERROR)||  isEnabled(TarBuffer.DEFAULT_FILE_GNU))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_FILE_ERROR)||  isEnabled(TarBuffer.DEFAULT_FILE_GNU))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(TarBuffer.DEFAULT_FILE_ERROR)||  isEnabled(TarBuffer.DEFAULT_FILE_GNU))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_FILE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
30	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_FILE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
31	[BUG]  [BUGGY]  if(!closed  &&  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  &&  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  &&  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_FILE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
32	[BUG]  [BUGGY]  if(!closed  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_FILE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
33	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(hasUnclosedEntry  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_FILE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
34	[BUG]  [BUGGY]  os.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  os.write(assemBuf,  0,  assemLen);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	os.write(assemBuf,  0,  assemLen);	  os.close();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  os.writeEndBytes(true);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  os.writeEndBytes(true);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	os.writeEndBytes(true);	  os.close();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
36	[BUG]  [BUGGY]  os.writeEndBytes();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  os.writeEndBytes();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	os.writeEndBytes();	  os.close();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
37	[BUG]  [BUGGY]  os.writeEndBytes(recordBuf);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  os.writeEndBytes(recordBuf);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	os.writeEndBytes(recordBuf);	  os.close();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
38	[BUG]  [BUGGY]  os.writeEndByte();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  os.writeEndByte();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	os.writeEndByte();	  os.close();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
39	[BUG]  [BUGGY]  while(!finished  &&  buffer.isEnabled())  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  while(!finished  &&  buffer.isEnabled())  {  buffer.close();  }  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	while(!finished  &&  buffer.isEnabled())  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
40	[BUG]  [BUGGY]  if(closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed)  {  buffer.close();  }  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
41	[BUG]  [BUGGY]  if(finished)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished)  {  buffer.close();  }  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
42	[BUG]  [BUGGY]  while(!finished  &&  buffer.isFinal())  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  while(!finished  &&  buffer.isFinal())  {  buffer.close();  }  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	while(!finished  &&  buffer.isFinal())  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
43	[BUG]  [BUGGY]  if(!finished)  {  buffer.finish();  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished)  {  buffer.finish();  }  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished)  {  buffer.finish();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
44	[BUG]  [BUGGY]  this.buffer.close();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  this.buffer.close();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	this.buffer.close();	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
45	[BUG]  [BUGGY]  OutputStream  out  =  this.archives.getOutputStream();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.archives.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  this.archives.getOutputStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
46	[BUG]  [BUGGY]  OutputStream  out  =  getErrorStream();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getErrorStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  getErrorStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
47	[BUG]  [BUGGY]  OutputStream  out  =  os.getOutputStream();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  os.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  os.getOutputStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
48	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream().getOutputStream();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream().getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  getOutputStream().getOutputStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
49	[BUG]  [BUGGY]  OutputStream  out  =  getInputStream();  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getInputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  getInputStream();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
50	[BUG]  [BUGGY]  if(closed  ||  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  buffer.length!=  0)  {	  if(closed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
51	[BUG]  [BUGGY]  if(closed  ||  buffer.isEnabled())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  buffer.isEnabled())  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  buffer.isEnabled())  {	  if(closed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
52	[BUG]  [BUGGY]  if(haveUnclosedEntry  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(haveUnclosedEntry  ||  buffer!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(haveUnclosedEntry  ||  buffer!=  null)  {	  if(closed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
53	[BUG]  [BUGGY]  if(closed  ||  buffer  ==  null)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  buffer  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  buffer  ==  null)  {	  if(closed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
54	[BUG]  [BUGGY]  if(!closed  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  ||  buffer!=  null)  {	  if(closed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
55	[BUG]  [BUGGY]  if(!finished  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  ||  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  buffer.length  >  0)  {	  if(!finished    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
56	[BUG]  [BUGGY]  if(!finished  &&  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  '/')  {	  if(!finished    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
57	[BUG]  [BUGGY]  if(finished  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  buffer.length  >  0)  {	  if(!finished    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
58	[BUG]  [BUGGY]  if(!finished  &&  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  'n')  {	  if(!finished    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
59	[BUG]  [BUGGY]  if(!finished  &&  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  ':')  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  ':')  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.length  >  0  ||  buffer.charAt(buffer.length  -  1)!=  ':')  {	  if(!finished    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
60	[BUG]  [BUGGY]  if(!finished  &&  buffer.length  >  0  &&  buffer.charAt(buffer.length  -  1)!=  'n')  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.length  >  0  &&  buffer.charAt(buffer.length  -  1)!=  'n')  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.length  >  0  &&  buffer.charAt(buffer.length  -  1)!=  'n')  {	  if(!finished    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
61	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(hasUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(closed    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
62	[BUG]  [BUGGY]  if(!closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(closed    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
63	[BUG]  [BUGGY]  if(!closed  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(closed    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
64	[BUG]  [BUGGY]  if(finish  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finish  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finish  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(closed    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
65	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
66	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
67	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
68	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
69	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_ERROR))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_ERROR))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
70	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_EXTENDS))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_EXTENDS))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_EXTENDS))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
71	[BUG]  [BUGGY]  if(!finished  &&  haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  haveUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  haveUnclosedEntry)  {	  if(!finished    &&    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
72	[BUG]  [BUGGY]  if(!finished  &&  hasUnclosedEntry  ||  buffer.isEnabled())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  hasUnclosedEntry  ||  buffer.isEnabled())  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  hasUnclosedEntry  ||  buffer.isEnabled())  {	  if(!finished    &&    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
73	[BUG]  [BUGGY]  if(!clone)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!clone)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!clone)  {	  if(clone)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
74	[BUG]  [BUGGY]  if(!finished  ||  haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  ||  haveUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  haveUnclosedEntry)  {	  if(!finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
75	[BUG]  [BUGGY]  if(!finished  ||  hasUnclosedEntry  ||  writeEOFRecord())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  ||  hasUnclosedEntry  ||  writeEOFRecord())  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  hasUnclosedEntry  ||  writeEOFRecord())  {	  if(!finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
76	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FILE_ERROR)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FILE_ERROR)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FILE_ERROR)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_NON_NULL_OBJECT))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
77	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_NON_NULL_OBJECT))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
78	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_PREFIX)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_PREFIX)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_PREFIX)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_NON_NULL_OBJECT))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
79	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_NON_NULL_OBJECT))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
80	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_FLOAT_OBJECT))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_FLOAT_OBJECT))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NON_FLOAT_OBJECT))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_NON_NULL_OBJECT))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
81	[BUG]  [BUGGY]  if(!this.closed)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!this.closed)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!this.closed)  {	  if(this.closed)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
82	[BUG]  [BUGGY]  if(this.closedEntry)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.closedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.closedEntry)  {	  if(this.closed)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
83	[BUG]  [BUGGY]  if(!closed  &&  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  &&  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  &&  hasUnclosedEntry)  {	  if(!closed    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
84	[BUG]  [BUGGY]  if(!closed  ||  haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  ||  haveUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  ||  haveUnclosedEntry)  {	  if(!closed    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
85	[BUG]  [BUGGY]  if(!finish  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finish  ||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finish  ||  hasUnclosedEntry)  {	  if(!closed    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
86	[BUG]  [BUGGY]  if(this.finished  ||  haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.finished  ||  haveUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finished  ||  haveUnclosedEntry)  {	  if(this.finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
87	[BUG]  [BUGGY]  if(haveUnclosedEntry  ||  this.finished)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(haveUnclosedEntry  ||  this.finished)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(haveUnclosedEntry  ||  this.finished)  {	  if(this.finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
88	[BUG]  [BUGGY]  if(this.finished)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.finished)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finished)  {	  if(this.finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
89	[BUG]  [BUGGY]  if(!this.finished  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!this.finished  ||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!this.finished  ||  hasUnclosedEntry)  {	  if(this.finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
90	[BUG]  [BUGGY]  if(hasUnclosedEntry  ||  this.finished)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(hasUnclosedEntry  ||  this.finished)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(hasUnclosedEntry  ||  this.finished)  {	  if(this.finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
91	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(buffer!=  null  ||  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(buffer!=  null  ||  buffer.length!=  0)  {	  if(finished    ||    buffer.length!=    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
92	[BUG]  [BUGGY]  if(finished  ||  buffer.length  >=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  buffer.length  >=  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  buffer.length  >=  0)  {	  if(finished    ||    buffer.length!=    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
93	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.AUTO_CLOSE_ERROR))  {	  if(!finish)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
94	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
95	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_FILE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
96	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
97	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!cloned)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!cloned)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!cloned)  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
98	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!cloned)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!cloned)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&!cloned)  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
99	[BUG]  [BUGGY]  if(isFinallyEnabled(Feature.QUOTE_FIELD_NAMES)||!cloned)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isFinallyEnabled(Feature.QUOTE_FIELD_NAMES)||!cloned)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isFinallyEnabled(Feature.QUOTE_FIELD_NAMES)||!cloned)  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
100	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_LOAD_FILE))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
101	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_LOAD_FILE))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
102	[BUG]  [BUGGY]  if(!closed  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_LOAD_FILE))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
103	[BUG]  [BUGGY]  if(!closed  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_LOAD_FILE))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
104	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_LOAD_FILE)||  isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_LOAD_FILE)||  isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(TarBuffer.DEFAULT_LOAD_FILE)||  isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_LOAD_FILE))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
105	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_LOAD_FILE)||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_LOAD_FILE)||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(TarBuffer.DEFAULT_LOAD_FILE)||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_LOAD_FILE))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
106	[BUG]  [BUGGY]  if(finished  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!finished    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
107	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasUnclosedEntry)  {	  if(!finished    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
108	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(!finished    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
109	[BUG]  [BUGGY]  if(!this.finish)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!this.finish)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!this.finish)  {	  if(this.finish)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
110	[BUG]  [BUGGY]  if(!finished  ||  isEnabled(TarBuffer.this))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  ||  isEnabled(TarBuffer.this))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  isEnabled(TarBuffer.this))  {	  if(!finished    &&    isEnabled(TarBuffer.this))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
111	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.this))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.this))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(TarBuffer.this))  {	  if(!finished    &&    isEnabled(TarBuffer.this))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
112	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {	  if(!finished    &&    isEnabled(TarBuffer.this))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
113	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {	  if(!finished    &&    isEnabled(TarBuffer.this))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
114	[BUG]  [BUGGY]  if(finished  ||  isEnabled(TarBuffer.this))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  isEnabled(TarBuffer.this))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  isEnabled(TarBuffer.this))  {	  if(!finished    &&    isEnabled(TarBuffer.this))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
115	[BUG]  [BUGGY]  final  OutputStream  out  =  this.os.getOutputStream();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  this.os.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  this.os.getOutputStream();	  final    OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
116	[BUG]  [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  buffer.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  buffer.getOutputStream();	  final    OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
117	[BUG]  [BUGGY]  final  OutputStream  out  =  TarBuffer.getOutputStream();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  TarBuffer.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  TarBuffer.getOutputStream();	  final    OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
118	[BUG]  [BUGGY]  final  OutputStream  out  =  os.getErrorStream();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  os.getErrorStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  os.getErrorStream();	  final    OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
119	[BUG]  [BUGGY]  final  OutputStream  out  =  os.getInputStream();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  os.getInputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  os.getInputStream();	  final    OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
120	[BUG]  [BUGGY]  OutputStream  out  =  this.getErrorStream();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.getErrorStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  this.getErrorStream();	  OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
121	[BUG]  [BUGGY]  OutputStream  out  =  this.getArchiveOutputStream();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.getArchiveOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  this.getArchiveOutputStream();	  OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
122	[BUG]  [BUGGY]  OutputStream  out  =  this.getInputStream();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.getInputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  this.getInputStream();	  OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
123	[BUG]  [BUGGY]  OutputStream  out  =  this.getOutputStream(true);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.getOutputStream(true);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  this.getOutputStream(true);	  OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
124	[BUG]  [BUGGY]  OutputStream  out  =  this.getRecordSize();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.getRecordSize();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  this.getRecordSize();	  OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
125	[BUG]  [BUGGY]  if(!closed  ||  buffer.isEnabled())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  ||  buffer.isEnabled())  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  ||  buffer.isEnabled())  {	  if(!finished    ||    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
126	[BUG]  [BUGGY]  if(isEnabled()||  buffer.isEnabled())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled()||  buffer.isEnabled())  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled()||  buffer.isEnabled())  {	  if(!finished    ||    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
127	[BUG]  [BUGGY]  if(closed  ||  finished)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  finished)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  finished)  {	  if(haveUnclosedEntry    ||    finished)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
128	[BUG]  [BUGGY]  if(closed  ||  finish)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  finish)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  finish)  {	  if(haveUnclosedEntry    ||    finished)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
129	[BUG]  [BUGGY]  if(!closed  ||  finished)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  ||  finished)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  ||  finished)  {	  if(haveUnclosedEntry    ||    finished)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
130	[BUG]  [BUGGY]  if(haveUnclosedEntry  ||  finish)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(haveUnclosedEntry  ||  finish)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(haveUnclosedEntry  ||  finish)  {	  if(finish    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
131	[BUG]  [BUGGY]  if(closed  ||  haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  haveUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  haveUnclosedEntry)  {	  if(finished    ||    haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
132	[BUG]  [BUGGY]  if(closed  ||  archive!=  null)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  archive!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  archive!=  null)  {	  if(finished    ||    archive!=    null)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
133	[BUG]  [BUGGY]  if(haveUnclosedEntry  ||  archive!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(haveUnclosedEntry  ||  archive!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(haveUnclosedEntry  ||  archive!=  null)  {	  if(finished    ||    archive!=    null)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
134	[BUG]  [BUGGY]  if(closed  ||  archive  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  archive  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  archive  ==  null)  {	  if(finished    ||    archive!=    null)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
135	[BUG]  [BUGGY]  OutputStream  out  =  System.err;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  System.err;  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  System.err;	  OutputStream    out    =    System.out;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
136	[BUG]  [BUGGY]  OutputStream  out  =  new  BufferedOutputStream();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  BufferedOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  new  BufferedOutputStream();	  OutputStream    out    =    System.out;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
137	[BUG]  [BUGGY]  OutputStream  out  =  new  BufferedOutputStream(System.out);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  BufferedOutputStream(System.out);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  new  BufferedOutputStream(System.out);	  OutputStream    out    =    System.out;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
138	[BUG]  [BUGGY]  OutputStream  out  =  os.out;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  os.out;  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  os.out;	  OutputStream    out    =    System.out;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
139	[BUG]  [BUGGY]  OutputStream  out  =  this.archives.out;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.archives.out;  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  this.archives.out;	  OutputStream    out    =    System.out;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
140	[BUG]  [BUGGY]  OutputStream  out  =  TarBuffer.out;  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  TarBuffer.out;  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  TarBuffer.out;	  OutputStream    out    =    System.out;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
141	[BUG]  [BUGGY]  if(finished  &&  buffer.isEnabled())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  &&  buffer.isEnabled())  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  &&  buffer.isEnabled())  {	  if(finished    ||    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
142	[BUG]  [BUGGY]  if(finished  ||  buffer.isEnabled()  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  buffer.isEnabled()  ||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  buffer.isEnabled()  ||  hasUnclosedEntry)  {	  if(finished    ||    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
143	[BUG]  [BUGGY]  if(haveUnclosedEntry  ||  closed)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(haveUnclosedEntry  ||  closed)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(haveUnclosedEntry  ||  closed)  {	  if(closed    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
144	[BUG]  [BUGGY]  if(haveUnclosed  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(haveUnclosed  ||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(haveUnclosed  ||  hasUnclosedEntry)  {	  if(closed    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
145	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(TarBuffer.DEFAULT_LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(TarBuffer.DEFAULT_LONGFILE_ERROR);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(TarBuffer.DEFAULT_LONGFILE_ERROR);	  os.flush();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
146	[BUG]  [BUGGY]  os.write('n');  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  os.write('n');  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	os.write('n');	  os.flush();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
147	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(TarBuffer.DEFAULT_FILE_ERROR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(TarBuffer.DEFAULT_FILE_ERROR);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(TarBuffer.DEFAULT_FILE_ERROR);	  os.flush();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
148	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(TarBuffer.DEFAULT_LIST_ERROR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(TarBuffer.DEFAULT_LIST_ERROR);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(TarBuffer.DEFAULT_LIST_ERROR);	  os.flush();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
149	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(TarBuffer.DEFAULT_LAST_ERROR);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(TarBuffer.DEFAULT_LAST_ERROR);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(TarBuffer.DEFAULT_LAST_ERROR);	  os.flush();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
150	[BUG]  [BUGGY]  out.flush();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  out.flush();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	out.flush();	  out.close();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
151	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemLen);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  out.write(assemBuf,  0,  assemLen);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	out.write(assemBuf,  0,  assemLen);	  out.close();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
152	[BUG]  [BUGGY]  out.defaultWriteObject();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  out.defaultWriteObject();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	out.defaultWriteObject();	  out.close();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
153	[BUG]  [BUGGY]  out.write(assemBuf,  0,  currSize);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  out.write(assemBuf,  0,  currSize);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	out.write(assemBuf,  0,  currSize);	  out.close();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
154	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buf.length);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  out.write(assemBuf,  0,  buf.length);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	out.write(assemBuf,  0,  buf.length);	  out.close();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
155	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled()  &&  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.isEnabled()  &&  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.isEnabled()  &&  hasUnclosedEntry)  {	  if(!finished    &&    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
156	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled()  &&  isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.isEnabled()  &&  isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.isEnabled()  &&  isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {	  if(!finished    &&    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
157	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled()  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.isEnabled()  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.isEnabled()  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FILE_ERROR))  {	  if(!finished    &&    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
158	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled()  &&  writeEOFRecord())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.isEnabled()  &&  writeEOFRecord())  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.isEnabled()  &&  writeEOFRecord())  {	  if(!finished    &&    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
159	[BUG]  [BUGGY]  if(!finish  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finish  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finish  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!finished    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
160	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {	  if(!finished    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
161	[BUG]  [BUGGY]  if(this.finish  ||  haveUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.finish  ||  haveUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finish  ||  haveUnclosedEntry)  {	  if(finish    ||    haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
162	[BUG]  [BUGGY]  if(finish  ||  closed)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finish  ||  closed)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finish  ||  closed)  {	  if(finish    ||    haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
163	[BUG]  [BUGGY]  final  OutputStream  out  =  this.getErrorStream();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  this.getErrorStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  this.getErrorStream();	  final    OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
164	[BUG]  [BUGGY]  final  OutputStream  out  =  this.getArchiveOutputStream();  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  this.getArchiveOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  this.getArchiveOutputStream();	  final    OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
165	[BUG]  [BUGGY]  final  OutputStream  out  =  this.getInputStream();  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  this.getInputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  this.getInputStream();	  final    OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
166	[BUG]  [BUGGY]  final  OutputStream  out  =  this.getRecordSize();  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  this.getRecordSize();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  this.getRecordSize();	  final    OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
167	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName,  assemLen);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName,  assemLen);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(currName,  assemLen);	  final    OutputStream    out    =    new    FileOutputStream(currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
168	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR);	  final    OutputStream    out    =    new    FileOutputStream(currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
169	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_GNU))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_GNU))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_GNU))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
170	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
171	[BUG]  [BUGGY]  if(!cloned  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!cloned  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!cloned  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
172	[BUG]  [BUGGY]  if(!cloned  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!cloned  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!cloned  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
173	[BUG]  [BUGGY]  if(!cloned  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!cloned  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!cloned  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
174	[BUG]  [BUGGY]  if(!cloned  &&  isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!cloned  &&  isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!cloned  &&  isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
175	[BUG]  [BUGGY]  if(!cloned  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!cloned  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!cloned  &&  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
176	[BUG]  [BUGGY]  if(cloned  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cloned  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(cloned  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(cloned)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
177	[BUG]  [BUGGY]  if(cloned  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cloned  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(cloned  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(cloned)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
178	[BUG]  [BUGGY]  if(cloned  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cloned  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(cloned  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {	  if(cloned)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
179	[BUG]  [BUGGY]  if(cloned  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cloned  ||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(cloned  ||  hasUnclosedEntry)  {	  if(cloned)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
180	[BUG]  [BUGGY]  if(this.closed  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.closed  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.closed  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_FILE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
181	[BUG]  [BUGGY]  if(closed  ||  isEnabled(TarBuffer.DEFAULT_FILE_GNU))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(TarBuffer.DEFAULT_FILE_GNU))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  isEnabled(TarBuffer.DEFAULT_FILE_GNU))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_FILE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
182	[BUG]  [BUGGY]  final  OutputStream  out  =  os.close();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  os.close();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  os.close();	  final    OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
183	[BUG]  [BUGGY]  final  OutputStream  out  =  os.finish();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  os.finish();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  os.finish();	  final    OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
184	[BUG]  [BUGGY]  final  OutputStream  out  =  os.readLine();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  os.readLine();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  os.readLine();	  final    OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
185	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_FILE))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
186	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
187	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.DEFAULT_LOAD_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.DEFAULT_LOAD_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.DEFAULT_LOAD_FILE_ERROR))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
188	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(System.out);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(System.out);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  new  FileOutputStream(System.out);	  OutputStream    out    =    System.out;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
189	[BUG]  [BUGGY]  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  new  FileOutputStream(LONGFILE_ERROR);	  OutputStream    out    =    System.out;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
190	[BUG]  [BUGGY]  if(!cloned  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!cloned  ||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!cloned  ||  hasUnclosedEntry)  {	  if(!finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
191	[BUG]  [BUGGY]  final  OutputStream  out  =  getOutputStream(true);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  getOutputStream(true);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  getOutputStream(true);	  final    OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
192	[BUG]  [BUGGY]  final  OutputStream  out  =  getEndOutputStream();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  getEndOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  getEndOutputStream();	  final    OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
193	[BUG]  [BUGGY]  if(closed  ||  getFullName()!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  getFullName()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  getFullName()!=  null)  {	  if(haveUnclosedEntry    ||    finished)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
194	[BUG]  [BUGGY]  if(haveUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(haveUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(haveUnclosedEntry  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(closed    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
195	[BUG]  [BUGGY]  if(closed  ||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  isEnabled(Feature.QUOTE_FIELD_FILE))  {	  if(closed    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
196	[BUG]  [BUGGY]  if(finished  ||  archive  ==  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  archive  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  archive  ==  null)  {	  if(finished    ||    buffer    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
197	[BUG]  [BUGGY]  if(!finished)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished)  {  buffer.flush();  }  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished)  {  buffer.flush();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
198	[BUG]  [BUGGY]  if(finish)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finish)  {  buffer.close();  }  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finish)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
199	[BUG]  [BUGGY]  if(!closed)  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed)  {  buffer.close();  }  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed)  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
200	[BUG]  [BUGGY]  if(finished)  {  buffer.flush();  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished)  {  buffer.flush();  }  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished)  {  buffer.flush();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
201	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_ERROR)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_ERROR)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_ERROR)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
202	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_FILE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
203	[BUG]  [BUGGY]  if(!cloned  &&  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!cloned  &&  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!cloned  &&  hasUnclosedEntry)  {	  if(!closed    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
204	[BUG]  [BUGGY]  if(!closed  ||  hasFinished)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  ||  hasFinished)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  ||  hasFinished)  {	  if(!closed    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
205	[BUG]  [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  buffer.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  buffer.getOutputStream();	  OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
206	[BUG]  [BUGGY]  OutputStream  out  =  this.getOutputStream(assemBuf);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.getOutputStream(assemBuf);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  this.getOutputStream(assemBuf);	  OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
207	[BUG]  [BUGGY]  if(!finished  ||  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  ||  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(!finish)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
208	[BUG]  [BUGGY]  if(!finished  ||  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  ||  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {	  if(!finish)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
209	[BUG]  [BUGGY]  if(!finished  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!finish)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
210	[BUG]  [BUGGY]  if(!finished  ||  buffer.isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  ||  buffer.isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  buffer.isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {	  if(!finish)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
211	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FILE_ERROR))  {	  if(!finished    &&    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
212	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(!finished    &&    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
213	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {	  if(!finished    &&    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
214	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LPAREN_ERROR))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LPAREN_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LPAREN_ERROR))  {	  if(!finished    &&    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
215	[BUG]  [BUGGY]  if(haveUnclosedEntry  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(haveUnclosedEntry  ||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(haveUnclosedEntry  ||  hasUnclosedEntry)  {	  if(closed    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
216	[BUG]  [BUGGY]  if(closed  ||  hasFinished)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  hasFinished)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  hasFinished)  {	  if(closed    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
217	[BUG]  [BUGGY]  out.write('n');  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  out.write('n');  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	out.write('n');	  out.close();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
218	[BUG]  [BUGGY]  out.write(assemBuf,  0,  assemSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  out.write(assemBuf,  0,  assemSize);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	out.write(assemBuf,  0,  assemSize);	  out.close();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
219	[BUG]  [BUGGY]  out.write(assemBuf,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  out.write(assemBuf,  0,  buffer.length);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	out.write(assemBuf,  0,  buffer.length);	  out.close();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
220	[BUG]  [BUGGY]  if(haveUnclosedEntry  ||!closed)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(haveUnclosedEntry  ||!closed)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(haveUnclosedEntry  ||!closed)  {	  if(!closed)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
221	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
222	[BUG]  [BUGGY]  if(!this.finished)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!this.finished)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!this.finished)  {	  if(this.closed)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
223	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_OBJECT)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_NON_NULL_OBJECT)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_NON_NULL_OBJECT)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_NON_NULL_OBJECT))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
224	[BUG]  [BUGGY]  os.writeEndByteBuffer();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  os.writeEndByteBuffer();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	os.writeEndByteBuffer();	  os.close();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
225	[BUG]  [BUGGY]  os.finish();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  os.finish();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	os.finish();	  os.close();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
226	[BUG]  [BUGGY]  os.writeEndByteArray();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  os.writeEndByteArray();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	os.writeEndByteArray();	  os.close();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
227	[BUG]  [BUGGY]  final  OutputStream  out  =  this.recordBuf.getOutputStream();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  this.recordBuf.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  this.recordBuf.getOutputStream();	  final    OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
228	[BUG]  [BUGGY]  final  OutputStream  out  =  this.getOutputStream(true);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  this.getOutputStream(true);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  this.getOutputStream(true);	  final    OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
229	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "Current  archive  has  already  been  finished ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  System.err.println( "Current  archive  has  already  been  finished ");  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  System.err.println( "Current  archive  has  already  been  finished ");	  os.flush();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
230	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.finish()  -  finish ");  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.finish()  -  finish ");  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.finish()  -  finish ");	  os.flush();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
231	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.finish()  -  finished ");  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.finish()  -  finished ");  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.finish()  -  finished ");	  os.flush();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
232	[BUG]  [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.finish()  :  finished ");  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  System.err.println( "TarBuffer.finish()  :  finished ");  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  System.err.println( "TarBuffer.finish()  :  finished ");	  os.flush();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
233	[BUG]  [BUGGY]  if(!closed  &&  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  &&  buffer!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  &&  buffer!=  null)  {	  if(closed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
234	[BUG]  [BUGGY]  if(closed  ||  recordBuf  ==  null)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  recordBuf  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  recordBuf  ==  null)  {	  if(closed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
235	[BUG]  [BUGGY]  if(!finished  &&  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer!=  null)  {	  if(closed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
236	[BUG]  [BUGGY]  if(finished  &&  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  &&  buffer.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  &&  buffer.length  ==  0)  {	  if(finished    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
237	[BUG]  [BUGGY]  if(this.archives!=  null)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.archives!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.archives!=  null)  {	  if(this.finish)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
238	[BUG]  [BUGGY]  if(this.archives  ==  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.archives  ==  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.archives  ==  null)  {	  if(this.finish)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
239	[BUG]  [BUGGY]  if(this.finished!=  false)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.finished!=  false)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finished!=  false)  {	  if(this.finish)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
240	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  buffer.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  buffer.isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  buffer.isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!finished    ||    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
241	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!finished    ||    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
242	[BUG]  [BUGGY]  if(finished  ||  assemLen  >  0)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  assemLen  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  assemLen  >  0)  {	  if(finished    ||    haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
243	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.this,  archive))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.this,  archive))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(TarBuffer.this,  archive))  {	  if(!finished    &&    isEnabled(TarBuffer.this))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
244	[BUG]  [BUGGY]  if(!closed  &&  isEnabled(TarBuffer.this))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!closed  &&  isEnabled(TarBuffer.this))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!closed  &&  isEnabled(TarBuffer.this))  {	  if(!finished    &&    isEnabled(TarBuffer.this))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
245	[BUG]  [BUGGY]  if(this.closed  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.closed  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.closed  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_LOAD_FILE))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
246	[BUG]  [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_LPAREN_FILE))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(TarBuffer.DEFAULT_LPAREN_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(TarBuffer.DEFAULT_LPAREN_FILE))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_LOAD_FILE))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
247	[BUG]  [BUGGY]  if(this.finished  ||  hasReadEOFRecord)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.finished  ||  hasReadEOFRecord)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finished  ||  hasReadEOFRecord)  {	  if(this.finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
248	[BUG]  [BUGGY]  if(this.finished  ||  hasReader)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.finished  ||  hasReader)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finished  ||  hasReader)  {	  if(this.finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
249	[BUG]  [BUGGY]  if(this.finished  ||  hasReadIOException)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.finished  ||  hasReadIOException)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finished  ||  hasReadIOException)  {	  if(this.finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
250	[BUG]  [BUGGY]  if(!finished  ||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  ||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  isEnabled(Feature.QUOTE_FIELD_FILE))  {	  if(!finished    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
251	[BUG]  [BUGGY]  if(!cloned  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!cloned  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!cloned  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!finished    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
252	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_FILE))  {	  if(!finished    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
253	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_ERROR))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_ERROR))  {	  if(!finished    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
254	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_FILE)||  isEnabled(Feature.QUOTE_FIELD_FILE))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
255	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_ERROR)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
256	[BUG]  [BUGGY]  if(finished  &&  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  &&  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  &&  buffer.length!=  0)  {	  if(finished    ||    buffer.length!=    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
257	[BUG]  [BUGGY]  if(!finished  &&  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.length!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.length!=  0)  {	  if(finished    ||    buffer.length!=    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
258	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(true);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(true);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  getOutputStream(true);	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
259	[BUG]  [BUGGY]  if(this.finished  ||  buffer.isEnabled())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.finished  ||  buffer.isEnabled())  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finished  ||  buffer.isEnabled())  {	  if(finished    ||    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
260	[BUG]  [BUGGY]  OutputStream  out  =  this.recordBuf.getOutputStream();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.recordBuf.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  this.recordBuf.getOutputStream();	  OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
261	[BUG]  [BUGGY]  OutputStream  out  =  this.releaseArchiveOutputStream();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  this.releaseArchiveOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  this.releaseArchiveOutputStream();	  OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
262	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE_ERROR)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_FILE_ERROR)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_FILE_ERROR)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
263	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LOAD_FIRST))  {	  if(!finished    &&    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
264	[BUG]  [BUGGY]  if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.isEnabled(TarBuffer.DEFAULT_LONGFILE_ERROR))  {	  if(!finished    &&    buffer.isEnabled())    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
265	[BUG]  [BUGGY]  if(this.finish  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.finish  ||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finish  ||  hasUnclosedEntry)  {	  if(finish    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
266	[BUG]  [BUGGY]  if(finish  ||  hasStarted)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finish  ||  hasStarted)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finish  ||  hasStarted)  {	  if(finish    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
267	[BUG]  [BUGGY]  if(this.closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.closed  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(closed    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
268	[BUG]  [BUGGY]  if(this.finish  >  0)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.finish  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finish  >  0)  {	  if(this.finish)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
269	[BUG]  [BUGGY]  if(this.closed  ||  buffer!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.closed  ||  buffer!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.closed  ||  buffer!=  null)  {	  if(closed    ||    buffer!=    null)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
270	[BUG]  [BUGGY]  if(finished  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  isEnabled(TarBuffer.DEFAULT_LOAD_FILE))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_LOAD_FILE))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
271	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  buffer.close();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  buffer.close();  }  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  buffer.close();  }	  if(!finished)    {    buffer.close();    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
272	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_TRY))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_TRY))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_TRY))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
273	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SECTION))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SECTION))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SECTION))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
274	[BUG]  [BUGGY]  if(finish  ||  haveUnclosedEntry  ||  writeEOFRecord())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finish  ||  haveUnclosedEntry  ||  writeEOFRecord())  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finish  ||  haveUnclosedEntry  ||  writeEOFRecord())  {	  if(finish    ||    haveUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
275	[BUG]  [BUGGY]  if(!cloned  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!cloned  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!cloned  &&  buffer.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!cloned)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
276	[BUG]  [BUGGY]  if(finished  ||  archive.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  archive.length  ==  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  archive.length  ==  0)  {	  if(finished    ||    buffer    ==    null)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
277	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE))  {	  if(!finished    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
278	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
279	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME  +  1))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME  +  1))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME  +  1))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
280	[BUG]  [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName,  0);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  new  FileOutputStream(currName,  0);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  new  FileOutputStream(currName,  0);	  final    OutputStream    out    =    new    FileOutputStream(currName);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
281	[BUG]  [BUGGY]  if(finished  ||  buffer.length  <  LONGFILE_GNU)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  buffer.length  <  LONGFILE_GNU)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  buffer.length  <  LONGFILE_GNU)  {	  if(finished    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
282	[BUG]  [BUGGY]  if(finished  ||  buffer.length  <  2  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  buffer.length  <  2  ||  buffer.length  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  buffer.length  <  2  ||  buffer.length  >  0)  {	  if(finished    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
283	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FILE_GNU)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FILE_GNU)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FILE_GNU)||  isEnabled(Feature.QUOTE_NON_NULL_OBJECT))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_NON_NULL_OBJECT))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
284	[BUG]  [BUGGY]  final  OutputStream  out  =  os.toByteArray();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  final  OutputStream  out  =  os.toByteArray();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	final  OutputStream  out  =  os.toByteArray();	  final    OutputStream    out    =    os.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
285	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.this,  closed))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.this,  closed))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(TarBuffer.this,  closed))  {	  if(!finished    &&    isEnabled(TarBuffer.this))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
286	[BUG]  [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.this,  close))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  isEnabled(TarBuffer.this,  close))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  isEnabled(TarBuffer.this,  close))  {	  if(!finished    &&    isEnabled(TarBuffer.this))    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
287	[BUG]  [BUGGY]  OutputStream  out  =  getOutputStream(),  buffer.writeEndBytes();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  getOutputStream(),  buffer.writeEndBytes();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  getOutputStream(),  buffer.writeEndBytes();	  OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
288	[BUG]  [BUGGY]  if(!finished  ||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  ||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  isEnabled(Feature.QUOTE_FIELD_FILE_ERROR))  {	  if(!finished    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
289	[BUG]  [BUGGY]  if(!finished  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  ||  isEnabled(TarBuffer.DEFAULT_FILE_ERROR))  {	  if(closed    ||    isEnabled(TarBuffer.DEFAULT_FILE_ERROR))    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
290	[BUG]  [BUGGY]  if(this.closed  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.closed  ||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.closed  ||  hasUnclosedEntry)  {	  if(closed    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
291	[BUG]  [BUGGY]  if(closed  ||  hasReader)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(closed  ||  hasReader)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(closed  ||  hasReader)  {	  if(closed    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
292	[BUG]  [BUGGY]  byte[]  out  =  this.getOutputStream();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  byte[]  out  =  this.getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	byte[]  out  =  this.getOutputStream();	  final    OutputStream    out    =    this.getOutputStream();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
293	[BUG]  [BUGGY]  if(completed)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(completed)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(completed)  {	  if(haveUnclosed)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
294	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
295	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FILE_GNU))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FILE_GNU))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_FILE_GNU))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
296	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE_GNU))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE_GNU))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_FILE_GNU))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
297	[BUG]  [BUGGY]  if(cloned  >  0)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(cloned  >  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(cloned  >  0)  {	  if(cloned)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
298	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!closed)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!closed)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!closed)  {	  if(!closed)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
299	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!finished)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!finished)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!finished)  {	  if(!closed)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
300	[BUG]  [BUGGY]  if(!finished  &&  buffer.length  >  0  &&  buffer.charAt(buffer.length  -  1)!=  '/')  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finished  &&  buffer.length  >  0  &&  buffer.charAt(buffer.length  -  1)!=  '/')  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finished  &&  buffer.length  >  0  &&  buffer.charAt(buffer.length  -  1)!=  '/')  {	  if(!finished    &&    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
301	[BUG]  [BUGGY]  os.write(assemBuf,  0,  assemSize);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  os.write(assemBuf,  0,  assemSize);  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	os.write(assemBuf,  0,  assemSize);	  os.close();    	non-compiled	[CE]  <identifier>  expected	8	None	replace
302	[BUG]  [BUGGY]  if(finished  ||  archive.length!=  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  archive.length!=  0)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  archive.length!=  0)  {	  if(finished    ||    archive!=    null)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
303	[BUG]  [BUGGY]  if(finished  ||  archive.getName()!=  null)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(finished  ||  archive.getName()!=  null)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(finished  ||  archive.getName()!=  null)  {	  if(finished    ||    archive!=    null)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
304	[BUG]  [BUGGY]  this.os.flush();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  this.os.flush();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	this.os.flush();	  os.flush();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
305	[BUG]  [BUGGY]  byte[]  out  =  getOutputStream();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  byte[]  out  =  getOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	byte[]  out  =  getOutputStream();	  final    OutputStream    out    =    getOutputStream();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
306	[BUG]  [BUGGY]  OutputStream  out  =  new  byte[LONGFILE_ERROR];  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  byte[LONGFILE_ERROR];  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  new  byte[LONGFILE_ERROR];	  OutputStream    out    =    System.out;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
307	[BUG]  [BUGGY]  OutputStream  out  =  new  ByteArrayOutputStream();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  OutputStream  out  =  new  ByteArrayOutputStream();  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	OutputStream  out  =  new  ByteArrayOutputStream();	  OutputStream    out    =    System.out;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
308	[BUG]  [BUGGY]  if(!finish  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(!finish  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(!finish  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!finish)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
309	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!finish)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!finish)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!finish)  {	  if(!finish)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
310	[BUG]  [BUGGY]  if(this.finished  <  =  0  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.finished  <  =  0  ||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finished  <  =  0  ||  hasUnclosedEntry)  {	  if(this.finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
311	[BUG]  [BUGGY]  if(this.finished  >  0  ||  hasUnclosedEntry)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  finish()  throws  IOException  {      [BUGGY]  if(this.finished  >  0  ||  hasUnclosedEntry)  {  [BUGGY]      throw  new  IOException(     "This  archive  has  already  been  finished     ");  }  if(haveUnclosedEntry)  {  throw  new  IOException(     "This  archives  contains  unclosed  entries.     ");  }  writeEOFRecord();  writeEOFRecord();  buffer.flushBlock();  finished  =  true;  [CLASS]  TarArchiveOutputStream  [METHOD]  finish  [RETURN_TYPE]  void  [VARIABLES]  byte[]  assemBuf  recordBuf  boolean  closed  finished  haveUnclosedEntry  OutputStream  os  out  TarBuffer  buffer  String  currName  int  LONGFILE_ERROR  LONGFILE_GNU  LONGFILE_TRUNCATE  assemLen  blockSize  longFileMode  recordSize  long  currBytes  currSize  	projects/Compress9/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java	1.0	121	121	1	replace	if(this.finished  >  0  ||  hasUnclosedEntry)  {	  if(this.finished    ||    hasUnclosedEntry)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
