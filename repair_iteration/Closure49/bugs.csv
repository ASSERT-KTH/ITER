bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] Renamer renamer = nameStack.peek(); [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { [BUGGY] Renamer renamer = nameStack.peek(); [BUGGY] if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION: [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { [BUGGY] [BUGGY] Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION: [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	add	
3	[BUG] [BUGGY] if (renamer.stripConstIfReplaced()) { [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); [BUGGY] if (renamer.stripConstIfReplaced()) { [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION:  [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); [BUGGY] [BUGGY] if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION:  [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	
5	[BUG] [BUGGY] n.setString(newName); [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } [BUGGY] n.setString(newName); [BUGGY] t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION:   nameStack.pop(); break;  [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } [BUGGY] [BUGGY] n.setString(newName); t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION:   nameStack.pop(); break;  [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	
7	[BUG] [BUGGY] t.getCompiler().reportCodeChange(); [FE] AssertionFailedError [CONTEXT] switch (n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); [BUGGY] t.getCompiler().reportCodeChange(); [BUGGY] } break; case Token.FUNCTION:   nameStack.pop(); break;   [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] switch (n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); [BUGGY] [BUGGY] t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION:   nameStack.pop(); break;   [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	
9	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); [BUGGY] } [BUGGY] break; case Token.FUNCTION:   nameStack.pop(); break;    [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); [BUGGY] [BUGGY] } break; case Token.FUNCTION:   nameStack.pop(); break;    [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	add	
11	[BUG] [BUGGY] return newName; [FE] AssertionFailedError [CONTEXT] private String getReplacementName(String oldName) { for (Renamer names : nameStack) { String newName = names.getReplacementName(oldName); if (newName != null) { [BUGGY] return newName; [BUGGY] } } return null; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] getReplacementName [RETURN_TYPE] String  String oldName [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private String getReplacementName(String oldName) { for (Renamer names : nameStack) { String newName = names.getReplacementName(oldName); if (newName != null) { [BUGGY] [BUGGY] return newName; } } return null; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] getReplacementName [RETURN_TYPE] String  String oldName [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	196	196	66	add	
13	[BUG] [BUGGY] renamer.addDeclaredName(n.getString()); [FE] AssertionFailedError [CONTEXT] private void findDeclaredNames(Node n, Node parent, Renamer renamer) {   if (parent == null || parent.getType() != Token.FUNCTION || n == parent.getFirstChild()) { if (NodeUtil.isVarDeclaration(n)) { [BUGGY] renamer.addDeclaredName(n.getString()); [BUGGY] } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); renamer.addDeclaredName(nameNode.getString()); } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { findDeclaredNames(c, n, renamer); } } } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] findDeclaredNames [RETURN_TYPE] void  Node n Node parent Renamer renamer [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Node c n nameNode parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5462115958472655	213	213	66	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void findDeclaredNames(Node n, Node parent, Renamer renamer) {   if (parent == null || parent.getType() != Token.FUNCTION || n == parent.getFirstChild()) { if (NodeUtil.isVarDeclaration(n)) { [BUGGY] [BUGGY] renamer.addDeclaredName(n.getString()); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); renamer.addDeclaredName(nameNode.getString()); } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { findDeclaredNames(c, n, renamer); } } } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] findDeclaredNames [RETURN_TYPE] void  Node n Node parent Renamer renamer [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Node c n nameNode parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5462115958472655	213	213	66	add	
15	[BUG] [BUGGY] String name = c.getString(); [FE] AssertionFailedError [CONTEXT] declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { [BUGGY] String name = c.getString(); [BUGGY] renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { [BUGGY] [BUGGY] String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	add	
17	[BUG] [BUGGY] renamer.addDeclaredName(name); [FE] AssertionFailedError [CONTEXT] !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); [BUGGY] renamer.addDeclaredName(name); [BUGGY] } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	94	94	66	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); [BUGGY] [BUGGY] renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	94	94	66	add	
19	[BUG] [BUGGY] renamer = nameStack.peek().forChildScope(); [FE] AssertionFailedError [CONTEXT] if (nameStack.isEmpty()) {   Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { [BUGGY] renamer = nameStack.peek().forChildScope(); [BUGGY] } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	88	88	66	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (nameStack.isEmpty()) {   Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { [BUGGY] [BUGGY] renamer = nameStack.peek().forChildScope(); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	88	88	66	add	
21	[BUG] [BUGGY] for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { [FE] AssertionFailedError [CONTEXT] Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { [BUGGY] for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { [BUGGY] String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	92	92	66	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { [BUGGY] [BUGGY] for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	92	92	66	add	
23	[BUG] [BUGGY] Node functionBody = declarationRoot.getLastChild(); [FE] AssertionFailedError [CONTEXT] renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } [BUGGY] Node functionBody = declarationRoot.getLastChild(); [BUGGY] findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	96	96	66	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } [BUGGY] [BUGGY] Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	96	96	66	add	
25	[BUG] [BUGGY] findDeclaredNames(functionBody, null, renamer); [FE] AssertionFailedError [CONTEXT] } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); [BUGGY] findDeclaredNames(functionBody, null, renamer); [BUGGY] }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	97	97	66	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); [BUGGY] [BUGGY] findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	97	97	66	add	
27	[BUG] [BUGGY] }else if (declarationRoot.getType() != Token.FUNCTION) { [FE] AssertionFailedError [CONTEXT] renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); [BUGGY] }else if (declarationRoot.getType() != Token.FUNCTION) { [BUGGY] if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	98	99	66	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); [BUGGY] [BUGGY] }else if (declarationRoot.getType() != Token.FUNCTION) { if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	98	99	66	add	
29	[BUG] [BUGGY] nameStack.pop(); [FE] AssertionFailedError [CONTEXT] public void exitScope(NodeTraversal t) { if (!t.inGlobalScope()) { [BUGGY] nameStack.pop(); [BUGGY] } } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] exitScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	109	109	66	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void exitScope(NodeTraversal t) { if (!t.inGlobalScope()) { [BUGGY] [BUGGY] nameStack.pop(); } } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] exitScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	109	109	66	add	
31	[BUG] [BUGGY] Renamer renamer = nameStack.peek().forChildScope(); [FE] AssertionFailedError [CONTEXT] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.FUNCTION: {   [BUGGY] Renamer renamer = nameStack.peek().forChildScope(); [BUGGY]   String name = n.getFirstChild().getString(); if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) { renamer.addDeclaredName(name); }   [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	121	121	66	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.FUNCTION: {   [BUGGY] [BUGGY] Renamer renamer = nameStack.peek().forChildScope();  String name = n.getFirstChild().getString(); if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) { renamer.addDeclaredName(name); }   [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	121	121	66	add	
33	[BUG] [BUGGY] String name = n.getFirstChild().getString(); [FE] AssertionFailedError [CONTEXT] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.FUNCTION: {   Renamer renamer = nameStack.peek().forChildScope();  [BUGGY] String name = n.getFirstChild().getString(); [BUGGY] if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) { renamer.addDeclaredName(name); }     [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	124	124	66	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.FUNCTION: {   Renamer renamer = nameStack.peek().forChildScope();  [BUGGY] [BUGGY] String name = n.getFirstChild().getString(); if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) { renamer.addDeclaredName(name); }     [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	124	124	66	add	
35	[BUG] [BUGGY] if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) { [FE] AssertionFailedError [CONTEXT] switch (n.getType()) { case Token.FUNCTION: {   Renamer renamer = nameStack.peek().forChildScope();  String name = n.getFirstChild().getString(); [BUGGY] if (name != null && !name.isEmpty() && parent != null    && !NodeUtil.isFunctionDeclaration(n)) { [BUGGY] && !NodeUtil.isFunctionDeclaration(n)) { renamer.addDeclaredName(name); }      [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	125	126	66	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] switch (n.getType()) { case Token.FUNCTION: {   Renamer renamer = nameStack.peek().forChildScope();  String name = n.getFirstChild().getString(); [BUGGY] [BUGGY] if (name != null && !name.isEmpty() && parent != null    && !NodeUtil.isFunctionDeclaration(n)) { && !NodeUtil.isFunctionDeclaration(n)) { renamer.addDeclaredName(name); }      [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	125	126	66	add	
37	[BUG] [BUGGY] nameStack.push(renamer); [FE] AssertionFailedError [CONTEXT] && !NodeUtil.isFunctionDeclaration(n)) { renamer.addDeclaredName(name); }     [BUGGY] nameStack.push(renamer); [BUGGY] } break; case Token.CATCH: { Renamer renamer = nameStack.peek().forChildScope(); String name = n.getFirstChild().getString(); renamer.addDeclaredName(name);  [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	136	136	66	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] && !NodeUtil.isFunctionDeclaration(n)) { renamer.addDeclaredName(name); }     [BUGGY] [BUGGY] nameStack.push(renamer); } break; case Token.CATCH: { Renamer renamer = nameStack.peek().forChildScope(); String name = n.getFirstChild().getString(); renamer.addDeclaredName(name);  [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	136	136	66	add	
39	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT] }     nameStack.push(renamer); } [BUGGY] break; [BUGGY]  case Token.CATCH: { Renamer renamer = nameStack.peek().forChildScope(); String name = n.getFirstChild().getString(); renamer.addDeclaredName(name); nameStack.push(renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	138	138	66	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }     nameStack.push(renamer); } [BUGGY] [BUGGY] break; case Token.CATCH: { Renamer renamer = nameStack.peek().forChildScope(); String name = n.getFirstChild().getString(); renamer.addDeclaredName(name); nameStack.push(renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	138	138	66	add	
41	[BUG] [BUGGY] nameStack.pop(); [FE] AssertionFailedError [CONTEXT] n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION:   [BUGGY] nameStack.pop(); [BUGGY] break;     case Token.CATCH:  nameStack.pop(); break; [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	174	174	66	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION:   [BUGGY] [BUGGY] nameStack.pop(); break;     case Token.CATCH:  nameStack.pop(); break; [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	174	174	66	add	
43	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT] } n.setString(newName); t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION:   nameStack.pop(); [BUGGY] break; [BUGGY]     case Token.CATCH:  nameStack.pop(); break; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	175	175	66	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } n.setString(newName); t.getCompiler().reportCodeChange(); } break; case Token.FUNCTION:   nameStack.pop(); [BUGGY] [BUGGY] break;     case Token.CATCH:  nameStack.pop(); break; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	175	175	66	add	
45	[BUG] [BUGGY] findDeclaredNames(c, n, renamer); [FE] AssertionFailedError [CONTEXT] || parent.getType() != Token.FUNCTION || n == parent.getFirstChild()) { if (NodeUtil.isVarDeclaration(n)) { renamer.addDeclaredName(n.getString()); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); renamer.addDeclaredName(nameNode.getString()); } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [BUGGY] findDeclaredNames(c, n, renamer); [BUGGY] } } } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] findDeclaredNames [RETURN_TYPE] void  Node n Node parent Renamer renamer [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Node c n nameNode parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	220	220	66	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] || parent.getType() != Token.FUNCTION || n == parent.getFirstChild()) { if (NodeUtil.isVarDeclaration(n)) { renamer.addDeclaredName(n.getString()); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); renamer.addDeclaredName(nameNode.getString()); } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [BUGGY] [BUGGY] findDeclaredNames(c, n, renamer); } } } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] findDeclaredNames [RETURN_TYPE] void  Node n Node parent Renamer renamer [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Node c n nameNode parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47542338737200757	220	220	66	add	
47	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] private String getReplacementName(String oldName) { for (Renamer names : nameStack) { String newName = names.getReplacementName(oldName); if (newName != null) { return newName; } [BUGGY] } [BUGGY] return null; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] getReplacementName [RETURN_TYPE] String  String oldName [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.4746113912415564	198	198	66	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private String getReplacementName(String oldName) { for (Renamer names : nameStack) { String newName = names.getReplacementName(oldName); if (newName != null) { return newName; } [BUGGY] [BUGGY] } return null; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] getReplacementName [RETURN_TYPE] String  String oldName [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.4746113912415564	198	198	66	add	
49	[BUG] [BUGGY] return null; [FE] AssertionFailedError [CONTEXT] private String getReplacementName(String oldName) { for (Renamer names : nameStack) { String newName = names.getReplacementName(oldName); if (newName != null) { return newName; } } [BUGGY] return null; [BUGGY] } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] getReplacementName [RETURN_TYPE] String  String oldName [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.4746113912415564	199	199	66	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private String getReplacementName(String oldName) { for (Renamer names : nameStack) { String newName = names.getReplacementName(oldName); if (newName != null) { return newName; } } [BUGGY] [BUGGY] return null; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] getReplacementName [RETURN_TYPE] String  String oldName [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.4746113912415564	199	199	66	add	
51	[BUG] [BUGGY] MakeDeclaredNamesUnique(Renamer renamer) { [FE] AssertionFailedError [CONTEXT] [BUGGY] MakeDeclaredNamesUnique(Renamer renamer) { [BUGGY] this.rootRenamer = renamer; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer)  Renamer renamer [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	67	67	66	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] MakeDeclaredNamesUnique(Renamer renamer) { this.rootRenamer = renamer; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer)  Renamer renamer [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	67	67	66	add	
53	[BUG] [BUGGY] private Deque<Renamer> nameStack = new ArrayDeque<Renamer>(); [FE] AssertionFailedError [CONTEXT] [BUGGY] private Deque<Renamer> nameStack = new ArrayDeque<Renamer>(); [BUGGY]  [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer  [VARIABLES] 	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	60	60	66	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] [BUGGY] [BUGGY] private Deque<Renamer> nameStack = new ArrayDeque<Renamer>(); [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer  [VARIABLES] 	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	60	60	66	add	
55	[BUG] [BUGGY] this.rootRenamer = renamer; [FE] AssertionFailedError [CONTEXT] MakeDeclaredNamesUnique(Renamer renamer) { [BUGGY] this.rootRenamer = renamer; [BUGGY] } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer)  Renamer renamer [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	68	68	66	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] MakeDeclaredNamesUnique(Renamer renamer) { [BUGGY] [BUGGY] this.rootRenamer = renamer; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer)  Renamer renamer [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	68	68	66	add	
57	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] MakeDeclaredNamesUnique(Renamer renamer) { this.rootRenamer = renamer; [BUGGY] } [BUGGY]  [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer)  Renamer renamer [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	69	69	66	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] MakeDeclaredNamesUnique(Renamer renamer) { this.rootRenamer = renamer; [BUGGY] [BUGGY] } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] <init> [RETURN_TYPE] MakeDeclaredNamesUnique$Renamer)  Renamer renamer [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	69	69	66	add	
59	[BUG] [BUGGY] Node declarationRoot = t.getScopeRoot(); [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { [BUGGY] Node declarationRoot = t.getScopeRoot(); [BUGGY] Renamer renamer; if (nameStack.isEmpty()) {   Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	77	77	66	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { [BUGGY] [BUGGY] Node declarationRoot = t.getScopeRoot(); Renamer renamer; if (nameStack.isEmpty()) {   Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	77	77	66	add	
61	[BUG] [BUGGY] if (nameStack.isEmpty()) { [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Node declarationRoot = t.getScopeRoot(); Renamer renamer; [BUGGY] if (nameStack.isEmpty()) { [BUGGY]   Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	79	79	66	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Node declarationRoot = t.getScopeRoot(); Renamer renamer; [BUGGY] [BUGGY] if (nameStack.isEmpty()) {   Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	79	79	66	add	
63	[BUG] [BUGGY] Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION ||  !(rootRenamer instanceof ContextualRenamer)); [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Node declarationRoot = t.getScopeRoot(); Renamer renamer; if (nameStack.isEmpty()) {   [BUGGY] Preconditions.checkState(   declarationRoot.getType() != Token.FUNCTION ||     !(rootRenamer instanceof ContextualRenamer)); [BUGGY] declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	82	84	66	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Node declarationRoot = t.getScopeRoot(); Renamer renamer; if (nameStack.isEmpty()) {   [BUGGY] [BUGGY] Preconditions.checkState(   declarationRoot.getType() != Token.FUNCTION ||     !(rootRenamer instanceof ContextualRenamer)); declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	82	84	66	add	
65	[BUG] [BUGGY] Preconditions.checkState(t.inGlobalScope()); [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Node declarationRoot = t.getScopeRoot(); Renamer renamer; if (nameStack.isEmpty()) {   Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); [BUGGY] Preconditions.checkState(t.inGlobalScope()); [BUGGY] renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	85	85	66	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void enterScope(NodeTraversal t) { Node declarationRoot = t.getScopeRoot(); Renamer renamer; if (nameStack.isEmpty()) {   Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); [BUGGY] [BUGGY] Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	85	85	66	add	
67	[BUG] [BUGGY] renamer = rootRenamer; [FE] AssertionFailedError [CONTEXT] if (nameStack.isEmpty()) {   Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); [BUGGY] renamer = rootRenamer; [BUGGY] } else { renamer = nameStack.peek().forChildScope(); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	86	86	66	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (nameStack.isEmpty()) {   Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); [BUGGY] [BUGGY] renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	86	86	66	add	
69	[BUG] [BUGGY] if (declarationRoot.getType() == Token.FUNCTION) { [FE] AssertionFailedError [CONTEXT]  Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } [BUGGY] if (declarationRoot.getType() == Token.FUNCTION) { [BUGGY] for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	91	91	66	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  Preconditions.checkState( declarationRoot.getType() != Token.FUNCTION || !(rootRenamer instanceof ContextualRenamer)); Preconditions.checkState(t.inGlobalScope()); renamer = rootRenamer; } else { renamer = nameStack.peek().forChildScope(); } [BUGGY] [BUGGY] if (declarationRoot.getType() == Token.FUNCTION) { for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) { String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	91	91	66	add	
71	[BUG] [BUGGY] nameStack.push(renamer); [FE] AssertionFailedError [CONTEXT] String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } [BUGGY] nameStack.push(renamer); [BUGGY] } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	103	103	66	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] String name = c.getString(); renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } [BUGGY] [BUGGY] nameStack.push(renamer); } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	103	103	66	add	
73	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); [BUGGY] } [BUGGY]  [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	104	104	66	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] renamer.addDeclaredName(name); } Node functionBody = declarationRoot.getLastChild(); findDeclaredNames(functionBody, null, renamer); }else if (declarationRoot.getType() != Token.FUNCTION) {  findDeclaredNames(declarationRoot, null, renamer); } nameStack.push(renamer); [BUGGY] [BUGGY] } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] enterScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node c declarationRoot functionBody Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	104	104	66	add	
75	[BUG] [BUGGY] if (!t.inGlobalScope()) { [FE] AssertionFailedError [CONTEXT] public void exitScope(NodeTraversal t) { [BUGGY] if (!t.inGlobalScope()) { [BUGGY] nameStack.pop(); } } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] exitScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	108	108	66	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void exitScope(NodeTraversal t) { [BUGGY] [BUGGY] if (!t.inGlobalScope()) { nameStack.pop(); } } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] exitScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	108	108	66	add	
77	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] public void exitScope(NodeTraversal t) { if (!t.inGlobalScope()) { nameStack.pop(); } [BUGGY] } [BUGGY]  [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] exitScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	111	111	66	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void exitScope(NodeTraversal t) { if (!t.inGlobalScope()) { nameStack.pop(); } [BUGGY] [BUGGY] } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] exitScope [RETURN_TYPE] void  NodeTraversal t [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	111	111	66	add	
79	[BUG] [BUGGY] switch (n.getType()) { [FE] AssertionFailedError [CONTEXT] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { [BUGGY] switch (n.getType()) { [BUGGY] case Token.FUNCTION: {   Renamer renamer = nameStack.peek().forChildScope();  String name = n.getFirstChild().getString(); if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) { [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	116	116	66	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { [BUGGY] [BUGGY] switch (n.getType()) { case Token.FUNCTION: {   Renamer renamer = nameStack.peek().forChildScope();  String name = n.getFirstChild().getString(); if (name != null && !name.isEmpty() && parent != null && !NodeUtil.isFunctionDeclaration(n)) { [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	116	116	66	add	
81	[BUG] [BUGGY] return true; [FE] AssertionFailedError [CONTEXT] Renamer renamer = nameStack.peek().forChildScope(); String name = n.getFirstChild().getString(); renamer.addDeclaredName(name); nameStack.push(renamer); } break; } [BUGGY] return true; [BUGGY] } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	152	152	66	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Renamer renamer = nameStack.peek().forChildScope(); String name = n.getFirstChild().getString(); renamer.addDeclaredName(name); nameStack.push(renamer); } break; } [BUGGY] [BUGGY] return true; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] shouldTraverse [RETURN_TYPE] boolean  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	152	152	66	add	
83	[BUG] [BUGGY] switch (n.getType()) { [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { [BUGGY] switch (n.getType()) { [BUGGY] case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	157	157	66	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { [BUGGY] [BUGGY] switch (n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	157	157	66	add	
85	[BUG] [BUGGY] String newName = getReplacementName(n.getString()); [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.NAME: [BUGGY] String newName = getReplacementName(n.getString()); [BUGGY] if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); } break; [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	159	159	66	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.NAME: [BUGGY] [BUGGY] String newName = getReplacementName(n.getString()); if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); } break; [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	159	159	66	add	
87	[BUG] [BUGGY] if (newName != null) { [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); [BUGGY] if (newName != null) { [BUGGY] Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); } break;  [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	160	160	66	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.NAME: String newName = getReplacementName(n.getString()); [BUGGY] [BUGGY] if (newName != null) { Renamer renamer = nameStack.peek(); if (renamer.stripConstIfReplaced()) {  n.removeProp(Node.IS_CONSTANT_NAME); } n.setString(newName); t.getCompiler().reportCodeChange(); } break;  [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] visit [RETURN_TYPE] void  NodeTraversal t Node n Node parent [VARIABLES] Renamer renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness NodeTraversal t Node n parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	160	160	66	add	
90	[BUG] [BUGGY] for (Renamer names : nameStack) { [FE] AssertionFailedError [CONTEXT] private String getReplacementName(String oldName) { [BUGGY] for (Renamer names : nameStack) { [BUGGY] String newName = names.getReplacementName(oldName); if (newName != null) { return newName; } } return null; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] getReplacementName [RETURN_TYPE] String  String oldName [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	193	193	66	replace	
91	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private String getReplacementName(String oldName) { [BUGGY] [BUGGY] for (Renamer names : nameStack) { String newName = names.getReplacementName(oldName); if (newName != null) { return newName; } } return null; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] getReplacementName [RETURN_TYPE] String  String oldName [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	193	193	66	add	
92	[BUG] [BUGGY] String newName = names.getReplacementName(oldName); [FE] AssertionFailedError [CONTEXT] private String getReplacementName(String oldName) { for (Renamer names : nameStack) { [BUGGY] String newName = names.getReplacementName(oldName); [BUGGY] if (newName != null) { return newName; } } return null; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] getReplacementName [RETURN_TYPE] String  String oldName [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	194	194	66	replace	
93	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private String getReplacementName(String oldName) { for (Renamer names : nameStack) { [BUGGY] [BUGGY] String newName = names.getReplacementName(oldName); if (newName != null) { return newName; } } return null; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] getReplacementName [RETURN_TYPE] String  String oldName [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	194	194	66	add	
94	[BUG] [BUGGY] if (newName != null) { [FE] AssertionFailedError [CONTEXT] private String getReplacementName(String oldName) { for (Renamer names : nameStack) { String newName = names.getReplacementName(oldName); [BUGGY] if (newName != null) { [BUGGY] return newName; } } return null; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] getReplacementName [RETURN_TYPE] String  String oldName [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	195	195	66	replace	
95	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private String getReplacementName(String oldName) { for (Renamer names : nameStack) { String newName = names.getReplacementName(oldName); [BUGGY] [BUGGY] if (newName != null) { return newName; } } return null; } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] getReplacementName [RETURN_TYPE] String  String oldName [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	195	195	66	add	
96	[BUG] [BUGGY] if (parent == null || parent.getType() != Token.FUNCTION || n == parent.getFirstChild()) { [FE] AssertionFailedError [CONTEXT] private void findDeclaredNames(Node n, Node parent, Renamer renamer) {   [BUGGY] if (parent == null  || parent.getType() != Token.FUNCTION    || n == parent.getFirstChild()) { [BUGGY] || parent.getType() != Token.FUNCTION || n == parent.getFirstChild()) { if (NodeUtil.isVarDeclaration(n)) { renamer.addDeclaredName(n.getString()); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); renamer.addDeclaredName(nameNode.getString()); } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] findDeclaredNames [RETURN_TYPE] void  Node n Node parent Renamer renamer [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Node c n nameNode parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	209	211	66	replace	
97	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void findDeclaredNames(Node n, Node parent, Renamer renamer) {   [BUGGY] [BUGGY] if (parent == null  || parent.getType() != Token.FUNCTION    || n == parent.getFirstChild()) { || parent.getType() != Token.FUNCTION || n == parent.getFirstChild()) { if (NodeUtil.isVarDeclaration(n)) { renamer.addDeclaredName(n.getString()); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); renamer.addDeclaredName(nameNode.getString()); } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] findDeclaredNames [RETURN_TYPE] void  Node n Node parent Renamer renamer [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Node c n nameNode parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	209	211	66	add	
98	[BUG] [BUGGY] if (NodeUtil.isVarDeclaration(n)) { [FE] AssertionFailedError [CONTEXT] private void findDeclaredNames(Node n, Node parent, Renamer renamer) {   if (parent == null || parent.getType() != Token.FUNCTION || n == parent.getFirstChild()) { [BUGGY] if (NodeUtil.isVarDeclaration(n)) { [BUGGY] renamer.addDeclaredName(n.getString()); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); renamer.addDeclaredName(nameNode.getString()); } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { findDeclaredNames(c, n, renamer); } } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] findDeclaredNames [RETURN_TYPE] void  Node n Node parent Renamer renamer [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Node c n nameNode parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	212	212	66	replace	
99	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] private void findDeclaredNames(Node n, Node parent, Renamer renamer) {   if (parent == null || parent.getType() != Token.FUNCTION || n == parent.getFirstChild()) { [BUGGY] [BUGGY] if (NodeUtil.isVarDeclaration(n)) { renamer.addDeclaredName(n.getString()); } else if (NodeUtil.isFunctionDeclaration(n)) { Node nameNode = n.getFirstChild(); renamer.addDeclaredName(nameNode.getString()); } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { findDeclaredNames(c, n, renamer); } } [CLASS] MakeDeclaredNamesUnique ContextualRenameInverter ContextualRenamer InlineRenamer BoilerplateRenamer [METHOD] findDeclaredNames [RETURN_TYPE] void  Node n Node parent Renamer renamer [VARIABLES] Renamer names renamer rootRenamer AbstractCompiler compiler Set referencedNames boolean global removeConstness Node c n nameNode parent Multiset nameUsage Supplier uniqueIdSupplier String ARGUMENTS UNIQUE_ID_SEPARATOR idPrefix name newName oldName Deque nameStack referenceStack Map declarations nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.47380354147934284	212	212	66	add	
