bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION,  newName);  [CE]  cannot  find  symbol  IS_FUNCTION  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION,  newName);	  n.removeProp(Node.IS_FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION	114	None	replace
2	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();	  timeout    	compilable	timeout	108	1	add
3	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();	  timeout    	compilable	timeout	108	1	add
4	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  n.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    n.getCompiler().reportCodeChange();	  timeout    	non-compiled	[CE]  cannot  find  symbol	108	None	add
5	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(nameStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	t.getCompiler().reportCodeChange();    if(nameStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }	  timeout    	compilable	timeout	108	1	add
6	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(nameStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(nameStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(nameStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }	  timeout    	compilable	timeout	108	1	add
7	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(nameStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	t.getCompiler().reportCodeChange();    if(nameStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }	  timeout    	compilable	timeout	108	1	add
8	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(nameStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(nameStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(nameStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }	  timeout    	compilable	timeout	108	1	add
9	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	t.getCompiler().reportCodeChange();    if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }	  timeout    	compilable	timeout	108	1	add
10	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }	  timeout    	compilable	timeout	108	1	add
11	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(referencedNames!=  null)  {  t.getCompiler().reportCodeChange();  }  [CE]  cannot  find  symbol  referencedNames  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(referencedNames!=  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(referencedNames!=  null)  {  t.getCompiler().reportCodeChange();  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  referencedNames	108	None	add
12	[BUG]  [BUGGY]  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(nameStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	t.getCompiler().reportCodeChange();    if(nameStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  }	  timeout    	compilable	timeout	108	1	add
13	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(nameStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  }  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(nameStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(nameStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  }	  timeout    	compilable	timeout	108	1	add
14	[BUG]  [BUGGY]  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(nameStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	t.getCompiler().reportCodeChange();    if(nameStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  }	  timeout    	compilable	timeout	108	1	add
15	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(nameStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  }  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(nameStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(nameStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  }	  timeout    	compilable	timeout	108	1	add
16	[BUG]  [BUGGY]  n.setString(getReplacementName(newName,  n.getString()));  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(newName,  n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(newName,  n.getString()));	  n.setString(getReplacementName(newName.getString()));    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	4	None	replace
17	[BUG]  [BUGGY]  n.setString(getReplacementName(newName,  parent.getString()));  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(newName,  parent.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(newName,  parent.getString()));	  n.setString(getReplacementName(newName.getString()));    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	4	None	replace
18	[BUG]  [BUGGY]  name.setString(getReplacementName(n.getString()));  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  name.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	name.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(newName.getString()));    	non-compiled	[CE]  cannot  find  symbol  name	4	None	replace
19	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_SYNTHETIC_NAME,  newName);  [CE]  cannot  find  symbol  IS_UNKNOWN_SYNTHETIC_NAME  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNKNOWN_SYNTHETIC_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_SYNTHETIC_NAME,  newName);	  n.removeProp(Node.IS_UNKNOWN_SYNTHETIC_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_SYNTHETIC_NAME	93	None	replace
20	[BUG]  [BUGGY]  n.removeProp(Node.IS_SINGLE_ID_NAME,  newName);  [CE]  cannot  find  symbol  IS_SINGLE_ID_NAME  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_SINGLE_ID_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_SINGLE_ID_NAME,  newName);	  n.removeProp(Node.IS_SINGLE_ID_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_SINGLE_ID_NAME	104	None	replace
21	[BUG]  [BUGGY]  n.getCompiler().reportCodeChange();  break;  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.getCompiler().reportCodeChange();  break;  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.getCompiler().reportCodeChange();  break;	  t.getCompiler().reportCodeChange();    break;    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
22	[BUG]  [BUGGY]  n.setString(Node.IS_ID_SEPARATOR);  [CE]  cannot  find  symbol  IS_ID_SEPARATOR  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(Node.IS_ID_SEPARATOR);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(Node.IS_ID_SEPARATOR);	  n.setString(oldName);    	non-compiled	[CE]  cannot  find  symbol  IS_ID_SEPARATOR	16	None	replace
23	[BUG]  [BUGGY]  n.setString(Node.IS_LAST_NAME);  [CE]  cannot  find  symbol  IS_LAST_NAME  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(Node.IS_LAST_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(Node.IS_LAST_NAME);	  n.setString(oldName);    	non-compiled	[CE]  cannot  find  symbol  IS_LAST_NAME	16	None	replace
24	[BUG]  [BUGGY]  n.setString(Node.IS_UNKNOWN);  [CE]  cannot  find  symbol  IS_UNKNOWN  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(Node.IS_UNKNOWN);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(Node.IS_UNKNOWN);	  n.setString(oldName);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN	16	None	replace
25	[BUG]  [BUGGY]  n.setString(Node.IS_LIST_NAME);  [CE]  cannot  find  symbol  IS_LIST_NAME  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(Node.IS_LIST_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(Node.IS_LIST_NAME);	  n.setString(oldName);    	non-compiled	[CE]  cannot  find  symbol  IS_LIST_NAME	16	None	replace
26	[BUG]  [BUGGY]  n.setString(newName,  getReplacementName(n.getString()));  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName,  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName,  getReplacementName(n.getString()));	  n.setString(newName    +   "_   ",    getReplacementName(n.getString()));    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	99	None	replace
27	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ",_ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + ",_ "  +  getReplacementName(n.getString()));	  n.setString(newName    +   "_   ",    getReplacementName(n.getString()));    	compilable	timeout	99	1	replace
28	[BUG]  [BUGGY]  n.setString(newName  + ",_ "  +  getReplacementName(n.getString()));  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ",_ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ",_ "  +  getReplacementName(n.getString()));	  n.setString(newName    +   "_   ",    getReplacementName(n.getString()));    	compilable	timeout	99	1	replace
29	[BUG]  [BUGGY]  n.setString(newName  + ",   ",  getReplacementName(n.getString()));  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ",   ",  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ",   ",  getReplacementName(n.getString()));	  n.setString(newName    +   "_   ",    getReplacementName(n.getString()));    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	99	None	replace
30	[BUG]  [BUGGY]  n.setString(newName  + ",  getReplacementName(n.getString()),  parent);  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ",  getReplacementName(n.getString()),  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ",  getReplacementName(n.getString()),  parent);	  n.setString(newName    +   "_   ",    getReplacementName(n.getString()));    	non-compiled	[CE]  unclosed  string  literal	99	None	replace
31	[BUG]  [BUGGY]  n.removeProp(Node.IS_SUSPENDING_NAME,  newName);  [CE]  cannot  find  symbol  IS_SUSPENDING_NAME  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_SUSPENDING_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_SUSPENDING_NAME,  newName);	  n.removeProp(Node.IS_SUSPENDING_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_SUSPENDING_NAME	94	None	replace
32	[BUG]  [BUGGY]  n.removeChild(parent,  newName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent,  newName);	  n.removeChild(newName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	72	None	replace
33	[BUG]  [BUGGY]  n.removeChild(newName,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName,  parent);	  n.removeChild(newName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	72	None	replace
34	[BUG]  [BUGGY]  n.removeChild(newName,  nameStack);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName,  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName,  nameStack);	  n.removeChild(newName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	72	None	replace
35	[BUG]  [BUGGY]  n.removeChild(newName,  name);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName,  name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName,  name);	  n.removeChild(newName);    	non-compiled	[CE]  cannot  find  symbol  name	72	None	replace
36	[BUG]  [BUGGY]  n.removeChild(newName,  rootRenamer);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName,  rootRenamer);	  n.removeChild(newName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	72	None	replace
37	[BUG]  [BUGGY]  n.removeChild(newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName,  nameUsage);	  n.removeChild(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	72	None	replace
38	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME);        n.getProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	133	1	add
39	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.getProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	133	1	add
40	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  Node  n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  Node  n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.getProp(Node.IS_CONSTANT_NAME);    Node  n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  ';'  expected	133	None	add
41	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.getProp(Node.IS_CONSTANT_NAME);    Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	133	None	add
42	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  renamer.getProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  renamer.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.getProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  renamer.getProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol	133	None	add
43	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  node.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  node.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.getProp(Node.IS_CONSTANT_NAME);    node.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol  node	133	None	add
44	[BUG]  [BUGGY]  n.setString(newName,  newName  + "_ "  +  getReplacementName(n.getString()),  parent);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName,  newName  + "_ "  +  getReplacementName(n.getString()),  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName,  newName  + "_ "  +  getReplacementName(n.getString()),  parent);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    parent);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	81	None	replace
45	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  newName),  parent);  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  newName),  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  newName),  parent);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    parent);    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	81	None	replace
46	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  n,  parent);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  n,  parent);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    parent);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	81	None	replace
47	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  parent));  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  parent));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  parent));	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    parent);    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	81	None	replace
48	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  n),  parent);  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  n),  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  n),  parent);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    parent);    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	81	None	replace
49	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  parent.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  nameUsage  =  parent.getFirstChild();	          Node    nameUsage    =    n.getFirstChild();    timeout    	compilable	timeout	27	1	replace
50	[BUG]  [BUGGY]  Node  nameUsage  =  parent.getFirstChild();  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  parent.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameUsage  =  parent.getFirstChild();	          Node    nameUsage    =    n.getFirstChild();    timeout    	compilable	timeout	27	1	replace
51	[BUG]  [BUGGY]  Node  nameUsage  =  newName.getFirstChild();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  newName.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameUsage  =  newName.getFirstChild();	          Node    nameUsage    =    n.getFirstChild();    timeout    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
52	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  n.getNext();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  nameUsage  =  n.getNext();	          Node    nameUsage    =    n.getFirstChild();    timeout    	compilable	timeout	27	1	replace
53	[BUG]  [BUGGY]  Node  nameUsage  =  n.getNext();  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  n.getNext();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameUsage  =  n.getNext();	          Node    nameUsage    =    n.getFirstChild();    timeout    	compilable	timeout	27	1	replace
54	[BUG]  [BUGGY]  Node  nameUsage  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  node.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameUsage  =  node.getFirstChild();	          Node    nameUsage    =    n.getFirstChild();    timeout    	non-compiled	[CE]  cannot  find  symbol  node	27	None	replace
55	[BUG]  [BUGGY]  n.removeChild(parent);  n.removeProp(Node.IS_CONSTANT_NAME;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  n.removeProp(Node.IS_CONSTANT_NAME;  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);  n.removeProp(Node.IS_CONSTANT_NAME;	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME;    	non-compiled	[CE]  ')'  expected	136	None	replace
56	[BUG]  [BUGGY]  n.removeChild(newName);  n.removeProp(Node.IS_CONSTANT_NAME;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName);  n.removeProp(Node.IS_CONSTANT_NAME;  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName);  n.removeProp(Node.IS_CONSTANT_NAME;	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME;    	non-compiled	[CE]  ')'  expected	136	None	replace
57	[BUG]  [BUGGY]  n.removeChild(newName);  n.removeChild(newName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName);  n.removeChild(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName);  n.removeChild(newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME;    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	136	None	replace
58	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  parent);  [CE]  no  suitable  method  found  for  removeProp(int,String,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName,  parent);	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,String,Node)	73	None	replace
59	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName,  nameUsage);	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	73	None	replace
60	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName,  idPrefix);	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	73	None	replace
61	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  t.getCompiler());  [CE]  no  suitable  method  found  for  removeProp(int,String,Compiler)  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  t.getCompiler());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName,  t.getCompiler());	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,String,Compiler)	73	None	replace
62	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  name);  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  name);	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	73	None	replace
63	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PREFIX);  [CE]  cannot  find  symbol  IS_UNKNOWN_PREFIX  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PREFIX);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_PREFIX);	  n.removeProp(Node.IS_UNKNOWN_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_PREFIX	35	None	replace
64	[BUG]  [BUGGY]  n.addChildToFront(newName,  null);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  null);	  n.addChildToFront(newName,    name);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	66	None	replace
65	[BUG]  [BUGGY]  n.addChildToFront(newName,  node);  [CE]  cannot  find  symbol  node  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  node);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  node);	  n.addChildToFront(newName,    name);    	non-compiled	[CE]  cannot  find  symbol  node	66	None	replace
66	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  2);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME  +  2);	  n.removeProp(Node.IS_CONSTANT_NAME    +    1);    timeout    	compilable	timeout	125	1	replace
67	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  2);  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  2);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME  +  2);	  n.removeProp(Node.IS_CONSTANT_NAME    +    1);    timeout    	compilable	timeout	125	1	replace
68	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  4);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME  +  4);	  n.removeProp(Node.IS_CONSTANT_NAME    +    1);    timeout    	compilable	timeout	125	1	replace
69	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  4);  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  4);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME  +  4);	  n.removeProp(Node.IS_CONSTANT_NAME    +    1);    timeout    	compilable	timeout	125	1	replace
70	[BUG]  [BUGGY]  n.removeProp(Node.IS_SYNTHETIC_NAME,  name);  [CE]  cannot  find  symbol  IS_SYNTHETIC_NAME  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_SYNTHETIC_NAME,  name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_SYNTHETIC_NAME,  name);	  n.removeProp(Node.IS_SYNTHETIC_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_SYNTHETIC_NAME	70	None	replace
71	[BUG]  [BUGGY]  n.removeProp(Node.IS_NAME,  newName);  [CE]  cannot  find  symbol  IS_NAME  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_NAME,  newName);	  n.removeProp(Node.IS_SYNTHETIC_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_NAME	70	None	replace
72	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ". "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + ". "  +  getReplacementName(n.getString()));	  n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	83	1	replace
73	[BUG]  [BUGGY]  n.setString(newName  + ". "  +  getReplacementName(n.getString()));  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ". "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ". "  +  getReplacementName(n.getString()));	  n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	83	1	replace
74	[BUG]  [BUGGY]  n.setString(newName  + "._ "  +  getReplacementName(n.getString()),  newName);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "._ "  +  getReplacementName(n.getString()),  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "._ "  +  getReplacementName(n.getString()),  newName);	  n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	83	None	replace
75	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "/._ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + "/._ "  +  getReplacementName(n.getString()));	  n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	83	1	replace
76	[BUG]  [BUGGY]  n.setString(newName  + "/._ "  +  getReplacementName(n.getString()));  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "/._ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "/._ "  +  getReplacementName(n.getString()));	  n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	83	1	replace
77	[BUG]  [BUGGY]  n.addChildToFront(parent,  newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(parent,  newName,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(parent,  newName,  nameUsage);	  n.addChildToFront(parent,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	68	None	replace
78	[BUG]  [BUGGY]  n.addChildToFront(parent,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(parent,  newName,  idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(parent,  newName,  idPrefix);	  n.addChildToFront(parent,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	68	None	replace
79	[BUG]  [BUGGY]  n.addChildToFront(name,  newName);  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(name,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(name,  newName);	  n.addChildToFront(parent,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	68	None	replace
80	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);  [CE]  void  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,    newName);    	non-compiled	[CE]  void  cannot  be  dereferenced	119	None	replace
81	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(parent,  newName);  [CE]  void  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(parent,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(parent,  newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,    newName);    	non-compiled	[CE]  void  cannot  be  dereferenced	119	None	replace
82	[BUG]  [BUGGY]  nameUsage.setString(newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  nameUsage.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	nameUsage.setString(newName);	  name.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	91	None	replace
83	[BUG]  [BUGGY]  NameUsage.setString(newName);  [CE]  cannot  find  symbol  NameUsage  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NameUsage.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NameUsage.setString(newName);	  name.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NameUsage	91	None	replace
84	[BUG]  [BUGGY]  name.addString(newName);  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  name.addString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	name.addString(newName);	  name.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  name	91	None	replace
85	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	nameStack.pop();	  name.setString(newName);    	compilable	timeout	91	1	replace
86	[BUG]  [BUGGY]  nameStack.pop();  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	nameStack.pop();	  name.setString(newName);    	compilable	timeout	91	1	replace
87	[BUG]  [BUGGY]  node.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  node.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	node.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_PROP);    	non-compiled	[CE]  cannot  find  symbol  node	71	None	replace
88	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP,  newName);  [CE]  cannot  find  symbol  IS_CONSTANT_PROP  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_PROP,  newName);	  n.removeProp(Node.IS_CONSTANT_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTANT_PROP	71	None	replace
89	[BUG]  [BUGGY]  parent.removeProp(Node.IS_CONSTANT_PROP);  [CE]  cannot  find  symbol  IS_CONSTANT_PROP  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parent.removeProp(Node.IS_CONSTANT_PROP);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parent.removeProp(Node.IS_CONSTANT_PROP);	  n.removeProp(Node.IS_CONSTANT_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTANT_PROP	71	None	replace
90	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  n  =  parent.getFirstChild();	  n.removeProp(Node.IS_CONSTANT_NAME);    Node    n    =    parent.getFirstChild();    n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	38	None	replace
91	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    Node    n    =    parent.getFirstChild();    n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	38	None	replace
92	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTRUCTOR_NAME,  newName);  [CE]  cannot  find  symbol  IS_CONSTRUCTOR_NAME  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTRUCTOR_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTRUCTOR_NAME,  newName);	  n.removeProp(Node.IS_CONSTRUCTOR_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTRUCTOR_NAME	43	None	replace
93	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent.idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent.idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent.idPrefix);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    parent);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	75	None	replace
94	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent.getParent());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent.getParent());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent.getParent());	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    parent);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
95	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  n);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  n);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    parent);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
96	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent.parent);  [CE]  parent  has  private  access  in  Node  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent.parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent.parent);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    parent);    	non-compiled	[CE]  parent  has  private  access  in  Node	75	None	replace
97	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  null);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  null);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    parent);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
98	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent.getFirstChild());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent.getFirstChild());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent.getFirstChild());	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    parent);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
99	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_PREFIX);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_PREFIX);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	renamer.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_PREFIX);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_PREFIX);    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
100	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));	  timeout    	compilable	timeout	5	1	add
101	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));	  timeout    	compilable	timeout	5	1	add
102	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  Node  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  Node  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    Node  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  ';'  expected	5	None	add
103	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();	  timeout    	compilable	timeout	5	1	add
104	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();	  timeout    	compilable	timeout	5	1	add
105	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(newName);  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    n.setString(newName);  n.setString(getReplacementName(n.getString()));	  timeout    	compilable	timeout	5	1	add
106	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(newName);  n.setString(getReplacementName(n.getString()));  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(newName);  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    n.setString(newName);  n.setString(getReplacementName(n.getString()));	  timeout    	compilable	timeout	5	1	add
107	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  ARGUMENTS,  newName);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()),  ARGUMENTS,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  ARGUMENTS,  newName);	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
108	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString(),  ARGUMENTS_NAME),  newName);  [CE]  cannot  find  symbol  ARGUMENTS_NAME  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString(),  ARGUMENTS_NAME),  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString(),  ARGUMENTS_NAME),  newName);	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_NAME	1	None	replace
109	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString(),  ARGUMENTS),  newName);  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString(),  ARGUMENTS),  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString(),  ARGUMENTS),  newName);	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	1	None	replace
110	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  ARGUMENTS);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()),  ARGUMENTS);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  ARGUMENTS);	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
111	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  newName,  parent);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()),  newName,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  newName,  parent);	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
112	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  name,  newName);  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()),  name,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  name,  newName);	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  cannot  find  symbol  name	1	None	replace
113	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  parent.replaceChild(n,  parent);  [CE]  no  suitable  method  found  for  removeProp(int,String)  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  parent.replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName);  parent.replaceChild(n,  parent);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);    parent.replaceChild(n,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,String)	41	None	replace
114	[BUG]  [BUGGY]  node.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  node.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	node.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);    parent.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  node	41	None	replace
115	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);    parent.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	41	None	replace
116	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  renamer);  parent.replaceChild(n,  newName);  [CE]  no  suitable  method  found  for  removeProp(int,Renamer)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  renamer);  parent.replaceChild(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  renamer);  parent.replaceChild(n,  newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);    parent.replaceChild(n,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,Renamer)	41	None	replace
117	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameStack  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  nameStack  =  n.getFirstChild();	          Node    nameStack    =    n.getLastChild();    timeout    	compilable	timeout	29	1	replace
118	[BUG]  [BUGGY]  Node  nameStack  =  n.getFirstChild();  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameStack  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameStack  =  n.getFirstChild();	          Node    nameStack    =    n.getLastChild();    timeout    	compilable	timeout	29	1	replace
119	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameStack  =  parent.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  nameStack  =  parent.getLastChild();	          Node    nameStack    =    n.getLastChild();    timeout    	compilable	timeout	29	1	replace
120	[BUG]  [BUGGY]  Node  nameStack  =  parent.getLastChild();  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameStack  =  parent.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameStack  =  parent.getLastChild();	          Node    nameStack    =    n.getLastChild();    timeout    	compilable	timeout	29	1	replace
121	[BUG]  [BUGGY]  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameStack  =  parent.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  nameStack  =  parent.getFirstChild();	          Node    nameStack    =    n.getLastChild();    timeout    	compilable	timeout	29	1	replace
122	[BUG]  [BUGGY]  Node  nameStack  =  parent.getFirstChild();  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameStack  =  parent.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameStack  =  parent.getFirstChild();	          Node    nameStack    =    n.getLastChild();    timeout    	compilable	timeout	29	1	replace
123	[BUG]  [BUGGY]  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameStack  =  n.removeFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  nameStack  =  n.removeFirstChild();	          Node    nameStack    =    n.getLastChild();    timeout    	compilable	timeout	29	1	replace
124	[BUG]  [BUGGY]  Node  nameStack  =  n.removeFirstChild();  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameStack  =  n.removeFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameStack  =  n.removeFirstChild();	          Node    nameStack    =    n.getLastChild();    timeout    	compilable	timeout	29	1	replace
125	[BUG]  [BUGGY]  Node  nameStack  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameStack  =  node.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameStack  =  node.getFirstChild();	          Node    nameStack    =    n.getLastChild();    timeout    	non-compiled	[CE]  cannot  find  symbol  node	29	None	replace
126	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  rootRenamer,  renamer);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  rootRenamer,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  rootRenamer,  renamer);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    renamer);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	84	None	replace
127	[BUG]  [BUGGY]  n.setString(newName,  newName  + "_ "  +  getReplacementName(n.getString()),  renamer);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName,  newName  + "_ "  +  getReplacementName(n.getString()),  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName,  newName  + "_ "  +  getReplacementName(n.getString()),  renamer);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    renamer);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	84	None	replace
128	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  parent),  renamer);  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  parent),  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  parent),  renamer);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    renamer);    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	84	None	replace
129	[BUG]  [BUGGY]  n.setString(newName  + ",_ "  +  getReplacementName(n.getString()),  rootRenamer,  renamer);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ",_ "  +  getReplacementName(n.getString()),  rootRenamer,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ",_ "  +  getReplacementName(n.getString()),  rootRenamer,  renamer);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    renamer);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	84	None	replace
130	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  rootRenamer);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  rootRenamer);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    renamer);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	84	None	replace
131	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  parent,  renamer);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  parent,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  parent,  renamer);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    renamer);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	84	None	replace
132	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  n.setString(newName  + "_$ ")+  getReplacementName(n.getString()));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  n.setString(newName  + "_$ ")+  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  n.setString(newName  + "_$ ")+  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_   ")    +    getReplacementName(n.getString()));    	non-compiled	[CE]  not  a  statement	86	None	replace
133	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  parent.getConstructor();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  rootRenamer  =  parent.getConstructor();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  rootRenamer  =  parent.getConstructor();	          ContextualRenamer    rootRenamer    =    n.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
134	[BUG]  [BUGGY]  ContextualRenamer  renamer  =  n.getConstructor();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  renamer  =  n.getConstructor();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  renamer  =  n.getConstructor();	          ContextualRenamer    rootRenamer    =    n.getConstructor();    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	31	None	replace
135	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  t.getConstructor();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  rootRenamer  =  t.getConstructor();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  rootRenamer  =  t.getConstructor();	          ContextualRenamer    rootRenamer    =    n.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
136	[BUG]  [BUGGY]  ContextualRenamer  n  =  n.getConstructor();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  n  =  n.getConstructor();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  n  =  n.getConstructor();	          ContextualRenamer    rootRenamer    =    n.getConstructor();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	31	None	replace
137	[BUG]  [BUGGY]  ContextualRenamer  constructor  =  n.getConstructor();  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  constructor  =  n.getConstructor();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  constructor  =  n.getConstructor();	          ContextualRenamer    rootRenamer    =    n.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
138	[BUG]  [BUGGY]  ContextualRenamer  n  =  parent.getConstructor();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  n  =  parent.getConstructor();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  n  =  parent.getConstructor();	          ContextualRenamer    rootRenamer    =    n.getConstructor();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	31	None	replace
139	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName);  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName);  n.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
140	[BUG]  [BUGGY]  n.setString(newName);  n.setString(getReplacementName(n.getString()));  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName);  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName);  n.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
141	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	97	1	add
142	[BUG]  [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	97	1	add
143	[BUG]  [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  Node  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  Node  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    Node  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  	97	None	add
144	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ":. "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    n.setString(newName  +   ":. "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	97	1	add
145	[BUG]  [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ":. "  +  getReplacementName(n.getString()));  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ":. "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    n.setString(newName  +   ":. "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	97	1	add
146	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ":... "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    n.setString(newName  +   ":... "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	97	1	add
147	[BUG]  [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ":... "  +  getReplacementName(n.getString()));  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ":... "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    n.setString(newName  +   ":... "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	97	1	add
148	[BUG]  [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ": ".  +  getReplacementName(n.getString()));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ": ".  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    n.setString(newName  +   ": ".  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  <identifier>  expected	97	None	add
149	[BUG]  [BUGGY]  n.removeChild(newName);  Node  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName);  Node  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName);  Node  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    Node    n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  ';'  expected	40	None	replace
150	[BUG]  [BUGGY]  n.removeChild(parent);  Node  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  Node  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);  Node  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    Node    n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  ';'  expected	40	None	replace
151	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName));	  n.addProp(Node.IS_CONSTANT_NAME,    newName));    	non-compiled	[CE]  ';'  expected	144	None	replace
152	[BUG]  [BUGGY]  n.addReference(Node.IS_CONSTANT_NAME,  newName));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addReference(Node.IS_CONSTANT_NAME,  newName));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addReference(Node.IS_CONSTANT_NAME,  newName));	  n.addProp(Node.IS_CONSTANT_NAME,    newName));    	non-compiled	[CE]  ';'  expected	144	None	replace
153	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName).replaceChild(n,  parent);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName).replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName).replaceChild(n,  parent);	  n.addProp(Node.IS_CONSTANT_NAME,    newName));    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
154	[BUG]  [BUGGY]  n.addChildToFront(newName,  n,  parent);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  n,  parent);	  n.addChildToFront(newName,    parent);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	62	None	replace
155	[BUG]  [BUGGY]  n.addChildToFront(newName,  rootRenamer,  parent);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  rootRenamer,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  rootRenamer,  parent);	  n.addChildToFront(newName,    parent);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	62	None	replace
156	[BUG]  [BUGGY]  n.addChildToFront(newName,  parent,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  parent,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  parent,  nameUsage);	  n.addChildToFront(newName,    parent);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	62	None	replace
157	[BUG]  [BUGGY]  n.addChildToFront(newName,  parent,  newName);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  parent,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  parent,  newName);	  n.addChildToFront(newName,    parent);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	62	None	replace
158	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_NAME,  newName);  [CE]  cannot  find  symbol  IS_UNKNOWN_NAME  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNKNOWN_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_NAME,  newName);	  n.removeProp(Node.IS_UNKNOWN_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_NAME	126	None	replace
159	[BUG]  [BUGGY]  n.removeProp(Node.IS_NEW_PROP);  [CE]  cannot  find  symbol  IS_NEW_PROP  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_NEW_PROP);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_NEW_PROP);	  n.removeProp(Node.IS_NEW_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_NEW_PROP	92	None	replace
160	[BUG]  [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  name);  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceProp(Node.IS_CONSTANT_NAME,  name);	  n.replaceProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	107	None	replace
161	[BUG]  [BUGGY]  Node  newName  =  n.replaceProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  newName  =  n.replaceProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  newName  =  n.replaceProp(Node.IS_CONSTANT_NAME,  newName);	  n.replaceProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	107	None	replace
162	[BUG]  [BUGGY]  replaceProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  replaceProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	replaceProp(Node.IS_CONSTANT_NAME,  newName);	  n.replaceProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
163	[BUG]  [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  newName,  parent);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  newName,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceProp(Node.IS_CONSTANT_NAME,  newName,  parent);	  n.replaceProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
164	[BUG]  [BUGGY]  name.replaceProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  name.replaceProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	name.replaceProp(Node.IS_CONSTANT_NAME,  newName);	  n.replaceProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	107	None	replace
165	[BUG]  [BUGGY]  n.replaceChild(parent,  newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(parent,  newName,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(parent,  newName,  nameUsage);	  n.replaceChild(parent,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	47	None	replace
166	[BUG]  [BUGGY]  n.replaceChild(parent,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(parent,  newName,  idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(parent,  newName,  idPrefix);	  n.replaceChild(parent,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	47	None	replace
167	[BUG]  [BUGGY]  n.replaceChild(newName,  parent);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(newName,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(newName,  parent);	  n.replaceChild(parent,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	47	None	replace
168	[BUG]  [BUGGY]  n.replaceChild(t,  n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(t,  n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(t,  n,  newName);	  n.replaceChild(parent,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	47	None	replace
169	[BUG]  [BUGGY]  Node  n  =  getReplacementName(n.getString());  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  n  =  getReplacementName(n.getString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  n  =  getReplacementName(n.getString());	  n.setString(getReplacementName(n.getString()));    Node    n.setString(getReplacementName(n.getString()));    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	7	None	replace
170	[BUG]  [BUGGY]  n.setString(newName);  Node  n.setString(getReplacementName(n.getString()));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName);  Node  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName);  Node  n.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    Node    n.setString(getReplacementName(n.getString()));    	non-compiled	[CE]  ';'  expected	7	None	replace
171	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_TYPE);  [CE]  cannot  find  symbol  IS_UNKNOWN_TYPE  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNKNOWN_TYPE);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_TYPE);	  n.removeProp(Node.IS_UNKNOWN_PROPERTY);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_TYPE	129	None	replace
172	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROPERTY,  newName);  [CE]  cannot  find  symbol  IS_UNKNOWN_PROPERTY  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROPERTY,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_PROPERTY,  newName);	  n.removeProp(Node.IS_UNKNOWN_PROPERTY);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_PROPERTY	129	None	replace
173	[BUG]  [BUGGY]  NAME_ID_SEPARATOR.setString(idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NAME_ID_SEPARATOR.setString(idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NAME_ID_SEPARATOR.setString(idPrefix);	  NAME_ID_SEPARATOR.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	90	None	replace
174	[BUG]  [BUGGY]  NAME_ID_SEPARATOR.setString(n.getString());  [CE]  cannot  find  symbol  NAME_ID_SEPARATOR  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NAME_ID_SEPARATOR.setString(n.getString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NAME_ID_SEPARATOR.setString(n.getString());	  NAME_ID_SEPARATOR.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NAME_ID_SEPARATOR	90	None	replace
175	[BUG]  [BUGGY]  STRICT_NAME_SEPARATOR.setString(newName);  [CE]  cannot  find  symbol  STRICT_NAME_SEPARATOR  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  STRICT_NAME_SEPARATOR.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	STRICT_NAME_SEPARATOR.setString(newName);	  NAME_ID_SEPARATOR.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  STRICT_NAME_SEPARATOR	90	None	replace
176	[BUG]  [BUGGY]  Name.ID_SEPARATOR.setString(newName);  [CE]  package  Name  does  not  exist  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Name.ID_SEPARATOR.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Name.ID_SEPARATOR.setString(newName);	  NAME_ID_SEPARATOR.setString(newName);    	non-compiled	[CE]  package  Name  does  not  exist	90	None	replace
177	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Node  name  =  n.getLastChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Node  name  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Node  name  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	24	None	add
178	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Node  name  =  n.getFirstChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Node  name  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Node  name  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	24	None	add
179	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Name  name  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Name  name  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Name  name  =  n.getLastChild();	  timeout    	non-compiled	[CE]  cannot  find  symbol	24	None	add
180	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Node  name  =  n.getLastChild());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Node  name  =  n.getLastChild());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Node  name  =  n.getLastChild());	  timeout    	non-compiled	[CE]  ';'  expected	24	None	add
181	[BUG]  [BUGGY]  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    name    =    n.getLastChild();    n  =  n.getLastChild();	  timeout    	compilable	timeout	24	1	add
182	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  n  =  n.getLastChild();  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    n  =  n.getLastChild();	  timeout    	compilable	timeout	24	1	add
183	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  node  =  n.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  node  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    node  =  n.getLastChild();	  timeout    	non-compiled	[CE]  cannot  find  symbol  node	24	None	add
184	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Tode  name  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Tode  name  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Tode  name  =  n.getLastChild();	  timeout    	non-compiled	[CE]  cannot  find  symbol	24	None	add
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newName);  [CE]  cannot  find  symbol  compiler  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  parent,  newName);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  compiler	145	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer);  [CE]  cannot  find  symbol  compiler  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  rootRenamer);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  compiler	145	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  uniqueIdSupplier);  [CE]  cannot  find  symbol  compiler  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  uniqueIdSupplier);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  parent,  uniqueIdSupplier);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  compiler	145	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  rootRenamer);  [CE]  cannot  find  symbol  compiler  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  parent,  rootRenamer);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  compiler	145	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nameUsage);  [CE]  cannot  find  symbol  compiler  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  parent,  nameUsage);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  compiler	145	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  global);  [CE]  cannot  find  symbol  compiler  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  global);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  parent,  global);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  compiler	145	None	replace
191	[BUG]  [BUGGY]  n.addChildToFront(newName,  newName,  parent);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  newName,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  newName,  parent);	  n.addChildToFront(newName,    newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	67	None	replace
192	[BUG]  [BUGGY]  n.addChildToFront(newName,  newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  newName,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  newName,  nameUsage);	  n.addChildToFront(newName,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	67	None	replace
193	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	142	1	replace
194	[BUG]  [BUGGY]  n.setString(newName  +  getReplacementName(n.getString()));  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	142	1	replace
195	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	142	1	replace
196	[BUG]  [BUGGY]  n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	142	1	replace
197	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()));  n.setString(newName  + "_- "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + ": "  +  getReplacementName(n.getString()));  n.setString(newName  + "_- "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_-       "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	57	1	replace
198	[BUG]  [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()));  n.setString(newName  + "_- "  +  getReplacementName(n.getString()));  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()));  n.setString(newName  + "_- "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ": "  +  getReplacementName(n.getString()));  n.setString(newName  + "_- "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_-       "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	57	1	replace
199	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	82	1	add
200	[BUG]  [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	82	1	add
201	[BUG]  [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  Node  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  Node  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    Node  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  	82	None	add
202	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  + ",._   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    n.setString(newName  + ",._   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	82	1	add
203	[BUG]  [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  + ",._   "  +  getReplacementName(n.getString()));  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  + ",._   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    n.setString(newName  + ",._   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	82	1	add
204	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._... "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "._... "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	82	1	add
205	[BUG]  [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._... "  +  getReplacementName(n.getString()));  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._... "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "._... "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	82	1	add
206	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    n.removeProp(Node.IS_CONSTANT_NAME  +  1);	  timeout    	compilable	timeout	124	1	add
207	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    n.removeProp(Node.IS_CONSTANT_NAME  +  1);	  timeout    	compilable	timeout	124	1	add
208	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  Node  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  Node  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    Node  n.removeProp(Node.IS_CONSTANT_NAME  +  1);	  timeout    	non-compiled	[CE]  ';'  expected	124	None	add
209	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    parent.replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME  +  1);	  timeout    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	124	None	add
210	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.getCompiler().reportCodeChange();	  timeout    	non-compiled	[CE]  cannot  find  symbol	124	None	add
211	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  node.removeProp(Node.IS_CONSTANT_NAME  +  1);  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  node.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    node.removeProp(Node.IS_CONSTANT_NAME  +  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol  node	124	None	add
212	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.replaceChild(n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.replaceChild(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.replaceChild(n,  newName);	  timeout    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	124	None	add
213	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  getReplacementName(n.getString()));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  getReplacementName(n.getString()));	  n.replaceChild(n,    newName,    nameUsage);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	50	None	replace
214	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  nameStack.peek());  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  nameStack.peek());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  nameStack.peek());	  n.replaceChild(n,    newName,    nameUsage);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	50	None	replace
215	[BUG]  [BUGGY]  NodeUtil.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
216	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName).replaceChild(n,  parent);  [CE]  no  suitable  method  found  for  removeProp(int,String)  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName).replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName).replaceChild(n,  parent);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,String)	118	None	replace
217	[BUG]  [BUGGY]  Node.IS_CONSTANT_NAME.removeProp(Node.IS_CONSTANT_NAME);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node.IS_CONSTANT_NAME.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node.IS_CONSTANT_NAME.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    node.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  int  cannot  be  dereferenced	116	None	replace
218	[BUG]  [BUGGY]  Node  node  =  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  node  =  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  node  =  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    node.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  incompatible  types	116	None	replace
219	[BUG]  [BUGGY]  Node.removeProp(Node.IS_CONSTANT_NAME);  [CE]  non-static  method  removeProp(int)  cannot  be  referenced  from  a  static  context  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    node.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  non-static  method  removeProp(int)  cannot  be  referenced  from  a  static  context	116	None	replace
220	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  node  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  node  =  n.getFirstChild();	  n.removeProp(Node.IS_CONSTANT_NAME);    node.removeProp(Node.IS_CONSTANT_NAME);    	compilable	timeout	116	1	replace
221	[BUG]  [BUGGY]  Node  node  =  n.getFirstChild();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  node  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  node  =  n.getFirstChild();	  n.removeProp(Node.IS_CONSTANT_NAME);    node.removeProp(Node.IS_CONSTANT_NAME);    	compilable	timeout	116	1	replace
222	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()));  nameStack.pop();	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    nameStack.pop();    timeout    	compilable	timeout	9	1	replace
223	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  nameStack.pop();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));  nameStack.pop();	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    nameStack.pop();    timeout    	compilable	timeout	9	1	replace
224	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));  nameStack.peek();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()));  nameStack.peek();	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    nameStack.pop();    timeout    	compilable	timeout	9	1	replace
225	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  nameStack.peek();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));  nameStack.peek();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));  nameStack.peek();	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    nameStack.pop();    timeout    	compilable	timeout	9	1	replace
226	[BUG]  [BUGGY]  Number.setString(newName,  getReplacementName(n.getString()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Number.setString(newName,  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Number.setString(newName,  getReplacementName(n.getString()));	  Number.setString(newName);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
227	[BUG]  [BUGGY]  Number.setString(newName,  n.getString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Number.setString(newName,  n.getString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Number.setString(newName,  n.getString());	  Number.setString(newName);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
228	[BUG]  [BUGGY]  NodeUtil.setString(newName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.setString(newName);	  Number.setString(newName);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
229	[BUG]  [BUGGY]  Number.setString(newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Number.setString(newName,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Number.setString(newName,  nameUsage);	  Number.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	14	None	replace
230	[BUG]  [BUGGY]  Number.setString(newName,  n);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Number.setString(newName,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Number.setString(newName,  n);	  Number.setString(newName);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
231	[BUG]  [BUGGY]  Node  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    Node    n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    	non-compiled	[CE]  	55	None	replace
232	[BUG]  [BUGGY]  Node  n  =  newName  + "_ "  +  getReplacementName(n.getString());  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  n  =  newName  + "_ "  +  getReplacementName(n.getString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  n  =  newName  + "_ "  +  getReplacementName(n.getString());	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    Node    n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	55	None	replace
233	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  n.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeChild(parent);  n.getProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);    timeout    	compilable	timeout	134	1	replace
234	[BUG]  [BUGGY]  n.removeChild(parent);  n.getProp(Node.IS_CONSTANT_NAME);  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  n.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);  n.getProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);    timeout    	compilable	timeout	134	1	replace
235	[BUG]  [BUGGY]  n.removeChild(newName);  n.getProp(Node.IS_CONSTANT_NAME);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName);  n.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName);  n.getProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);    timeout    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	134	None	replace
236	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   "._     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +   "._       "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	139	1	add
237	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   "._     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   "._     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +   "._       "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	139	1	add
238	[BUG]  [BUGGY]  n.removeProp(Node.IS_PROP,  newName);  [CE]  cannot  find  symbol  IS_PROP  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_PROP,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_PROP,  newName);	  n.removeProp(Node.IS_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_PROP	33	None	replace
239	[BUG]  [BUGGY]  n.replaceChild(n,  parent,  newName,  null);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent,  newName,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  parent,  newName,  null);	  n.replaceChild(n,    newName,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	102	None	replace
240	[BUG]  [BUGGY]  n.replaceChild(n,  parent,  null);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  parent,  null);	  n.replaceChild(n,    newName,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	102	None	replace
241	[BUG]  [BUGGY]  n.replaceChild(parent,  newName,  null);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(parent,  newName,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(parent,  newName,  null);	  n.replaceChild(n,    newName,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	102	None	replace
242	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  parent,  null);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  parent,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  parent,  null);	  n.replaceChild(n,    newName,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	102	None	replace
243	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  nameUsage,  null);  [CE]  cannot  find  symbol  nameUsage  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  nameUsage,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  nameUsage,  null);	  n.replaceChild(n,    newName,    null);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	102	None	replace
244	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  null,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  null,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  null,  nameUsage);	  n.replaceChild(n,    newName,    null);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	102	None	replace
245	[BUG]  [BUGGY]  n.removeChild(name);  [CE]  cannot  find  symbol  name  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(name);	  n.removeChild(parent);    timeout    	non-compiled	[CE]  cannot  find  symbol  name	123	None	replace
246	[BUG]  [BUGGY]  ContextualRenamer  t  =  parent.getConstructor();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  t  =  parent.getConstructor();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  t  =  parent.getConstructor();	          ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	30	None	replace
247	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getConstructor(newName);  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  t  =  n.getConstructor(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  t  =  n.getConstructor(newName);	          ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	30	None	replace
248	[BUG]  [BUGGY]  ContextualRenamer  t  =  rootRenamer.getConstructor();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  t  =  rootRenamer.getConstructor();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  t  =  rootRenamer.getConstructor();	          ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	30	None	replace
249	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getConstructorInverter();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  t  =  n.getConstructorInverter();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  t  =  n.getConstructorInverter();	          ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	30	None	replace
250	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getInitializingConstructor();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  t  =  n.getInitializingConstructor();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  t  =  n.getInitializingConstructor();	          ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	30	None	replace
251	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getConstructorInvocation();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  t  =  n.getConstructorInvocation();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  t  =  n.getConstructorInvocation();	          ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	30	None	replace
252	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  nameUsage);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    global);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	77	None	replace
253	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  true);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  true);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  true);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    global);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
254	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  this);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  this);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  this);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    global);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
255	[BUG]  [BUGGY]  n.setString(newName  + "_'  +  getReplacementName(n.getString()));  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_'  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_'  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_'    +    getReplacementName(n.getString()));    	non-compiled	[CE]  unclosed  string  literal	87	None	replace
256	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(newName,  parent);  [CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(newName,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(newName,  parent);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	non-compiled	[CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;	138	None	replace
257	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  parent);  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(name,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(name,  parent);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	non-compiled	[CE]  cannot  find  symbol  name	138	None	replace
258	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  newName);  [CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,  newName);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	non-compiled	[CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;	138	None	replace
259	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  newName);  [CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,  parent,  newName);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	non-compiled	[CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;	138	None	replace
260	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  renamer);  [CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,  renamer);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	non-compiled	[CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;	138	None	replace
261	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  name);  [CE]  cannot  find  symbol  name  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,  name);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	non-compiled	[CE]  cannot  find  symbol  name	138	None	replace
262	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  n);  [CE]  cannot  find  symbol  name  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(name,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(name,  n);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	non-compiled	[CE]  cannot  find  symbol  name	138	None	replace
263	[BUG]  [BUGGY]  n.replaceChild(n,  rootRenamer,  newName,  renamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  rootRenamer,  newName,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  rootRenamer,  newName,  renamer);	  n.replaceChild(n,    newName,    renamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	100	None	replace
264	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  rootRenamer,  renamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  rootRenamer,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  rootRenamer,  renamer);	  n.replaceChild(n,    newName,    renamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	100	None	replace
265	[BUG]  [BUGGY]  n.replaceChild(parent,  newName,  renamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(parent,  newName,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(parent,  newName,  renamer);	  n.replaceChild(n,    newName,    renamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	100	None	replace
266	[BUG]  [BUGGY]  n.replaceChild(t,  n,  newName,  renamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(t,  n,  newName,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(t,  n,  newName,  renamer);	  n.replaceChild(n,    newName,    renamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	100	None	replace
267	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  renamer,  rootRenamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  renamer,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  renamer,  rootRenamer);	  n.replaceChild(n,    newName,    renamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	100	None	replace
268	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  parent,  renamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  parent,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  parent,  renamer);	  n.replaceChild(n,    newName,    renamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	100	None	replace
269	[BUG]  [BUGGY]  parent.removeProp(Node.IS_CONSTANT_PREFIX);  [CE]  cannot  find  symbol  IS_CONSTANT_PREFIX  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parent.removeProp(Node.IS_CONSTANT_PREFIX);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parent.removeProp(Node.IS_CONSTANT_PREFIX);	  n.removeProp(Node.IS_CONSTANT_PREFIX);    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTANT_PREFIX	74	None	replace
270	[BUG]  [BUGGY]  n.addChildToFront(newName,  rootRenamer,  n);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  rootRenamer,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  rootRenamer,  n);	  n.addChildToFront(newName,    n);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	96	None	replace
271	[BUG]  [BUGGY]  n.addChildToFront(newName,  parent,  n);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  parent,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  parent,  n);	  n.addChildToFront(newName,    n);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	96	None	replace
272	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getModule(),  parent);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getModule(),  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getModule(),  parent);	  n.addChildToFront(newName,    t.getModule());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	131	None	replace
273	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getModule(),  newName);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getModule(),  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getModule(),  newName);	  n.addChildToFront(newName,    t.getModule());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	131	None	replace
274	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getModule(),  renamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getModule(),  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getModule(),  renamer);	  n.addChildToFront(newName,    t.getModule());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	131	None	replace
275	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getModule(),  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getModule(),  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getModule(),  nameUsage);	  n.addChildToFront(newName,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol  nameUsage	131	None	replace
276	[BUG]  [BUGGY]  n.addChildToFront(newName,  parent,  t.getModule());  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  parent,  t.getModule());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  parent,  t.getModule());	  n.addChildToFront(newName,    t.getModule());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	131	None	replace
277	[BUG]  [BUGGY]  n.addChildToFront(newName,  parent.getModule());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  parent.getModule());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  parent.getModule());	  n.addChildToFront(newName,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
278	[BUG]  [BUGGY]  n.addChildToFront(newName,  nameStack.peek());  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  nameStack.peek());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  nameStack.peek());	  n.addChildToFront(newName,    t.getModule());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	131	None	replace
279	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  newName);  n.setString(GetReplacementName(n.getString()));  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()),  newName);  n.setString(GetReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  newName);  n.setString(GetReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(GetReplacementName(n.getString()));    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	12	None	replace
280	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  getReplacementName(n.getString()));  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()),  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(GetReplacementName(n.getString()));    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	12	None	replace
281	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP,  name);  [CE]  cannot  find  symbol  IS_UNKNOWN_PROP  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP,  name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_PROP,  name);	  n.removeProp(Node.IS_UNKNOWN_PROP,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_PROP	32	None	replace
282	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP,  parent);  [CE]  cannot  find  symbol  IS_UNKNOWN_PROP  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_PROP,  parent);	  n.removeProp(Node.IS_UNKNOWN_PROP,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_PROP	32	None	replace
283	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP,  newName  +  1);  [CE]  cannot  find  symbol  IS_UNKNOWN_PROP  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP,  newName  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_PROP,  newName  +  1);	  n.removeProp(Node.IS_UNKNOWN_PROP,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_PROP	32	None	replace
284	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()).toString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()).toString());	  n.setString(getReplacementName(n.getString()    +    1));    timeout    	compilable	timeout	3	1	replace
285	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()).toString());  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()).toString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()).toString());	  n.setString(getReplacementName(n.getString()    +    1));    timeout    	compilable	timeout	3	1	replace
286	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeChild(parent);    n.removeChild(parent);	  timeout    	compilable	timeout	122	1	add
287	[BUG]  [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    n.removeChild(parent);	  timeout    	compilable	timeout	122	1	add
288	[BUG]  [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getFirstChild();  n.removeChild(parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getFirstChild();  n.removeChild(parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    Node  n  =  parent.getFirstChild();  n.removeChild(parent);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	122	None	add
289	[BUG]  [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getParent();  n.removeChild(parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getParent();  n.removeChild(parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    Node  n  =  parent.getParent();  n.removeChild(parent);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	122	None	add
290	[BUG]  [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  parent.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  parent.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    n.removeChild(parent);  parent.getCompiler().reportCodeChange();	  timeout    	non-compiled	[CE]  cannot  find  symbol	122	None	add
291	[BUG]  [BUGGY]  n.removeChild(parent);  Node  parent  =  n.getParent();  n.removeChild(parent);  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  Node  parent  =  n.getParent();  n.removeChild(parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    Node  parent  =  n.getParent();  n.removeChild(parent);	  timeout    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	122	None	add
292	[BUG]  [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getFirstChild();  n.removeChild(newName);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getFirstChild();  n.removeChild(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    Node  n  =  parent.getFirstChild();  n.removeChild(newName);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	122	None	add
293	[BUG]  [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  parent.replaceChild(n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  parent.replaceChild(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    n.removeChild(parent);  parent.replaceChild(n,  newName);	  timeout    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	122	None	add
294	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()    +    1));    n.setString(getReplacementName(n.getString()  +  1));	  timeout    	compilable	timeout	2	1	add
295	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()    +    1));    n.setString(getReplacementName(n.getString()  +  1));	  timeout    	compilable	timeout	2	1	add
296	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  Node  n.setString(getReplacementName(n.getString()  +  1));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  Node  n.setString(getReplacementName(n.getString()  +  1));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()    +    1));    Node  n.setString(getReplacementName(n.getString()  +  1));	  timeout    	non-compiled	[CE]  ';'  expected	2	None	add
297	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  parent.replaceChild(n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  parent.replaceChild(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()    +    1));    n.setString(getReplacementName(n.getString()  +  1));  parent.replaceChild(n,  newName);	  timeout    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	add
298	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()    +    1));    n.setString(getReplacementName(n.getString()  +  1));  nameStack.pop();	  timeout    	compilable	timeout	2	1	add
299	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  nameStack.pop();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()    +    1));    n.setString(getReplacementName(n.getString()  +  1));  nameStack.pop();	  timeout    	compilable	timeout	2	1	add
300	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  case  Token.FUNCTION:  nameStack.pop();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  case  Token.FUNCTION:  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()    +    1));    n.setString(getReplacementName(n.getString()  +  1));  case  Token.FUNCTION:  nameStack.pop();	  timeout    	non-compiled	[CE]  orphaned  case	2	None	add
301	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  this.nameUsage  =  nameStack.peek();  [CE]  cannot  find  symbol  nameUsage  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  this.nameUsage  =  nameStack.peek();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()    +    1));    n.setString(getReplacementName(n.getString()  +  1));  this.nameUsage  =  nameStack.peek();	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	2	None	add
302	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   ",_     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +   ",_       "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	60	1	add
303	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   ",_     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_   "  +  getReplacementName(n.getString()));  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   ",_     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +   ",_       "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	60	1	add
304	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   ",_     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_'  +  getReplacementName(n.getString()));  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   ",_     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_'  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +   ",_       "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_'  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  unclosed  string  literal	60	None	add
305	[BUG]  [BUGGY]  n.setString(replacementName(n.getString()));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(replacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(replacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(replacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
306	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  newName);  n.setString(replacementName(n.getString()));  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()),  newName);  n.setString(replacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  newName);  n.setString(replacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(replacementName(n.getString()));    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	10	None	replace
307	[BUG]  [BUGGY]  NamingStrategy.setString(getReplacementName(n.getString()));  n.setString(replacementName(n.getString()));  [CE]  cannot  find  symbol  NamingStrategy  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NamingStrategy.setString(getReplacementName(n.getString()));  n.setString(replacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NamingStrategy.setString(getReplacementName(n.getString()));  n.setString(replacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(replacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol  NamingStrategy	10	None	replace
308	[BUG]  [BUGGY]  n.addChildToFront(newName,  t,  parent);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t,  parent);	  n.addChildToFront(newName,    t);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
309	[BUG]  [BUGGY]  n.addChildToFront(newName,  parent,  t);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  parent,  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  parent,  t);	  n.addChildToFront(newName,    t);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
310	[BUG]  [BUGGY]  n.addChildToFront(newName,  t,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t,  nameUsage);	  n.addChildToFront(newName,    t);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	130	None	replace
311	[BUG]  [BUGGY]  n.addChildToFront(newName,  rootRenamer,  t);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  rootRenamer,  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  rootRenamer,  t);	  n.addChildToFront(newName,    t);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
312	[BUG]  [BUGGY]  n.addChildToFront(newName,  n,  t);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  n,  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  n,  t);	  n.addChildToFront(newName,    t);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
313	[BUG]  [BUGGY]  n.addChildToFront(newName,  nameStack,  t);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  nameStack,  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  nameStack,  t);	  n.addChildToFront(newName,    t);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
314	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_PROP,  newName);  [CE]  cannot  find  symbol  IS_FUNCTION_PROP  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION_PROP,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_PROP,  newName);	  n.removeProp(Node.IS_FUNCTION_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_PROP	17	None	replace
315	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName)  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName)  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName)	  n.addProp(Node.IS_CONSTANT_NAME,    newName)    	non-compiled	[CE]  ';'  expected	106	None	replace
316	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName)  {  ';'  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName)  {  ';'  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName)  {  ';'	  n.addProp(Node.IS_CONSTANT_NAME,    newName)    	non-compiled	[CE]  ';'  expected	106	None	replace
317	[BUG]  [BUGGY]  n.addReference(Node.IS_CONSTANT_NAME,  newName)  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addReference(Node.IS_CONSTANT_NAME,  newName)  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addReference(Node.IS_CONSTANT_NAME,  newName)	  n.addProp(Node.IS_CONSTANT_NAME,    newName)    	non-compiled	[CE]  ';'  expected	106	None	replace
318	[BUG]  [BUGGY]  n.replaceChild(t,  n,  parent);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(t,  n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(t,  n,  parent);	  n.replaceChild(n,    newName,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	48	None	replace
319	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  parent,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  parent,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  parent,  nameUsage);	  n.replaceChild(n,    newName,    parent);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	48	None	replace
320	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  rootRenamer,  parent);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  rootRenamer,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  rootRenamer,  parent);	  n.replaceChild(n,    newName,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	48	None	replace
321	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+ ") ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString())+ ") ");	  n.setString(getReplacementName(n.getString()    +   ")   ");    	compilable	timeout	127	1	replace
322	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+ ") ");  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+ ") ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+ ") ");	  n.setString(getReplacementName(n.getString()    +   ")   ");    	compilable	timeout	127	1	replace
323	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()) ");  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()) ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()) ");	  n.setString(getReplacementName(n.getString()    +   ")   ");    	non-compiled	[CE]  unclosed  string  literal	127	None	replace
324	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()) ") ");  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()) ") ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()) ") ");	  n.setString(getReplacementName(n.getString()    +   ")   ");    	non-compiled	[CE]  	127	None	replace
325	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())]);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())]);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())]);	  n.setString(getReplacementName(n.getString()    +   ")   ");    	non-compiled	[CE]  ')'  expected	127	None	replace
326	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1), " ");  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1), " ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()  +  1), " ");	  n.setString(getReplacementName(n.getString()    +   ")   ");    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	127	None	replace
327	[BUG]  [BUGGY]  n.removeChild(newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName);  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	37	None	replace
328	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeChild(parent);  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	compilable	timeout	37	1	replace
329	[BUG]  [BUGGY]  n.removeChild(parent);  n.removeProp(Node.IS_CONSTANT_NAME);  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	compilable	timeout	37	1	replace
330	[BUG]  [BUGGY]  node.removeProp(Node.IS_ID_SEPARATOR);  [CE]  cannot  find  symbol  IS_ID_SEPARATOR  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  node.removeProp(Node.IS_ID_SEPARATOR);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	node.removeProp(Node.IS_ID_SEPARATOR);	  n.removeProp(Node.IS_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_ID_SEPARATOR	103	None	replace
331	[BUG]  [BUGGY]  parent.removeProp(Node.IS_ID_SEPARATOR);  [CE]  cannot  find  symbol  IS_ID_SEPARATOR  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parent.removeProp(Node.IS_ID_SEPARATOR);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parent.removeProp(Node.IS_ID_SEPARATOR);	  n.removeProp(Node.IS_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_ID_SEPARATOR	103	None	replace
332	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_ID_SEPARATOR);  [CE]  cannot  find  symbol  IS_ID_SEPARATOR  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  renamer.removeProp(Node.IS_ID_SEPARATOR);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	renamer.removeProp(Node.IS_ID_SEPARATOR);	  n.removeProp(Node.IS_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_ID_SEPARATOR	103	None	replace
333	[BUG]  [BUGGY]  NamingStrategy.setString(newName,  n.getString());  [CE]  cannot  find  symbol  NamingStrategy  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NamingStrategy.setString(newName,  n.getString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NamingStrategy.setString(newName,  n.getString());	  NamingStrategy.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NamingStrategy	13	None	replace
334	[BUG]  [BUGGY]  NamingStrategy.setString(newName,  getReplacementName(n.getString()));  [CE]  cannot  find  symbol  NamingStrategy  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NamingStrategy.setString(newName,  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NamingStrategy.setString(newName,  getReplacementName(n.getString()));	  NamingStrategy.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NamingStrategy	13	None	replace
335	[BUG]  [BUGGY]  NamingStrategy.setString(newName,  nameStack.peek());  [CE]  cannot  find  symbol  NamingStrategy  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NamingStrategy.setString(newName,  nameStack.peek());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NamingStrategy.setString(newName,  nameStack.peek());	  NamingStrategy.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NamingStrategy	13	None	replace
336	[BUG]  [BUGGY]  NamingStrategy.setName(newName);  [CE]  cannot  find  symbol  NamingStrategy  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NamingStrategy.setName(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NamingStrategy.setName(newName);	  NamingStrategy.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NamingStrategy	13	None	replace
337	[BUG]  [BUGGY]  NamingStrategy.setString(newName,  null);  [CE]  cannot  find  symbol  NamingStrategy  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NamingStrategy.setString(newName,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NamingStrategy.setString(newName,  null);	  NamingStrategy.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NamingStrategy	13	None	replace
338	[BUG]  [BUGGY]  NamingStrategy.setString(n.getString());  [CE]  cannot  find  symbol  NamingStrategy  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NamingStrategy.setString(n.getString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NamingStrategy.setString(n.getString());	  NamingStrategy.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NamingStrategy	13	None	replace
339	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_SIGNATURE,  newName);  [CE]  cannot  find  symbol  IS_FUNCTION_SIGNATURE  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION_SIGNATURE,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_SIGNATURE,  newName);	  n.removeProp(Node.IS_FUNCTION_SIGNATURE);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_SIGNATURE	19	None	replace
340	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_SEPARATOR);  [CE]  cannot  find  symbol  IS_FUNCTION_SEPARATOR  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION_SEPARATOR);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_SEPARATOR);	  n.removeProp(Node.IS_FUNCTION_SIGNATURE);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_SEPARATOR	19	None	replace
341	[BUG]  [BUGGY]  n.replaceChild(parent,  newName,  rootRenamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(parent,  newName,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(parent,  newName,  rootRenamer);	  n.replaceChild(n,    newName,    rootRenamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	101	None	replace
342	[BUG]  [BUGGY]  n.replaceChild(t,  n,  newName,  rootRenamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(t,  n,  newName,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(t,  n,  newName,  rootRenamer);	  n.replaceChild(n,    newName,    rootRenamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	101	None	replace
343	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  parent,  rootRenamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  parent,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  parent,  rootRenamer);	  n.replaceChild(n,    newName,    rootRenamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	101	None	replace
344	[BUG]  [BUGGY]  n.replaceChild(n,  rootRenamer,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  rootRenamer,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  rootRenamer,  newName);	  n.replaceChild(n,    newName,    rootRenamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	101	None	replace
345	[BUG]  [BUGGY]  n.replaceChild(n,  name,  rootRenamer);  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  name,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  name,  rootRenamer);	  n.replaceChild(n,    newName,    rootRenamer);    	non-compiled	[CE]  cannot  find  symbol  name	101	None	replace
346	[BUG]  [BUGGY]  N.setString(getReplacementName(n.getString()));  [CE]  cannot  find  symbol  N  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  N.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	N.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    N.setString(getReplacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol  N	120	None	replace
347	[BUG]  [BUGGY]  ner.setString(getReplacementName(n.getString()));  N.setString(getReplacementName(n.getString()));  [CE]  cannot  find  symbol  ner  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ner.setString(getReplacementName(n.getString()));  N.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ner.setString(getReplacementName(n.getString()));  N.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    N.setString(getReplacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol  ner	120	None	replace
348	[BUG]  [BUGGY]  n.replaceChild(n,  nameStack,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  nameStack,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  nameStack,  newName);	  n.replaceChild(n,    newName,    nameStack);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	51	None	replace
349	[BUG]  [BUGGY]  n.replaceChild(parent,  newName,  nameStack);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(parent,  newName,  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(parent,  newName,  nameStack);	  n.replaceChild(n,    newName,    nameStack);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	51	None	replace
350	[BUG]  [BUGGY]  n.replaceChild(nameStack,  newName,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(nameStack,  newName,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(nameStack,  newName,  newName);	  n.replaceChild(n,    newName,    nameStack);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	51	None	replace
351	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  nameStack,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  nameStack,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  nameStack,  nameUsage);	  n.replaceChild(n,    newName,    nameStack);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	51	None	replace
352	[BUG]  [BUGGY]  n.replaceChild(n,  parent,  nameStack);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent,  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  parent,  nameStack);	  n.replaceChild(n,    newName,    nameStack);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	51	None	replace
353	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  n.setString(getReplacementName(n.getString())+  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString())+    1);    n.setString(getReplacementName(n.getString())+  1);	  timeout    	compilable	timeout	88	1	add
354	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  n.setString(getReplacementName(n.getString())+  1);  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  n.setString(getReplacementName(n.getString())+  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+    1);    n.setString(getReplacementName(n.getString())+  1);	  timeout    	compilable	timeout	88	1	add
355	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  Node  n.setString(getReplacementName(n.getString())+  1);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  Node  n.setString(getReplacementName(n.getString())+  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+    1);    Node  n.setString(getReplacementName(n.getString())+  1);	  timeout    	non-compiled	[CE]  ';'  expected	88	None	add
356	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  node.setString(getReplacementName(n.getString())+  1);  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  node.setString(getReplacementName(n.getString())+  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+    1);    node.setString(getReplacementName(n.getString())+  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol  node	88	None	add
357	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  n.setString(getReplacementName(n.getString())+  1));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  n.setString(getReplacementName(n.getString())+  1));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+    1);    n.setString(getReplacementName(n.getString())+  1));	  timeout    	non-compiled	[CE]  ';'  expected	88	None	add
358	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  newName.setString(getReplacementName(n.getString())+  1);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  newName.setString(getReplacementName(n.getString())+  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+    1);    newName.setString(getReplacementName(n.getString())+  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol	88	None	add
359	[BUG]  [BUGGY]  n.replaceChild(n,  parent,  newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent,  newName,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  parent,  newName,  nameUsage);	  n.replaceChild(n,    parent,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	49	None	replace
360	[BUG]  [BUGGY]  n.replaceChild(t,  n,  parent,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(t,  n,  parent,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(t,  n,  parent,  newName);	  n.replaceChild(n,    parent,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	49	None	replace
361	[BUG]  [BUGGY]  n.replaceChild(n,  parent,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent,  newName,  idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  parent,  newName,  idPrefix);	  n.replaceChild(n,    parent,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	49	None	replace
362	[BUG]  [BUGGY]  n.replaceChild(n,  parent,  newName,  nameStack);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent,  newName,  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  parent,  newName,  nameStack);	  n.replaceChild(n,    parent,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	49	None	replace
363	[BUG]  [BUGGY]  n.replaceChild(parent,  n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(parent,  n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(parent,  n,  newName);	  n.replaceChild(n,    parent,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	49	None	replace
364	[BUG]  [BUGGY]  n.removeProp(Node.IS_NOT_FOUND);  [CE]  cannot  find  symbol  IS_NOT_FOUND  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_NOT_FOUND);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_NOT_FOUND);	  n.removeProp(Node.IS_UNKNOWN);    	non-compiled	[CE]  cannot  find  symbol  IS_NOT_FOUND	128	None	replace
365	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  n.replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.replaceChild(n,    parent);    n.replaceChild(n,  parent);	  timeout    	compilable	timeout	45	1	add
366	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  n.replaceChild(n,  parent);  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  n.replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    n.replaceChild(n,  parent);	  timeout    	compilable	timeout	45	1	add
367	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  nameStack.peek();  n.replaceChild(n,  parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  nameStack.peek();  n.replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    Node  n  =  nameStack.peek();  n.replaceChild(n,  parent);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	45	None	add
368	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getFirstChild();  n.replaceChild(n,  parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getFirstChild();  n.replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    Node  n  =  parent.getFirstChild();  n.replaceChild(n,  parent);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	45	None	add
369	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getFirstChild();  n.replaceChild(n,  newName);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getFirstChild();  n.replaceChild(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    Node  n  =  parent.getFirstChild();  n.replaceChild(n,  newName);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	45	None	add
370	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getFirstChild();  n.replaceChild(n,  renamer);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getFirstChild();  n.replaceChild(n,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    Node  n  =  parent.getFirstChild();  n.replaceChild(n,  renamer);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	45	None	add
371	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getParent();  n.replaceChild(n,  parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getParent();  n.replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    Node  n  =  parent.getParent();  n.replaceChild(n,  parent);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	45	None	add
372	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getParent();  n.replaceChild(n,  newName);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getParent();  n.replaceChild(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    Node  n  =  parent.getParent();  n.replaceChild(n,  newName);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	45	None	add
373	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getParent();  n.replaceChild(n,  renamer);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getParent();  n.replaceChild(n,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    Node  n  =  parent.getParent();  n.replaceChild(n,  renamer);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	45	None	add
374	[BUG]  [BUGGY]  newName.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  newName.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	newName.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    newName.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
375	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newName,  parent);  [CE]  cannot  find  symbol  compiler  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newName,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  newName,  parent);	  NodeTraversal.traverse(compiler,    n,    rootRenamer,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	111	None	replace
376	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer,  newName,  global);  [CE]  cannot  find  symbol  compiler  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer,  newName,  global);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  rootRenamer,  newName,  global);	  NodeTraversal.traverse(compiler,    n,    rootRenamer,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	111	None	replace
377	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nameStack,  newName);  [CE]  cannot  find  symbol  compiler  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nameStack,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  nameStack,  newName);	  NodeTraversal.traverse(compiler,    n,    rootRenamer,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	111	None	replace
378	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRenamer,  newName,  global);  [CE]  cannot  find  symbol  compiler  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  rootRenamer,  newName,  global);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  rootRenamer,  newName,  global);	  NodeTraversal.traverse(compiler,    n,    rootRenamer,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	111	None	replace
379	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  name,  newName);  [CE]  cannot  find  symbol  compiler  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  name,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  name,  newName);	  NodeTraversal.traverse(compiler,    n,    rootRenamer,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	111	None	replace
380	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  newName);  [CE]  cannot  find  symbol  compiler  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  parent,  n,  newName);	  NodeTraversal.traverse(compiler,    n,    rootRenamer,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	111	None	replace
381	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  ARGUMENTS);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  ARGUMENTS);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  ARGUMENTS);	  n.replaceChild(n,    newName,    idPrefix);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	143	None	replace
382	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  this);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  this);	  n.replaceChild(n,    newName,    idPrefix);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	143	None	replace
383	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  getReferenceName(n.getString()));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  getReferenceName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  getReferenceName(n.getString()));	  n.replaceChild(n,    newName,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
384	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  no  suitable  method  found  for  removeProp(int,String)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    parent.replaceChild(n,    newName);    n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,String)	39	None	replace
385	[BUG]  [BUGGY]  parent.replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parent.replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parent.replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    parent.replaceChild(n,    newName);    n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	39	None	replace
386	[BUG]  [BUGGY]  replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    parent.replaceChild(n,    newName);    n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
387	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  parent.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  parent.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  parent.getCompiler().reportCodeChange();	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);    parent.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
388	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  n.getCompiler().reportCodeChange();	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);    parent.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
389	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  parent.getCompiler().reportCodeChange  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  parent.getCompiler().reportCodeChange  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  parent.getCompiler().reportCodeChange	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);    parent.getCompiler().reportCodeChange();    	non-compiled	[CE]  not  a  statement	42	None	replace
390	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Node  name  =  n.getFirstChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Node  name  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Node  name  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	add
391	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Node  name  =  n.getLastChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Node  name  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Node  name  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	add
392	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Name  name  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Name  name  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Name  name  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  cannot  find  symbol	20	None	add
393	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    name    =    n.getFirstChild();    n  =  n.getFirstChild();	  timeout    	compilable	timeout	20	1	add
394	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  n  =  n.getFirstChild();  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    n  =  n.getFirstChild();	  timeout    	compilable	timeout	20	1	add
395	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Node  name  =  n.getfirstChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Node  name  =  n.getfirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Node  name  =  n.getfirstChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	add
396	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Node  name  =  n.getFirstChild());  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Node  name  =  n.getFirstChild());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Node  name  =  n.getFirstChild());	  timeout    	non-compiled	[CE]  ';'  expected	20	None	add
397	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  node  =  n.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  node  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    node  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  cannot  find  symbol  node	20	None	add
398	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  parent);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getCompiler(),  parent);	  n.addChildToFront(newName,    t.getCompiler());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	132	None	replace
399	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getCompiler(),  nameUsage);	  n.addChildToFront(newName,    t.getCompiler());    	non-compiled	[CE]  cannot  find  symbol  nameUsage	132	None	replace
400	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  rootRenamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getCompiler(),  rootRenamer);	  n.addChildToFront(newName,    t.getCompiler());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	132	None	replace
401	[BUG]  [BUGGY]  n.addChildToFront(newName,  parent,  t.getCompiler());  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  parent,  t.getCompiler());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  parent,  t.getCompiler());	  n.addChildToFront(newName,    t.getCompiler());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	132	None	replace
402	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  nameStack);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getCompiler(),  nameStack);	  n.addChildToFront(newName,    t.getCompiler());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	132	None	replace
403	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  newName);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getCompiler(),  newName);	  n.addChildToFront(newName,    t.getCompiler());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	132	None	replace
404	[BUG]  [BUGGY]  n.addChildToFront(newName,  rootRenamer,  t.getCompiler());  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  rootRenamer,  t.getCompiler());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  rootRenamer,  t.getCompiler());	  n.addChildToFront(newName,    t.getCompiler());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	132	None	replace
405	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()));  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + ": "  +  getReplacementName(n.getString()));  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	54	1	replace
406	[BUG]  [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()));  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()));  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ": "  +  getReplacementName(n.getString()));  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	54	1	replace
407	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  node.setString(newName  + "_ "  +  getReplacementName(n.getString()));  [CE]  cannot  find  symbol  node  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  node.setString(newName  + "_ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  node.setString(newName  + "_ "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  cannot  find  symbol  node	54	None	replace
408	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  n.setString(replacementName  + "_ "  +  getReplacementName(n.getString()));  [CE]  cannot  find  symbol  replacementName  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  n.setString(replacementName  + "_ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  n.setString(replacementName  + "_ "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  cannot  find  symbol  replacementName	54	None	replace
409	[BUG]  [BUGGY]  node.setString(getReplacementName(n.getString()));  [CE]  cannot  find  symbol  node  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  node.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	node.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    node.setString(getReplacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol  node	11	None	replace
410	[BUG]  [BUGGY]  Node  node  =  getReplacementName(n.getString());  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  node  =  getReplacementName(n.getString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  node  =  getReplacementName(n.getString());	  n.setString(getReplacementName(n.getString()));    node.setString(getReplacementName(n.getString()));    	non-compiled	[CE]  incompatible  types	11	None	replace
411	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));  parent.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()));  parent.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    node.setString(getReplacementName(n.getString()));    	compilable	timeout	11	1	replace
412	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  parent.setString(getReplacementName(n.getString()));  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));  parent.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));  parent.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    node.setString(getReplacementName(n.getString()));    	compilable	timeout	11	1	replace
413	[BUG]  [BUGGY]  Node  node  =  getReplacementName(n.getString());  n.setString(getReplacementName(n.getString()));  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  node  =  getReplacementName(n.getString());  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  node  =  getReplacementName(n.getString());  n.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    node.setString(getReplacementName(n.getString()));    	non-compiled	[CE]  incompatible  types	11	None	replace
414	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  nameStack);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  nameStack);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    nameUsage);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	85	None	replace
415	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  namePrefix);  [CE]  cannot  find  symbol  namePrefix  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  namePrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  namePrefix);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  namePrefix	85	None	replace
416	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  idPrefix);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	85	None	replace
417	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  n.getCompiler();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  compiler  =  n.getCompiler();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  compiler  =  n.getCompiler();	          ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
418	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerInstance();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerInstance();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  compiler  =  t.getCompilerInstance();	          ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
419	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompiler(n);  [CE]  method  getCompiler  in  class  NodeTraversal  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  compiler  =  t.getCompiler(n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  compiler  =  t.getCompiler(n);	          ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  method  getCompiler  in  class  NodeTraversal  cannot  be  applied  to  given  types;	121	None	replace
420	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerBuilder();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerBuilder();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  compiler  =  t.getCompilerBuilder();	          ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
421	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerConfig();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerConfig();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  compiler  =  t.getCompilerConfig();	          ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
422	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerInstance(n);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerInstance(n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  compiler  =  t.getCompilerInstance(n);	          ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
423	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ", "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + ", "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +   ",_       "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	61	1	replace
424	[BUG]  [BUGGY]  n.setString(newName  + ", "  +  getReplacementName(n.getString()));  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ", "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ", "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +   ",_       "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	61	1	replace
425	[BUG]  [BUGGY]  parent.addProp(Node.IS_CONSTANT_NAME,  n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parent.addProp(Node.IS_CONSTANT_NAME,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parent.addProp(Node.IS_CONSTANT_NAME,  n);	  parent.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
426	[BUG]  [BUGGY]  parent.addProp(Node.IS_CONSTANT_NAME,  newName,  global);  [CE]  cannot  find  symbol  global  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parent.addProp(Node.IS_CONSTANT_NAME,  newName,  global);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parent.addProp(Node.IS_CONSTANT_NAME,  newName,  global);	  parent.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  global	79	None	replace
427	[BUG]  [BUGGY]  parent.replaceProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parent.replaceProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parent.replaceProp(Node.IS_CONSTANT_NAME,  newName);	  parent.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
428	[BUG]  [BUGGY]  parent.addProp(Node.IS_CONSTANT_NAME,  newName,  n);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parent.addProp(Node.IS_CONSTANT_NAME,  newName,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parent.addProp(Node.IS_CONSTANT_NAME,  newName,  n);	  parent.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
429	[BUG]  [BUGGY]  Node  newName  =  parent.addProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  newName  =  parent.addProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  newName  =  parent.addProp(Node.IS_CONSTANT_NAME,  newName);	  parent.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	79	None	replace
430	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME  +  2);  [CE]  cannot  find  symbol  IS_FUNCTION_NAME  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME  +  2);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_NAME  +  2);	  n.removeProp(Node.IS_FUNCTION_NAME    +    1);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_NAME	115	None	replace
431	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  newName  +  1);  [CE]  cannot  find  symbol  IS_FUNCTION_NAME  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  newName  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_NAME,  newName  +  1);	  n.removeProp(Node.IS_FUNCTION_NAME    +    1);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_NAME	115	None	replace
432	[BUG]  [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()),  newName);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()),  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ": "  +  getReplacementName(n.getString()),  newName);	  n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	98	None	replace
433	[BUG]  [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()),  parent);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()),  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ": "  +  getReplacementName(n.getString()),  parent);	  n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	98	None	replace
434	[BUG]  [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()),  renamer);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()),  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ": "  +  getReplacementName(n.getString()),  renamer);	  n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	98	None	replace
435	[BUG]  [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()),  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()),  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ": "  +  getReplacementName(n.getString()),  nameUsage);	  n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	98	None	replace
436	[BUG]  [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()),  null);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()),  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ": "  +  getReplacementName(n.getString()),  null);	  n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	98	None	replace
437	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  name);  [CE]  cannot  find  symbol  IS_FUNCTION_NAME  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_NAME,  name);	  n.removeProp(Node.IS_FUNCTION_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_NAME	18	None	replace
438	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  parent);  [CE]  cannot  find  symbol  IS_FUNCTION_NAME  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_NAME,  parent);	  n.removeProp(Node.IS_FUNCTION_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_NAME	18	None	replace
439	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  renamer);  [CE]  cannot  find  symbol  IS_FUNCTION_NAME  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_NAME,  renamer);	  n.removeProp(Node.IS_FUNCTION_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_NAME	18	None	replace
440	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString())+ ",  newName);  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString())+ ",  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString())+ ",  newName);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  unclosed  string  literal	80	None	replace
441	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  n);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  n);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	80	None	replace
442	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1,  newName);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1,  newName);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	80	None	replace
443	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  name);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  name);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  cannot  find  symbol  name	80	None	replace
444	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  parent.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  name  =  parent.getLastChild();	          Node    name    =    n.getLastChild();    timeout    	compilable	timeout	25	1	replace
445	[BUG]  [BUGGY]  Node  name  =  parent.getLastChild();  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  parent.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  name  =  parent.getLastChild();	          Node    name    =    n.getLastChild();    timeout    	compilable	timeout	25	1	replace
446	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  parent.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  name  =  parent.getFirstChild();	          Node    name    =    n.getLastChild();    timeout    	compilable	timeout	25	1	replace
447	[BUG]  [BUGGY]  Node  name  =  parent.getFirstChild();  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  parent.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  name  =  parent.getFirstChild();	          Node    name    =    n.getLastChild();    timeout    	compilable	timeout	25	1	replace
448	[BUG]  [BUGGY]  Node  name  =  node.getLastChild();  [CE]  cannot  find  symbol  node  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  node.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  name  =  node.getLastChild();	          Node    name    =    n.getLastChild();    timeout    	non-compiled	[CE]  cannot  find  symbol  node	25	None	replace
449	[BUG]  [BUGGY]  Node  name  =  newName.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  newName.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  name  =  newName.getFirstChild();	          Node    name    =    n.getLastChild();    timeout    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
450	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	141	1	add
451	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	141	1	add
452	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  Node  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  Node  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +    getReplacementName(n.getString()));    Node  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  	141	None	add
453	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  parent.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  nameUsage  =  parent.getLastChild();	          Node    nameUsage    =    n.getLastChild();    timeout    	compilable	timeout	23	1	replace
454	[BUG]  [BUGGY]  Node  nameUsage  =  parent.getLastChild();  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  parent.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameUsage  =  parent.getLastChild();	          Node    nameUsage    =    n.getLastChild();    timeout    	compilable	timeout	23	1	replace
455	[BUG]  [BUGGY]  Node  nameUsage  =  newName.getLastChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  newName.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameUsage  =  newName.getLastChild();	          Node    nameUsage    =    n.getLastChild();    timeout    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
456	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    nameStack.pop();    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();	  timeout    	compilable	timeout	8	1	add
457	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    nameStack.pop();    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();	  timeout    	compilable	timeout	8	1	add
458	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.peek();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    nameStack.pop();    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.peek();	  timeout    	compilable	timeout	8	1	add
459	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.peek();  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.peek();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    nameStack.pop();    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.peek();	  timeout    	compilable	timeout	8	1	add
460	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.push();  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.push();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    nameStack.pop();    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.push();	  timeout    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	8	None	add
461	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  Node  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  Node  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    nameStack.pop();    Node  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();	  timeout    	non-compiled	[CE]  ';'  expected	8	None	add
462	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    nameStack.pop();    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));	  timeout    	compilable	timeout	8	1	add
463	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    nameStack.pop();    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));	  timeout    	compilable	timeout	8	1	add
464	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  Node  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.peek();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();  Node  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.peek();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    nameStack.pop();    Node  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.peek();	  timeout    	non-compiled	[CE]  ';'  expected	8	None	add
465	[BUG]  [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nameUsage  =  n.getFirstChild();  [CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nameUsage  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getFirstChild();    Node  nameUsage  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	26	None	add
466	[BUG]  [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nameUsage  =  n.getLastChild();  [CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nameUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getFirstChild();    Node  nameUsage  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	26	None	add
467	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nUsage  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    nameUsage    =    n.getFirstChild();    Node  nUsage  =  n.getFirstChild();	  timeout    	compilable	timeout	26	1	add
468	[BUG]  [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nUsage  =  n.getFirstChild();  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nUsage  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getFirstChild();    Node  nUsage  =  n.getFirstChild();	  timeout    	compilable	timeout	26	1	add
469	[BUG]  [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Name  nameUsage  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Name  nameUsage  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getFirstChild();    Name  nameUsage  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  cannot  find  symbol	26	None	add
470	[BUG]  [BUGGY]  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  titleUsage  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    nameUsage    =    n.getFirstChild();    Node  titleUsage  =  n.getFirstChild();	  timeout    	compilable	timeout	26	1	add
471	[BUG]  [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  titleUsage  =  n.getFirstChild();  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  titleUsage  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getFirstChild();    Node  titleUsage  =  n.getFirstChild();	  timeout    	compilable	timeout	26	1	add
472	[BUG]  [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nameUsage  =  n.getFirstChild());  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nameUsage  =  n.getFirstChild());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getFirstChild();    Node  nameUsage  =  n.getFirstChild());	  timeout    	non-compiled	[CE]  ';'  expected	26	None	add
473	[BUG]  [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  parent  =  n.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  parent  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getFirstChild();    Node  parent  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	26	None	add
474	[BUG]  [BUGGY]  n.addChildToFront(newName,  rootRenamer,  renamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  rootRenamer,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  rootRenamer,  renamer);	  n.addChildToFront(newName,    renamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
475	[BUG]  [BUGGY]  n.addChildToFront(newName,  parent,  renamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  parent,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  parent,  renamer);	  n.addChildToFront(newName,    renamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
476	[BUG]  [BUGGY]  n.addChildToFront(rootRenamer,  newName,  renamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(rootRenamer,  newName,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(rootRenamer,  newName,  renamer);	  n.addChildToFront(newName,    renamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
477	[BUG]  [BUGGY]  n.addChildToFront(newName,  nameStack,  renamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  nameStack,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  nameStack,  renamer);	  n.addChildToFront(newName,    renamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
478	[BUG]  [BUGGY]  n.addChildToFront(renamer,  newName);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(renamer,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(renamer,  newName);	  n.addChildToFront(newName,    renamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
479	[BUG]  [BUGGY]  n.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    timeout    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
480	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	NodeUtil.copyNameAnnotations(n,    parent);    NodeUtil.copyNameAnnotations(n,  parent);	  timeout    	compilable	timeout	137	1	add
481	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    NodeUtil.copyNameAnnotations(n,  parent);	  timeout    	compilable	timeout	137	1	add
482	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	NodeUtil.copyNameAnnotations(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeUtil.copyNameAnnotations(n,  parent);	  timeout    	compilable	timeout	137	1	add
483	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeUtil.copyNameAnnotations(n,  parent);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeUtil.copyNameAnnotations(n,  parent);	  timeout    	compilable	timeout	137	1	add
484	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	NodeUtil.copyNameAnnotations(n,    parent);    NodeUtil.copyNameAnnotations(n,  parent);  t.getCompiler().reportCodeChange();	  timeout    	compilable	timeout	137	1	add
485	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  t.getCompiler().reportCodeChange();  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    NodeUtil.copyNameAnnotations(n,  parent);  t.getCompiler().reportCodeChange();	  timeout    	compilable	timeout	137	1	add
486	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	NodeUtil.copyNameAnnotations(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.copyNameAnnotations(n,  parent);	  timeout    	compilable	timeout	137	1	add
487	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.copyNameAnnotations(n,  parent);  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  NodeUtil.copyNameAnnotations(n,  parent);	  timeout    	compilable	timeout	137	1	add
488	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  this.nameUsage.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  nameUsage  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  this.nameUsage.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    NodeUtil.copyNameAnnotations(n,  parent);  this.nameUsage.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	137	None	add
489	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  t.getCompiler().reportCodeChange();  break;  [CE]  unreachable  statement  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  t.getCompiler().reportCodeChange();  break;  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    NodeUtil.copyNameAnnotations(n,  parent);  t.getCompiler().reportCodeChange();  break;	  timeout    	non-compiled	[CE]  unreachable  statement	137	None	add
490	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  this.nameUsage.removeProp(Node.IS_UNKNOWN_PROP);  [CE]  cannot  find  symbol  IS_UNKNOWN_PROP  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  this.nameUsage.removeProp(Node.IS_UNKNOWN_PROP);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    NodeUtil.copyNameAnnotations(n,  parent);  this.nameUsage.removeProp(Node.IS_UNKNOWN_PROP);	  timeout    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_PROP	137	None	add
491	[BUG]  [BUGGY]  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	NodeUtil.copyNameAnnotations(n,    parent);    NodeUtil.copyNameAnnotations(n,  parent);  nameStack.pop();	  timeout    	compilable	timeout	137	1	add
492	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  nameStack.pop();  timeout  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    NodeUtil.copyNameAnnotations(n,  parent);  nameStack.pop();	  timeout    	compilable	timeout	137	1	add
493	[BUG]  [BUGGY]  n.addChildToFront(newName,  parent,  rootRenamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  parent,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  parent,  rootRenamer);	  n.addChildToFront(newName,    rootRenamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	65	None	replace
494	[BUG]  [BUGGY]  n.addChildToFront(newName,  n,  rootRenamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  n,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  n,  rootRenamer);	  n.addChildToFront(newName,    rootRenamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	65	None	replace
495	[BUG]  [BUGGY]  n.addChildToFront(newName,  renamer,  rootRenamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  renamer,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  renamer,  rootRenamer);	  n.addChildToFront(newName,    rootRenamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	65	None	replace
496	[BUG]  [BUGGY]  n.addChildToFront(newName,  nameStack,  rootRenamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  nameStack,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  nameStack,  rootRenamer);	  n.addChildToFront(newName,    rootRenamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	65	None	replace
497	[BUG]  [BUGGY]  n.addChildToFront(newName,  rootRenamer,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  rootRenamer,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  rootRenamer,  nameUsage);	  n.addChildToFront(newName,    rootRenamer);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	65	None	replace
498	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME);        n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	36	1	add
499	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	36	1	add
500	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  Node  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  Node  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.removeProp(Node.IS_CONSTANT_NAME);    Node  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  ';'  expected	36	None	add
501	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  renamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  renamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  renamer.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol	36	None	add
502	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  node.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  node.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.removeProp(Node.IS_CONSTANT_NAME);    node.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol  node	36	None	add
503	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME);        n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	36	1	add
504	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	36	1	add
505	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  2);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString())+  2);	  n.setString(getReplacementName(n.getString())+    1);    timeout    	compilable	timeout	89	1	replace
506	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+  2);  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  2);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+  2);	  n.setString(getReplacementName(n.getString())+    1);    timeout    	compilable	timeout	89	1	replace
507	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  3);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString())+  3);	  n.setString(getReplacementName(n.getString())+    1);    timeout    	compilable	timeout	89	1	replace
508	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+  3);  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  3);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+  3);	  n.setString(getReplacementName(n.getString())+    1);    timeout    	compilable	timeout	89	1	replace
509	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  4);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString())+  4);	  n.setString(getReplacementName(n.getString())+    1);    timeout    	compilable	timeout	89	1	replace
510	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+  4);  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  4);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+  4);	  n.setString(getReplacementName(n.getString())+    1);    timeout    	compilable	timeout	89	1	replace
511	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())/  1);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())/  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())/  1);	  n.setString(getReplacementName(n.getString())+    1);    timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	89	None	replace
512	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  parent);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  parent);	  n.addProp(Node.IS_CONSTANT_NAME,    name);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
513	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  oldName);  [CE]  cannot  find  symbol  oldName  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  oldName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  oldName);	  n.addProp(Node.IS_CONSTANT_NAME,    name);    	non-compiled	[CE]  cannot  find  symbol  oldName	76	None	replace
514	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRenamer,  newName);  [CE]  cannot  find  symbol  compiler  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  rootRenamer,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  rootRenamer,  newName);	  NodeTraversal.traverse(compiler,    n,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	110	None	replace
515	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newName,  rootRenamer);  [CE]  cannot  find  symbol  compiler  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newName,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  newName,  rootRenamer);	  NodeTraversal.traverse(compiler,    n,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	110	None	replace
516	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  nameUsage  =  n.getLastChild();  [CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  nameUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    Node  nameUsage  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	22	None	add
517	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  nUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    nameUsage    =    n.getLastChild();    Node  nUsage  =  n.getLastChild();	  timeout    	compilable	timeout	22	1	add
518	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  nUsage  =  n.getLastChild();  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  nUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    Node  nUsage  =  n.getLastChild();	  timeout    	compilable	timeout	22	1	add
519	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  nameUsage  =  n.getFirstChild();  [CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  nameUsage  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    Node  nameUsage  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	22	None	add
520	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  newNameUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    nameUsage    =    n.getLastChild();    Node  newNameUsage  =  n.getLastChild();	  timeout    	compilable	timeout	22	1	add
521	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  newNameUsage  =  n.getLastChild();  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  newNameUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    Node  newNameUsage  =  n.getLastChild();	  timeout    	compilable	timeout	22	1	add
522	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  titleUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    nameUsage    =    n.getLastChild();    Node  titleUsage  =  n.getLastChild();	  timeout    	compilable	timeout	22	1	add
523	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  titleUsage  =  n.getLastChild();  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  titleUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    Node  titleUsage  =  n.getLastChild();	  timeout    	compilable	timeout	22	1	add
524	[BUG]  [BUGGY]  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  newUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    nameUsage    =    n.getLastChild();    Node  newUsage  =  n.getLastChild();	  timeout    	compilable	timeout	22	1	add
525	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  newUsage  =  n.getLastChild();  timeout  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  newUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    Node  newUsage  =  n.getLastChild();	  timeout    	compilable	timeout	22	1	add
526	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  parent  =  n.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  parent  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    Node  parent  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	22	None	add
527	[BUG]  [BUGGY]  n.addChildToFront(newName,  nameStack,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  nameStack,  nameUsage);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  nameStack,  nameUsage);	  n.addChildToFront(newName,    nameStack);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	63	None	replace
528	[BUG]  [BUGGY]  n.addChildToFront(newName,  rootRenamer,  nameStack);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  rootRenamer,  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  rootRenamer,  nameStack);	  n.addChildToFront(newName,    nameStack);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
529	[BUG]  [BUGGY]  n.addChildToFront(newName,  nameStack,  parent);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  nameStack,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  nameStack,  parent);	  n.addChildToFront(newName,    nameStack);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
530	[BUG]  [BUGGY]  n.addChildToFront(newName,  nameStack,  referenceStack);  [CE]  cannot  find  symbol  referenceStack  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  nameStack,  referenceStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  nameStack,  referenceStack);	  n.addChildToFront(newName,    nameStack);    	non-compiled	[CE]  cannot  find  symbol  referenceStack	63	None	replace
531	[BUG]  [BUGGY]  n.addChildToFront(newName,  nameStack,  newName);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  nameStack,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  nameStack,  newName);	  n.addChildToFront(newName,    nameStack);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
532	[BUG]  [BUGGY]  n.addChildToFront(newName,  parent,  nameStack);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  parent,  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  parent,  nameStack);	  n.addChildToFront(newName,    nameStack);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
533	[BUG]  [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  name);  [CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  name);	  Node    newName    =    n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	78	None	replace
534	[BUG]  [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  parent);  [CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  parent);	  Node    newName    =    n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	78	None	replace
535	[BUG]  [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  getReplacementName(n.getString()));  [CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  getReplacementName(n.getString()));	  Node    newName    =    n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	78	None	replace
536	[BUG]  [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  ARGUMENTS);  [CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  ARGUMENTS);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  ARGUMENTS);	  Node    newName    =    n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	78	None	replace
537	[BUG]  [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  newName));  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  newName));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  newName));	  Node    newName    =    n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  ';'  expected	78	None	replace
538	[BUG]  [BUGGY]  Node  newName  =  node.addProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  newName  =  node.addProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  newName  =  node.addProp(Node.IS_CONSTANT_NAME,  newName);	  Node    newName    =    n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	78	None	replace
539	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	53	1	add
540	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	53	1	add
541	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_     "  +  getReplacementName(n.getString()));  n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	53	1	add
542	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_     "  +  getReplacementName(n.getString()));  n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_     "  +  getReplacementName(n.getString()));  n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	53	1	add
543	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_     "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	53	1	add
544	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_     "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_     "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	53	1	add
545	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_-     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_-       "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	56	1	add
546	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_-     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_-     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_-       "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	56	1	add
547	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_-     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_-       "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	56	1	add
548	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_-     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_-     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_-       "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	56	1	add
549	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  n.getNext();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  name  =  n.getNext();	          Node    name    =    n.getFirstChild();    timeout    	compilable	timeout	21	1	replace
550	[BUG]  [BUGGY]  Node  name  =  n.getNext();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  n.getNext();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  name  =  n.getNext();	          Node    name    =    n.getFirstChild();    timeout    	compilable	timeout	21	1	replace
551	[BUG]  [BUGGY]  Node  name  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  node.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  name  =  node.getFirstChild();	          Node    name    =    n.getFirstChild();    timeout    	non-compiled	[CE]  cannot  find  symbol  node	21	None	replace
552	[BUG]  [BUGGY]  newName.setString(idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  newName.setString(idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	newName.setString(idPrefix);	  newName.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	15	None	replace
553	[BUG]  [BUGGY]  newName.setString(n.getString());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  newName.setString(n.getString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	newName.setString(n.getString());	  newName.setString(newName);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
554	[BUG]  [BUGGY]  newName.setString(replacementName(n.getString()));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  newName.setString(replacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	newName.setString(replacementName(n.getString()));	  newName.setString(newName);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
555	[BUG]  [BUGGY]  newName.setString(n);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  newName.setString(n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	newName.setString(n);	  newName.setString(newName);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
556	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_SIGNATURE,  newName);  [CE]  cannot  find  symbol  IS_UNKNOWN_SIGNATURE  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNKNOWN_SIGNATURE,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_SIGNATURE,  newName);	  n.removeProp(Node.IS_UNKNOWN_SIGNATURE);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_SIGNATURE	105	None	replace
557	[BUG]  [BUGGY]  n.removeProp(Node.IS_NAME_PROP,  name);  [CE]  cannot  find  symbol  IS_NAME_PROP  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_NAME_PROP,  name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_NAME_PROP,  name);	  n.removeProp(Node.IS_NAME_PROP,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_NAME_PROP	44	None	replace
558	[BUG]  [BUGGY]  n.removeProp(Node.IS_NAME_PROP,  parent);  [CE]  cannot  find  symbol  IS_NAME_PROP  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_NAME_PROP,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_NAME_PROP,  parent);	  n.removeProp(Node.IS_NAME_PROP,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_NAME_PROP	44	None	replace
559	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_...   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	58	1	add
560	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_...   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_...   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	58	1	add
561	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_...   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_... "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_... "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	58	1	add
562	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_...   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_... "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_...   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_... "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_... "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	58	1	add
563	[BUG]  [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nameStack  =  n.getLastChild();  [CE]  variable  nameStack  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nameStack  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameStack    =    n.getLastChild();    Node  nameStack  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  nameStack  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	28	None	add
564	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nStack  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    nameStack    =    n.getLastChild();    Node  nStack  =  n.getLastChild();	  timeout    	compilable	timeout	28	1	add
565	[BUG]  [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nStack  =  n.getLastChild();  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nStack  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameStack    =    n.getLastChild();    Node  nStack  =  n.getLastChild();	  timeout    	compilable	timeout	28	1	add
566	[BUG]  [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nameStack  =  n.getFirstChild();  [CE]  variable  nameStack  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nameStack  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameStack    =    n.getLastChild();    Node  nameStack  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  nameStack  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	28	None	add
567	[BUG]  [BUGGY]          Node  nameStack  =  n.getLastChild();  Name  n  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  Name  n  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameStack    =    n.getLastChild();    Name  n  =  n.getLastChild();	  timeout    	non-compiled	[CE]  cannot  find  symbol	28	None	add
568	[BUG]  [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  parent  =  n.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  parent  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameStack    =    n.getLastChild();    Node  parent  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	28	None	add
569	[BUG]  [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nameStack  =  n.getLastChild());  [CE]  ';'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nameStack  =  n.getLastChild());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameStack    =    n.getLastChild();    Node  nameStack  =  n.getLastChild());	  timeout    	non-compiled	[CE]  ';'  expected	28	None	add
570	[BUG]  [BUGGY]  timeout  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    nameStack    =    n.getLastChild();    n  =  n.getLastChild();	  timeout    	compilable	timeout	28	1	add
571	[BUG]  [BUGGY]          Node  nameStack  =  n.getLastChild();  n  =  n.getLastChild();  timeout  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameStack    =    n.getLastChild();    n  =  n.getLastChild();	  timeout    	compilable	timeout	28	1	add
572	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANTNAME);  [CE]  cannot  find  symbol  IS_CONSTANTNAME  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANTNAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANTNAME);	  n.removeProp(Node.IS_CONSTANT_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTANTNAME	71	None	replace
573	[BUG]  [BUGGY]  n.removeProp(Node.IS_PLAIN_NAME);  [CE]  cannot  find  symbol  IS_PLAIN_NAME  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_PLAIN_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_PLAIN_NAME);	  n.removeProp(Node.IS_CONSTANT_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_PLAIN_NAME	71	None	replace
574	[BUG]  [BUGGY]  n.addChildToFront(newName,  Node.IS_CONSTANT_NAME,  renamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  Node.IS_CONSTANT_NAME,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  Node.IS_CONSTANT_NAME,  renamer);	  n.addChildToFront(newName,    renamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
575	[BUG]  [BUGGY]  n.removeProp(Node.IS_ALIASING_NAME);  [CE]  cannot  find  symbol  IS_ALIASING_NAME  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_ALIASING_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_ALIASING_NAME);	  n.removeProp(Node.IS_FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  IS_ALIASING_NAME	114	None	replace
576	[BUG]  [BUGGY]  n.replaceChild(n,  rootRenamer,  newName,  nameStack);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  rootRenamer,  newName,  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  rootRenamer,  newName,  nameStack);	  n.replaceChild(n,    newName,    nameStack);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	51	None	replace
577	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  nameStack,  referenceStack);  [CE]  cannot  find  symbol  referenceStack  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  nameStack,  referenceStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  nameStack,  referenceStack);	  n.replaceChild(n,    newName,    nameStack);    	non-compiled	[CE]  cannot  find  symbol  referenceStack	51	None	replace
578	[BUG]  [BUGGY]  nameName.setString(newName);  [CE]  cannot  find  symbol  nameName  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  nameName.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	nameName.setString(newName);	  name.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  nameName	91	None	replace
579	[BUG]  [BUGGY]  name.addReplacement(newName,  n);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  name.addReplacement(newName,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	name.addReplacement(newName,  n);	  name.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  name	91	None	replace
580	[BUG]  [BUGGY]  name.setString(newName  + ": ");  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  name.setString(newName  + ": ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	name.setString(newName  + ": ");	  name.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  name	91	None	replace
581	[BUG]  [BUGGY]          Node  nameUsage  =  n.getFirstChild();  NameUsage  =  n.getFirstChild();  [CE]  cannot  find  symbol  NameUsage  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  NameUsage  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getFirstChild();    NameUsage  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  cannot  find  symbol  NameUsage	26	None	add
582	[BUG]  [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nameUsage  =  node.getFirstChild();  [CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nameUsage  =  node.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getFirstChild();    Node  nameUsage  =  node.getFirstChild();	  timeout    	non-compiled	[CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	26	None	add
583	[BUG]  [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Number  nameUsage  =  n.getFirstChild();  [CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Number  nameUsage  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getFirstChild();    Number  nameUsage  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	26	None	add
584	[BUG]  [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ": ")  +  getReplacementName(n.getString()));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ": ")  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    n.setString(newName  +   ": ")  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  not  a  statement	97	None	add
585	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  name);  parent.replaceChild(n,  newName);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  name);  parent.replaceChild(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  name);  parent.replaceChild(n,  newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);    parent.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	41	None	replace
586	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "[ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + "[ "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	59	1	replace
587	[BUG]  [BUGGY]  n.setString(newName  + "[ "  +  getReplacementName(n.getString()));  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "[ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "[ "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	59	1	replace
588	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_. "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + "_. "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	59	1	replace
589	[BUG]  [BUGGY]  n.setString(newName  + "_. "  +  getReplacementName(n.getString()));  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_. "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_. "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	59	1	replace
590	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_... "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + "_... "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	59	1	replace
591	[BUG]  [BUGGY]  n.setString(newName  + "_... "  +  getReplacementName(n.getString()));  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_... "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_... "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	59	1	replace
592	[BUG]  [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  renamer);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceProp(Node.IS_CONSTANT_NAME,  renamer);	  n.replaceProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
593	[BUG]  [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  ARGUMENTS);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  ARGUMENTS);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceProp(Node.IS_CONSTANT_NAME,  ARGUMENTS);	  n.replaceProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
594	[BUG]  [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  newName));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  newName));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceProp(Node.IS_CONSTANT_NAME,  newName));	  n.replaceProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  ';'  expected	107	None	replace
595	[BUG]  [BUGGY]  n.removeProp(Node.IS_PROP_NAME);  [CE]  cannot  find  symbol  IS_PROP_NAME  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_PROP_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_PROP_NAME);	  n.removeProp(Node.IS_FUNCTION_SIGNATURE);    	non-compiled	[CE]  cannot  find  symbol  IS_PROP_NAME	19	None	replace
596	[BUG]  [BUGGY]  Node  n.setString(newName  + "._ "  +  getReplacementName(n.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  n.setString(newName  + "._ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  n.setString(newName  + "._ "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    Node    n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    	non-compiled	[CE]  	55	None	replace
597	[BUG]  [BUGGY]  Node  n  =  newName  +  getReplacementName(n.getString());  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  n  =  newName  +  getReplacementName(n.getString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  n  =  newName  +  getReplacementName(n.getString());	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    Node    n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	55	None	replace
598	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  n  =  n.getFirstChild();	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    Node    n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	55	None	replace
599	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  null);  [CE]  cannot  find  symbol  IS_FUNCTION_NAME  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_NAME,  null);	  n.removeProp(Node.IS_FUNCTION_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_NAME	18	None	replace
600	[BUG]  [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  NAME_ID_SEPARATOR);  [CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  NAME_ID_SEPARATOR);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  NAME_ID_SEPARATOR);	  Node    newName    =    n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	78	None	replace
601	[BUG]  [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  null);  [CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  null);	  Node    newName    =    n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	78	None	replace
602	[BUG]  [BUGGY]  n.addChildToFront(parent,  newName,  rootRenamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(parent,  newName,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(parent,  newName,  rootRenamer);	  n.addChildToFront(parent,    newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	68	None	replace
603	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  cannot  find  symbol  compiler  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	          NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  compiler	145	None	replace
604	[BUG]  [BUGGY]  n.removeChild(newName,  renamer);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName,  renamer);	  n.removeChild(newName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	72	None	replace
605	[BUG]  [BUGGY]  n.removeProp(Node.IS_SINGLE_NAME);  [CE]  cannot  find  symbol  IS_SINGLE_NAME  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_SINGLE_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_SINGLE_NAME);	  n.removeProp(Node.IS_SINGLE_ID_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_SINGLE_NAME	104	None	replace
606	[BUG]  [BUGGY]  n.replaceChild(n,  rootRenamer,  renamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  rootRenamer,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  rootRenamer,  renamer);	  n.replaceChild(n,    newName,    renamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	100	None	replace
607	[BUG]  [BUGGY]  n.replaceChild(n,  parent,  renamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  parent,  renamer);	  n.replaceChild(n,    newName,    renamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	100	None	replace
608	[BUG]  [BUGGY]  n.replaceChild(n,  name,  renamer);  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  name,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  name,  renamer);	  n.replaceChild(n,    newName,    renamer);    	non-compiled	[CE]  cannot  find  symbol  name	100	None	replace
609	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_ID_SEPARATOR);  [CE]  cannot  find  symbol  IS_UNKNOWN_ID_SEPARATOR  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNKNOWN_ID_SEPARATOR);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_ID_SEPARATOR);	  n.removeProp(Node.IS_UNKNOWN_SYNTHETIC_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_ID_SEPARATOR	93	None	replace
610	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  n.removeFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  name  =  n.removeFirstChild();	          Node    name    =    n.getLastChild();    timeout    	compilable	timeout	25	1	replace
611	[BUG]  [BUGGY]  Node  name  =  n.removeFirstChild();  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  n.removeFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  name  =  n.removeFirstChild();	          Node    name    =    n.getLastChild();    timeout    	compilable	timeout	25	1	replace
612	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Name  name  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Name  name  =  n.getFirstChild();	          Node    name    =    n.getLastChild();    timeout    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
613	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME);  n.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
614	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.setString(getReplacementName(n.getString()));  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  n.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
615	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME);  n.setString(newName);	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
616	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.setString(newName);  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  n.setString(newName);	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
617	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  name,  getReplacementName(n.getString()));  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  name,  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  name,  getReplacementName(n.getString()));	  n.setString(newName    +   "_   ",    getReplacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol  name	99	None	replace
618	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  t);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  t);	  n.setString(newName    +   "_   ",    getReplacementName(n.getString()));    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	99	None	replace
619	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)&&  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)&&  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME)&&  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,    parent);    	non-compiled	[CE]  not  a  statement	118	None	replace
620	[BUG]  [BUGGY]  node.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  node.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	node.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  node	118	None	replace
621	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  rootRenamer);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  rootRenamer);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    parent);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
622	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  n.getString());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  n.getString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  n.getString());	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    parent);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
623	[BUG]  [BUGGY]  n.addChildToFront(newName,  Node.IS_CONSTANT_NAME);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  Node.IS_CONSTANT_NAME);	  n.addChildToFront(newName,    newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	67	None	replace
624	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  name  =  n.getFirstChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  name  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  name  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	add
625	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  name  =  n.getFirstChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  name  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  name  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	add
626	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  Node  name  =  n.getFirstChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  Node  name  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  Node  name  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	add
627	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  name  =  n.getFirstChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  name  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  name  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	add
628	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  name  =  n.getFirstChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  name  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  name  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	add
629	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.SCRIPT);  Node  name  =  n.getFirstChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.SCRIPT);  Node  name  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.SCRIPT);  Node  name  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	add
630	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME,  newName);  Node  name  =  n.getFirstChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME,  newName);  Node  name  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Preconditions.checkState(n.getType()  ==  Token.NAME,  newName);  Node  name  =  n.getFirstChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	add
631	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  n.removeFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  nameUsage  =  n.removeFirstChild();	          Node    nameUsage    =    n.getFirstChild();    timeout    	compilable	timeout	27	1	replace
632	[BUG]  [BUGGY]  Node  nameUsage  =  n.removeFirstChild();  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  n.removeFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameUsage  =  n.removeFirstChild();	          Node    nameUsage    =    n.getFirstChild();    timeout    	compilable	timeout	27	1	replace
633	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NameUsage  nameUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NameUsage  nameUsage  =  n.getLastChild();	          Node    nameUsage    =    n.getFirstChild();    timeout    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
634	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  n.getFirstChild().getNext();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  nameUsage  =  n.getFirstChild().getNext();	          Node    nameUsage    =    n.getFirstChild();    timeout    	compilable	timeout	27	1	replace
635	[BUG]  [BUGGY]  Node  nameUsage  =  n.getFirstChild().getNext();  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  n.getFirstChild().getNext();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameUsage  =  n.getFirstChild().getNext();	          Node    nameUsage    =    n.getFirstChild();    timeout    	compilable	timeout	27	1	replace
636	[BUG]  [BUGGY]  n.replaceChild(n,  parent,  newName,  global);  [CE]  cannot  find  symbol  global  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent,  newName,  global);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  parent,  newName,  global);	  n.replaceChild(n,    parent,    newName);    	non-compiled	[CE]  cannot  find  symbol  global	49	None	replace
637	[BUG]  [BUGGY]  n.replaceChild(parent,  newName,  n);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(parent,  newName,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(parent,  newName,  n);	  n.replaceChild(n,    parent,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	49	None	replace
638	[BUG]  [BUGGY]  n.removeProp(Node.IS_PLAIN);  [CE]  cannot  find  symbol  IS_PLAIN  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_PLAIN);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_PLAIN);	  n.removeProp(Node.IS_CONSTANT_PREFIX);    	non-compiled	[CE]  cannot  find  symbol  IS_PLAIN	74	None	replace
639	[BUG]  [BUGGY]  n.removeProp(Node.IS_PREFIX);  [CE]  cannot  find  symbol  IS_PREFIX  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_PREFIX);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_PREFIX);	  n.removeProp(Node.IS_CONSTANT_PREFIX);    	non-compiled	[CE]  cannot  find  symbol  IS_PREFIX	74	None	replace
640	[BUG]  [BUGGY]  newName  =  renamer.setString(newName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  newName  =  renamer.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	newName  =  renamer.setString(newName);	  newName.setString(newName);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
641	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getReplacementName(n.getString()  +  1));  getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()    +    1));    n.setString(getReplacementName(n.getString()  +  1));  getCompiler().reportCodeChange();	  timeout    	non-compiled	[CE]  cannot  find  symbol	2	None	add
642	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  (n.setString(getReplacementName(n.getString()  +  1));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  (n.setString(getReplacementName(n.getString()  +  1));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()    +    1));    (n.setString(getReplacementName(n.getString()  +  1));	  timeout    	non-compiled	[CE]  ')'  expected	2	None	add
643	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  n.getFirstChild().getNext();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Node  name  =  n.getFirstChild().getNext();	          Node    name    =    n.getFirstChild();    timeout    	compilable	timeout	21	1	replace
644	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild().getNext();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  name  =  n.getFirstChild().getNext();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  name  =  n.getFirstChild().getNext();	          Node    name    =    n.getFirstChild();    timeout    	compilable	timeout	21	1	replace
645	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  lastChild  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    nameUsage    =    n.getLastChild();    Node  lastChild  =  n.getLastChild();	  timeout    	compilable	timeout	22	1	add
646	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  lastChild  =  n.getLastChild();  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  lastChild  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    Node  lastChild  =  n.getLastChild();	  timeout    	compilable	timeout	22	1	add
647	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  NameUsage  =  n.getLastChild();  [CE]  cannot  find  symbol  NameUsage  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  NameUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    NameUsage  =  n.getLastChild();	  timeout    	non-compiled	[CE]  cannot  find  symbol  NameUsage	22	None	add
648	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  n  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    Node  n  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	22	None	add
649	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  null);  [CE]  no  suitable  method  found  for  removeProp(int,String,<null>)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName,  null);	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,String,<null>)	73	None	replace
650	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  rootRenamer);  [CE]  no  suitable  method  found  for  removeProp(int,String,Renamer)  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName,  rootRenamer);	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,String,Renamer)	73	None	replace
651	[BUG]  [BUGGY]  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  timeout  =  System.currentTimeMillis();  }  [CE]  cannot  find  symbol  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  timeout  =  System.currentTimeMillis();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	if(newName!=  null)  {  t.getCompiler().reportCodeChange();  timeout  =  System.currentTimeMillis();  }	  t.getCompiler().reportCodeChange();    timeout    	non-compiled	[CE]  cannot  find  symbol  timeout	109	None	replace
652	[BUG]  [BUGGY]  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  timeout++;  }  [CE]  cannot  find  symbol  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  timeout++;  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	if(newName!=  null)  {  t.getCompiler().reportCodeChange();  timeout++;  }	  t.getCompiler().reportCodeChange();    timeout    	non-compiled	[CE]  cannot  find  symbol  timeout	109	None	replace
653	[BUG]  [BUGGY]  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  timeout  =  false;  }  [CE]  cannot  find  symbol  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  timeout  =  false;  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	if(newName!=  null)  {  t.getCompiler().reportCodeChange();  timeout  =  false;  }	  t.getCompiler().reportCodeChange();    timeout    	non-compiled	[CE]  cannot  find  symbol  timeout	109	None	replace
654	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  n.setString(replacementName(n.getString()));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()),  n.setString(replacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  n.setString(replacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(replacementName(n.getString()));    	non-compiled	[CE]  ')'  expected	10	None	replace
655	[BUG]  [BUGGY]  Name  n  =  getReplacementName(n.getString());  n.setString(replacementName(n.getString()));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Name  n  =  getReplacementName(n.getString());  n.setString(replacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Name  n  =  getReplacementName(n.getString());  n.setString(replacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(replacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
656	[BUG]  [BUGGY]  n.removeProp(Node.IS_NULL_NAME);  [CE]  cannot  find  symbol  IS_NULL_NAME  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_NULL_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_NULL_NAME);	  n.removeProp(Node.IS_UNKNOWN);    	non-compiled	[CE]  cannot  find  symbol  IS_NULL_NAME	128	None	replace
657	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  parent,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  parent,  idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  parent,  idPrefix);	  n.replaceChild(n,    newName,    parent);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	48	None	replace
658	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  parent,  nameStack);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  parent,  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  parent,  nameStack);	  n.replaceChild(n,    newName,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	48	None	replace
659	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  rootRenamer,  null);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  rootRenamer,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  rootRenamer,  null);	  n.replaceChild(n,    newName,    rootRenamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	101	None	replace
660	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT);  [CE]  cannot  find  symbol  IS_CONSTANT  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_PREFIX);    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTANT	135	None	replace
661	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  newName.removeProp(Node.IS_CONSTANT_NAME  +  1);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  newName.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    newName.removeProp(Node.IS_CONSTANT_NAME  +  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol	124	None	add
662	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  n.removeProp(Node.IS_CONSTANT_NAME  +  2);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    n.removeProp(Node.IS_CONSTANT_NAME  +  2);	  timeout    	compilable	timeout	124	1	add
663	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  n.removeProp(Node.IS_CONSTANT_NAME  +  2);  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  n.removeProp(Node.IS_CONSTANT_NAME  +  2);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    n.removeProp(Node.IS_CONSTANT_NAME  +  2);	  timeout    	compilable	timeout	124	1	add
664	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME  +  3);  [CE]  cannot  find  symbol  IS_FUNCTION_NAME  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME  +  3);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_NAME  +  3);	  n.removeProp(Node.IS_FUNCTION_NAME    +    1);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_NAME	115	None	replace
665	[BUG]  [BUGGY]  n.removeProp(Node.IS_PROP_NAME  +  1);  [CE]  cannot  find  symbol  IS_PROP_NAME  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_PROP_NAME  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_PROP_NAME  +  1);	  n.removeProp(Node.IS_FUNCTION_NAME    +    1);    	non-compiled	[CE]  cannot  find  symbol  IS_PROP_NAME	115	None	replace
666	[BUG]  [BUGGY]  n.setString(getReplacementName(n,  newName.getString()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n,  newName.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n,  newName.getString()));	  n.setString(getReplacementName(newName.getString()));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
667	[BUG]  [BUGGY]  n.replaceChild(n,  rootRenamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  rootRenamer);	  n.replaceChild(n,    parent);    timeout    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	46	None	replace
668	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  n));  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  n));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  n));	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    parent);    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	81	None	replace
669	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    parent);    	compilable	timeout	81	1	replace
670	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1);  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    parent);    	compilable	timeout	81	1	replace
671	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1,  parent);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1,  parent);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    parent);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	81	None	replace
672	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ": ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + ": ");	  n.setString(oldName);    	compilable	timeout	16	1	replace
673	[BUG]  [BUGGY]  n.setString(newName  + ": ");  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ": ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ": ");	  n.setString(oldName);    	compilable	timeout	16	1	replace
674	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + "_ ");	  n.setString(oldName);    	compilable	timeout	16	1	replace
675	[BUG]  [BUGGY]  n.setString(newName  + "_ ");  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ ");	  n.setString(oldName);    	compilable	timeout	16	1	replace
676	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName)  {  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName)  {	  n.addProp(Node.IS_CONSTANT_NAME,    newName)    	non-compiled	[CE]  ';'  expected	106	None	replace
677	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  name)!=  ';'  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  name)!=  ';'  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  name)!=  ';'	  n.addProp(Node.IS_CONSTANT_NAME,    newName)    	non-compiled	[CE]  not  a  statement	106	None	replace
678	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName)+  1;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName)+  1;  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName)+  1;	  n.addProp(Node.IS_CONSTANT_NAME,    newName)    	non-compiled	[CE]  not  a  statement	106	None	replace
679	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  nameStack.push(newName);  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));  nameStack.push(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));  nameStack.push(newName);	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    nameStack.pop();    timeout    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	9	None	replace
680	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNIQUE_ID_SEPARATOR,  newName);  [CE]  cannot  find  symbol  IS_UNIQUE_ID_SEPARATOR  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNIQUE_ID_SEPARATOR,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNIQUE_ID_SEPARATOR,  newName);	  n.removeProp(Node.IS_SYNTHETIC_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_UNIQUE_ID_SEPARATOR	70	None	replace
681	[BUG]  [BUGGY]  n.removeProp(Node.IS_NEW_NAME,  newName);  [CE]  cannot  find  symbol  IS_NEW_NAME  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_NEW_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_NEW_NAME,  newName);	  n.removeProp(Node.IS_SYNTHETIC_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_NEW_NAME	70	None	replace
682	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNIQUE_ID_NAME);  [CE]  cannot  find  symbol  IS_UNIQUE_ID_NAME  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNIQUE_ID_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNIQUE_ID_NAME);	  n.removeProp(Node.IS_UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_UNIQUE_ID_NAME	34	None	replace
683	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName  + ") ");  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName  + ") ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName  + ") ");	  n.addProp(Node.IS_CONSTANT_NAME,    newName));    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
684	[BUG]  [BUGGY]  n.replaceChild(n,  newName));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName));	  n.addProp(Node.IS_CONSTANT_NAME,    newName));    	non-compiled	[CE]  ';'  expected	144	None	replace
685	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  renamer);  [CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,  parent,  renamer);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	non-compiled	[CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;	138	None	replace
686	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  rootRenamer);  [CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,  rootRenamer);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	non-compiled	[CE]  method  copyNameAnnotations  in  class  NodeUtil  cannot  be  applied  to  given  types;	138	None	replace
687	[BUG]  [BUGGY]  NamingStrategy.setString(newName,  n);  [CE]  cannot  find  symbol  NamingStrategy  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NamingStrategy.setString(newName,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NamingStrategy.setString(newName,  n);	  NamingStrategy.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NamingStrategy	13	None	replace
688	[BUG]  [BUGGY]  NamingStrategy.setString(newName  + "_ "  +  getReplacementName(n.getString()));  [CE]  cannot  find  symbol  NamingStrategy  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NamingStrategy.setString(newName  + "_ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NamingStrategy.setString(newName  + "_ "  +  getReplacementName(n.getString()));	  NamingStrategy.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NamingStrategy	13	None	replace
689	[BUG]  [BUGGY]  NamingStrategy.setString(newName  + "_ "  +  n.getString());  [CE]  cannot  find  symbol  NamingStrategy  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NamingStrategy.setString(newName  + "_ "  +  n.getString());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NamingStrategy.setString(newName  + "_ "  +  n.getString());	  NamingStrategy.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NamingStrategy	13	None	replace
690	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  rootRenamer.getCompiler();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  compiler  =  rootRenamer.getCompiler();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  compiler  =  rootRenamer.getCompiler();	          ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
691	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getConstructor();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  compiler  =  t.getConstructor();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  compiler  =  t.getConstructor();	          ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
692	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompiler(newName);  [CE]  method  getCompiler  in  class  NodeTraversal  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  compiler  =  t.getCompiler(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  compiler  =  t.getCompiler(newName);	          ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  method  getCompiler  in  class  NodeTraversal  cannot  be  applied  to  given  types;	121	None	replace
693	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  this.uniqueIdSupplier);  [CE]  cannot  find  symbol  uniqueIdSupplier  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  this.uniqueIdSupplier);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  this.uniqueIdSupplier);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    global);    	non-compiled	[CE]  cannot  find  symbol  uniqueIdSupplier	77	None	replace
694	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  this.idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  this.idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  this.idPrefix);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    global);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	77	None	replace
695	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(newName!=  null);  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	NodeUtil.copyNameAnnotations(n,    parent);    Preconditions.checkState(newName!=  null);  NodeUtil.copyNameAnnotations(n,  parent);	  timeout    	compilable	timeout	137	1	add
696	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(newName!=  null);  NodeUtil.copyNameAnnotations(n,  parent);  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(newName!=  null);  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    Preconditions.checkState(newName!=  null);  NodeUtil.copyNameAnnotations(n,  parent);	  timeout    	compilable	timeout	137	1	add
697	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	NodeUtil.copyNameAnnotations(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.copyNameAnnotations(n,  parent);	  timeout    	compilable	timeout	137	1	add
698	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.copyNameAnnotations(n,  parent);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.VAR);  NodeUtil.copyNameAnnotations(n,  parent);	  timeout    	compilable	timeout	137	1	add
699	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME  &&!NodeUtil.copyNameAnnotations(n,  parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME  &&!NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.NAME  &&!NodeUtil.copyNameAnnotations(n,  parent);	  timeout    	non-compiled	[CE]  ')'  expected	137	None	add
700	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NameUtil.copyNameAnnotations(n,  parent);  [CE]  cannot  find  symbol  NameUtil  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NameUtil.copyNameAnnotations(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    NameUtil.copyNameAnnotations(n,  parent);	  timeout    	non-compiled	[CE]  cannot  find  symbol  NameUtil	137	None	add
701	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  n.setString(GetReplacementName(n.getString()));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()),  n.setString(GetReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  n.setString(GetReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(GetReplacementName(n.getString()));    	non-compiled	[CE]  ')'  expected	12	None	replace
702	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setPosition(getReplacementName(n.getString()));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setPosition(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));  n.setPosition(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(GetReplacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
703	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   "._     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._'  +  getReplacementName(n.getString()));  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   "._     "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._'  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +   "._       "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._'  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  unclosed  string  literal	139	None	add
704	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  Node  n.replaceChild(n,  parent);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  Node  n.replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    Node  n.replaceChild(n,  parent);	  timeout    	non-compiled	[CE]  ';'  expected	45	None	add
705	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    Node  n  =  parent.getFirstChild();	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	45	None	add
706	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  nameStack.peek();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  nameStack.peek();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    Node  n  =  nameStack.peek();	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	45	None	add
707	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  Node  n  =  parent.getParent();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    Node  n  =  parent.getParent();	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	45	None	add
708	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.replaceChild(n,    parent);    parent.replaceChild(n,  parent);	  timeout    	compilable	timeout	45	1	add
709	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    parent.replaceChild(n,  parent);	  timeout    	compilable	timeout	45	1	add
710	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  node.replaceChild(n,  parent);  [CE]  cannot  find  symbol  node  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  node.replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    node.replaceChild(n,  parent);	  timeout    	non-compiled	[CE]  cannot  find  symbol  node	45	None	add
711	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_- "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + "_- "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_-       "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	57	1	replace
712	[BUG]  [BUGGY]  n.setString(newName  + "_- "  +  getReplacementName(n.getString()));  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_- "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_- "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_-       "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	57	1	replace
713	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_$ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + "_$ "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_-       "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	57	1	replace
714	[BUG]  [BUGGY]  n.setString(newName  + "_$ "  +  getReplacementName(n.getString()));  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_$ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_$ "  +  getReplacementName(n.getString()));	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +       "_-       "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	57	1	replace
715	[BUG]  [BUGGY]  Node  nameStack  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameStack  =  n.getfirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameStack  =  n.getfirstChild();	          Node    nameStack    =    n.getLastChild();    timeout    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
716	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(referenceStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  [CE]  cannot  find  symbol  referenceStack  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(referenceStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(referenceStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  referenceStack	108	None	add
717	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(referenceStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  [CE]  cannot  find  symbol  referenceStack  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(referenceStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(referenceStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  referenceStack	108	None	add
718	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(!global)  {  t.getCompiler().reportCodeChange();  }  [CE]  cannot  find  symbol  global  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(!global)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(!global)  {  t.getCompiler().reportCodeChange();  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  global	108	None	add
719	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  }  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  t.getCompiler().reportCodeChange();  }  t.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    t.getCompiler().reportCodeChange();  }  t.getCompiler().reportCodeChange();	  timeout    	non-compiled	[CE]  orphaned  case	108	None	add
720	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(referenceStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  break;  }  [CE]  cannot  find  symbol  referenceStack  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(referenceStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  break;  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(referenceStack.peek()!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  referenceStack	108	None	add
721	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(referenceStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  break;  }  [CE]  cannot  find  symbol  referenceStack  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(referenceStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  break;  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(referenceStack.peek()  ==  null)  {  t.getCompiler().reportCodeChange();  }  else  {  nameStack.pop();  break;  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  referenceStack	108	None	add
722	[BUG]  [BUGGY]  NAME_ID_SEPARATOR.setString(newName  + ": ");  [CE]  cannot  find  symbol  NAME_ID_SEPARATOR  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NAME_ID_SEPARATOR.setString(newName  + ": ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NAME_ID_SEPARATOR.setString(newName  + ": ");	  NAME_ID_SEPARATOR.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NAME_ID_SEPARATOR	90	None	replace
723	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_...   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_[ "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_[ "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	58	1	add
724	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_...   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_[ "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_...   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_[ "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_[ "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	58	1	add
725	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ".name "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + ".name "  +  getReplacementName(n.getString()));	  n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	98	1	replace
726	[BUG]  [BUGGY]  n.setString(newName  + ".name "  +  getReplacementName(n.getString()));  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ".name "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ".name "  +  getReplacementName(n.getString()));	  n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	98	1	replace
727	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  NEW_NAME);  [CE]  cannot  find  symbol  NEW_NAME  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  NEW_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  NEW_NAME);	  n.addProp(Node.IS_CONSTANT_NAME,    name);    	non-compiled	[CE]  cannot  find  symbol  NEW_NAME	76	None	replace
728	[BUG]  [BUGGY]  n.replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    parent.replaceChild(n,    newName);    n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	39	None	replace
729	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getNode();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  t  =  n.getNode();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  t  =  n.getNode();	          ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	30	None	replace
730	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getOwner();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  t  =  n.getOwner();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  t  =  n.getOwner();	          ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	30	None	replace
731	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +  getReplacementName(n.getString()));  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  +  getReplacementName(n.getString()));  nameStack.pop();	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	142	1	replace
732	[BUG]  [BUGGY]  n.setString(newName  +  getReplacementName(n.getString()));  nameStack.pop();  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +  getReplacementName(n.getString()));  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  +  getReplacementName(n.getString()));  nameStack.pop();	  n.setString(newName    +       "_       "    +    getReplacementName(n.getString()));    n.setString(newName    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	142	1	replace
733	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  ARGUMENTS);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  ARGUMENTS);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  ARGUMENTS);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    nameUsage);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	85	None	replace
734	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  null);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  null);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    nameUsage);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	85	None	replace
735	[BUG]  [BUGGY]  n.removeProp(Node.IS_ID_NAME);  [CE]  cannot  find  symbol  IS_ID_NAME  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_ID_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_ID_NAME);	  n.removeProp(Node.IS_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_ID_NAME	103	None	replace
736	[BUG]  [BUGGY]  n.removeProp(Node.IS_ID_SOURCE);  [CE]  cannot  find  symbol  IS_ID_SOURCE  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_ID_SOURCE);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_ID_SOURCE);	  n.removeProp(Node.IS_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_ID_SOURCE	103	None	replace
737	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  name  =  n.getLastChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  name  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  name  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	24	None	add
738	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  name  =  n.getLastChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  name  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Preconditions.checkState(n.getType()  ==  Token.VAR);  Node  name  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	24	None	add
739	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  name  =  n.getLastChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  name  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  name  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	24	None	add
740	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  Node  name  =  n.getLastChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  Node  name  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Preconditions.checkState(n.getType()  ==  Token.ASSIGN);  Node  name  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	24	None	add
741	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  name  =  n.getLastChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  name  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Preconditions.checkState(n.getType()  ==  Token.CALL);  Node  name  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	24	None	add
742	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  name  =  n.getLastChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  name  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Preconditions.checkState(n.getType()  ==  Token.GETPROP);  Node  name  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	24	None	add
743	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Node  name  =  node.getLastChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Node  name  =  node.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Node  name  =  node.getLastChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	24	None	add
744	[BUG]  [BUGGY]  n.removeChild(parent);  n.replaceChild(parent);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  n.replaceChild(parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    n.replaceChild(parent);	  timeout    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	122	None	add
745	[BUG]  [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    Node  n  =  parent.getFirstChild();	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	122	None	add
746	[BUG]  [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getParent();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    Node  n  =  parent.getParent();	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	122	None	add
747	[BUG]  [BUGGY]  n.removeChild(parent);  Node  n.removeChild(parent);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  Node  n.removeChild(parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    Node  n.removeChild(parent);	  timeout    	non-compiled	[CE]  ';'  expected	122	None	add
748	[BUG]  [BUGGY]  n.removeChild(parent);  node.removeChild(parent);  [CE]  cannot  find  symbol  node  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  node.removeChild(parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    node.removeChild(parent);	  timeout    	non-compiled	[CE]  cannot  find  symbol  node	122	None	add
749	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    Node    n    =    parent.getFirstChild();    n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	38	None	replace
750	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    Node    n    =    parent.getFirstChild();    n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	38	None	replace
751	[BUG]  [BUGGY]  NameUtil.setString(newName);  [CE]  cannot  find  symbol  NameUtil  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NameUtil.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NameUtil.setString(newName);	  Number.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NameUtil	14	None	replace
752	[BUG]  [BUGGY]  n.replaceChild(parent,  newName,  name);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(parent,  newName,  name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(parent,  newName,  name);	  n.replaceChild(parent,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	47	None	replace
753	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  ARGUMENTS_NAME);  [CE]  cannot  find  symbol  ARGUMENTS_NAME  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  ARGUMENTS_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  ARGUMENTS_NAME);	  n.replaceChild(n,    newName,    idPrefix);    	non-compiled	[CE]  cannot  find  symbol  ARGUMENTS_NAME	143	None	replace
754	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  break;  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	if(newName!=  null)  {  t.getCompiler().reportCodeChange();  break;  }	  t.getCompiler().reportCodeChange();    break;    	compilable	timeout	112	1	replace
755	[BUG]  [BUGGY]  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  break;  }  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  break;  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	if(newName!=  null)  {  t.getCompiler().reportCodeChange();  break;  }	  t.getCompiler().reportCodeChange();    break;    	compilable	timeout	112	1	replace
756	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getModule(),  null);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getModule(),  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getModule(),  null);	  n.addChildToFront(newName,    t.getModule());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	131	None	replace
757	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getModule(),  n);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getModule(),  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getModule(),  n);	  n.addChildToFront(newName,    t.getModule());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	131	None	replace
758	[BUG]  [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  n  =  n.getLastChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  n  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameStack    =    n.getLastChild();    Node  n  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	28	None	add
759	[BUG]  [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nameStack  =  node.getLastChild();  [CE]  variable  nameStack  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nameStack  =  node.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameStack    =    n.getLastChild();    Node  nameStack  =  node.getLastChild();	  timeout    	non-compiled	[CE]  variable  nameStack  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	28	None	add
760	[BUG]  [BUGGY]          Node  nameStack  =  n.getLastChild();  Name  nameStack  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  Name  nameStack  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameStack    =    n.getLastChild();    Name  nameStack  =  n.getLastChild();	  timeout    	non-compiled	[CE]  cannot  find  symbol	28	None	add
761	[BUG]  [BUGGY]  Name  n  =  getReplacementName(n.getString());  N.setString(getReplacementName(n.getString()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Name  n  =  getReplacementName(n.getString());  N.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Name  n  =  getReplacementName(n.getString());  N.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    N.setString(getReplacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
762	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  (n.setString(getReplacementName(n.getString())+  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  (n.setString(getReplacementName(n.getString())+  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+    1);    (n.setString(getReplacementName(n.getString())+  1);	  timeout    	non-compiled	[CE]  ')'  expected	88	None	add
763	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  N.setString(getReplacementName(n.getString())+  1);  [CE]  cannot  find  symbol  N  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  N.setString(getReplacementName(n.getString())+  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+    1);    N.setString(getReplacementName(n.getString())+  1);	  timeout    	non-compiled	[CE]  cannot  find  symbol  N	88	None	add
764	[BUG]  [BUGGY]  n.removeProp(Node.IS_ID_SEPARATOR,  newName);  [CE]  cannot  find  symbol  IS_ID_SEPARATOR  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_ID_SEPARATOR,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_ID_SEPARATOR,  newName);	  n.removeProp(Node.IS_NAME_PROP,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_ID_SEPARATOR	44	None	replace
765	[BUG]  [BUGGY]  n.removeProp(Node.IS_OBJECT_NAME,  newName);  [CE]  cannot  find  symbol  IS_OBJECT_NAME  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_OBJECT_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_OBJECT_NAME,  newName);	  n.removeProp(Node.IS_NAME_PROP,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_OBJECT_NAME	44	None	replace
766	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1,  renamer);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString())+  1,  renamer);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    renamer);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	84	None	replace
767	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  rootRenamer),  renamer);  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  rootRenamer),  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  rootRenamer),  renamer);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    renamer);    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	84	None	replace
768	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString());  n.setString(getReplacementName(n.getString()));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString());  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString());  n.setString(getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  ')'  expected	5	None	add
769	[BUG]  [BUGGY]  n.addChildToFront(newName,  t,  renamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t,  renamer);	  n.addChildToFront(newName,    t);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
770	[BUG]  [BUGGY]  n.addChildToFront(newName,  t,  rootRenamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t,  rootRenamer);	  n.addChildToFront(newName,    t);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
771	[BUG]  [BUGGY]  n.addChildToFront(newName,  t,  n);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t,  n);	  n.addChildToFront(newName,    t);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
772	[BUG]  [BUGGY]  n.addChildToFront(newName,  nameStack,  null);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  nameStack,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  nameStack,  null);	  n.addChildToFront(newName,    nameStack);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	63	None	replace
773	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1) ");  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1) ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()  +  1) ");	  n.setString(getReplacementName(n.getString()    +   ")   ");    	non-compiled	[CE]  unclosed  string  literal	127	None	replace
774	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  n  =  parent.getParent();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  n  =  parent.getParent();	  n.removeProp(Node.IS_CONSTANT_NAME);    Node    n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	40	None	replace
775	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME;  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME;  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME;	  timeout    	non-compiled	[CE]  ')'  expected	36	None	add
776	[BUG]  [BUGGY]  n.removeProp(Node.IS_ALL_NAME);  [CE]  cannot  find  symbol  IS_ALL_NAME  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_ALL_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_ALL_NAME);	  n.removeProp(Node.IS_NEW_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_ALL_NAME	92	None	replace
777	[BUG]  [BUGGY]  n.removeProp(Node.IS_NAMING_NAME);  [CE]  cannot  find  symbol  IS_NAMING_NAME  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_NAMING_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_NAMING_NAME);	  n.removeProp(Node.IS_NEW_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_NAMING_NAME	92	None	replace
778	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NameUsage  nameUsage  =  n.getFirstChild();	          Node    nameUsage    =    n.getLastChild();    timeout    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
779	[BUG]  [BUGGY]  Node  nameUsage  =  n.getfirstChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameUsage  =  n.getfirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameUsage  =  n.getfirstChild();	          Node    nameUsage    =    n.getLastChild();    timeout    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
780	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  name.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  name.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  name.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    newName.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  name	117	None	replace
781	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +    getReplacementName(n.getString()));    n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	141	1	add
782	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +    getReplacementName(n.getString()));    n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	141	1	add
783	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1),  newName);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1),  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()  +  1),  newName);	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
784	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString(),  newName),  idPrefix);  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString(),  newName),  idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString(),  newName),  idPrefix);	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	1	None	replace
785	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newName,  global);  [CE]  cannot  find  symbol  compiler  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newName,  global);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  newName,  global);	  NodeTraversal.traverse(compiler,    n,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	110	None	replace
786	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nameUsage,  newName);  [CE]  cannot  find  symbol  compiler  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nameUsage,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  nameUsage,  newName);	  NodeTraversal.traverse(compiler,    n,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	110	None	replace
787	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRenamer,  n,  newName);  [CE]  cannot  find  symbol  compiler  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  rootRenamer,  n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  rootRenamer,  n,  newName);	  NodeTraversal.traverse(compiler,    n,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	110	None	replace
788	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  name);  [CE]  cannot  find  symbol  compiler  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  name);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  name);	  NodeTraversal.traverse(compiler,    n,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	110	None	replace
789	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  name.setString(getReplacementName(n.getString()));  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));  name.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));  name.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    node.setString(getReplacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol  name	11	None	replace
790	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._-   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "._-   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	82	1	add
791	[BUG]  [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._-   "  +  getReplacementName(n.getString()));  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._-   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "._-   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	82	1	add
792	[BUG]  [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._'  +  getReplacementName(n.getString()));  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "._'  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "._'  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  unclosed  string  literal	82	None	add
793	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  n,  parent.getConstructor();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  rootRenamer  =  n,  parent.getConstructor();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  rootRenamer  =  n,  parent.getConstructor();	          ContextualRenamer    rootRenamer    =    n.getConstructor();    	non-compiled	[CE]  ';'  expected	31	None	replace
794	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  name.getConstructor();  [CE]  cannot  find  symbol  name  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  rootRenamer  =  name.getConstructor();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  rootRenamer  =  name.getConstructor();	          ContextualRenamer    rootRenamer    =    n.getConstructor();    	non-compiled	[CE]  cannot  find  symbol  name	31	None	replace
795	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  renamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getCompiler(),  renamer);	  n.addChildToFront(newName,    t.getCompiler());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	132	None	replace
796	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  n);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getCompiler(),  n);	  n.addChildToFront(newName,    t.getCompiler());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	132	None	replace
797	[BUG]  [BUGGY]  parents.addProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  parents  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parents.addProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parents.addProp(Node.IS_CONSTANT_NAME,  newName);	  parent.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  parents	79	None	replace
798	[BUG]  [BUGGY]  n.replaceChild(n,  name,  newName);  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  name,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  name,  newName);	  n.replaceChild(n,    newName,    name);    	non-compiled	[CE]  cannot  find  symbol  name	52	None	replace
799	[BUG]  [BUGGY]  n.replaceChild(parent,  newName,  t);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(parent,  newName,  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(parent,  newName,  t);	  n.replaceChild(parent,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	47	None	replace
800	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  idPrefix);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    global);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	77	None	replace
801	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newName,  null);  [CE]  cannot  find  symbol  compiler  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newName,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  newName,  null);	  NodeTraversal.traverse(compiler,    n,    rootRenamer,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	111	None	replace
802	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  internalRenamer,  newName);  [CE]  cannot  find  symbol  compiler  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  internalRenamer,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  internalRenamer,  newName);	  NodeTraversal.traverse(compiler,    n,    rootRenamer,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	111	None	replace
803	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getSourceName());  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getSourceName());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getSourceName());	  n.addChildToFront(newName,    newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	67	None	replace
804	[BUG]  [BUGGY]  n.addChildToFront(parent,  newName,  t);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(parent,  newName,  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(parent,  newName,  t);	  n.addChildToFront(parent,    newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	68	None	replace
805	[BUG]  [BUGGY]  n.addChildToFront(parent,  newName,  getReplacementName(n.getString()));  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(parent,  newName,  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(parent,  newName,  getReplacementName(n.getString()));	  n.addChildToFront(parent,    newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	68	None	replace
806	[BUG]  [BUGGY]  n.addChildToFront(parent,  newName,  t.getModule());  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(parent,  newName,  t.getModule());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(parent,  newName,  t.getModule());	  n.addChildToFront(parent,    newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	68	None	replace
807	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(newName,  n.getString()));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(newName,  n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));  n.setString(newName,  n.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(replacementName(n.getString()));    	non-compiled	[CE]  ';'  expected	10	None	replace
808	[BUG]  [BUGGY]  n.setString(newName  + "_ ",  getReplacementName(n.getString()),  t);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ ",  getReplacementName(n.getString()),  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ ",  getReplacementName(n.getString()),  t);	  n.setString(newName    +   "_   ",    getReplacementName(n.getString()));    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	99	None	replace
809	[BUG]  [BUGGY]  n.setString(newName  + "._ ",  getReplacementName(n.getString()),  t);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "._ ",  getReplacementName(n.getString()),  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "._ ",  getReplacementName(n.getString()),  t);	  n.setString(newName    +   "_   ",    getReplacementName(n.getString()));    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	99	None	replace
810	[BUG]  [BUGGY]  n.setString(newName  + "._ ",  getReplacementName(n.getString()));  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "._ ",  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "._ ",  getReplacementName(n.getString()));	  n.setString(newName    +   "_   ",    getReplacementName(n.getString()));    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	99	None	replace
811	[BUG]  [BUGGY]  n.setString(newName  + ",_ ",  getReplacementName(n.getString()));  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ",_ ",  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ",_ ",  getReplacementName(n.getString()));	  n.setString(newName    +   "_   ",    getReplacementName(n.getString()));    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	99	None	replace
812	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)&&  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)&&  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME)&&  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,    parent);    	non-compiled	[CE]  not  a  statement	118	None	replace
813	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ".. "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + ".. "  +  getReplacementName(n.getString()));	  n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	98	1	replace
814	[BUG]  [BUGGY]  n.setString(newName  + ".. "  +  getReplacementName(n.getString()));  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ".. "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ".. "  +  getReplacementName(n.getString()));	  n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	98	1	replace
815	[BUG]  [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()),  t);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()),  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ": "  +  getReplacementName(n.getString()),  t);	  n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	98	None	replace
816	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newName,  this);  [CE]  cannot  find  symbol  compiler  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newName,  this);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  newName,  this);	  NodeTraversal.traverse(compiler,    n,    newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	110	None	replace
817	[BUG]  [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nameUsage  =  no.getFirstChild();  [CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  nameUsage  =  no.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getFirstChild();    Node  nameUsage  =  no.getFirstChild();	  timeout    	non-compiled	[CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	26	None	add
818	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  parentUsage  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    nameUsage    =    n.getFirstChild();    Node  parentUsage  =  n.getFirstChild();	  timeout    	compilable	timeout	26	1	add
819	[BUG]  [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  parentUsage  =  n.getFirstChild();  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getFirstChild();  Node  parentUsage  =  n.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getFirstChild();    Node  parentUsage  =  n.getFirstChild();	  timeout    	compilable	timeout	26	1	add
820	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	NodeUtil.copyNameAnnotations(n,  n);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	compilable	timeout	138	1	replace
821	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  n);  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,  n);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	compilable	timeout	138	1	replace
822	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	NodeUtil.copyNameAnnotations(parent,  n);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	compilable	timeout	138	1	replace
823	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(parent,  n);	  NodeUtil.copyNameAnnotations(n,    parent);    timeout    	compilable	timeout	138	1	replace
824	[BUG]  [BUGGY]  n.removeProp(Node.IS_SUSPENDED_NAME,  newName);  [CE]  cannot  find  symbol  IS_SUSPENDED_NAME  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_SUSPENDED_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_SUSPENDED_NAME,  newName);	  n.removeProp(Node.IS_SYNTHETIC_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_SUSPENDED_NAME	70	None	replace
825	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNIKNOWN_SYNTHETIC_NAME);  [CE]  cannot  find  symbol  IS_UNIKNOWN_SYNTHETIC_NAME  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNIKNOWN_SYNTHETIC_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNIKNOWN_SYNTHETIC_NAME);	  n.removeProp(Node.IS_UNKNOWN_SYNTHETIC_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_UNIKNOWN_SYNTHETIC_NAME	93	None	replace
826	[BUG]  [BUGGY]  n.addChildToBack(newName);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToBack(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToBack(newName);	  n.addProp(Node.IS_CONSTANT_NAME,    newName));    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	144	None	replace
827	[BUG]  [BUGGY]  n.addChildToFront(newName));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName));	  n.addProp(Node.IS_CONSTANT_NAME,    newName));    	non-compiled	[CE]  ';'  expected	144	None	replace
828	[BUG]  [BUGGY]  n.addChildToFront(newName,  n,  renamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  n,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  n,  renamer);	  n.addChildToFront(newName,    renamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
829	[BUG]  [BUGGY]  n.addChildToFront(newName,  renamer,  nameStack);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  renamer,  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  renamer,  nameStack);	  n.addChildToFront(newName,    renamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
830	[BUG]  [BUGGY]  n.addChildToFront(newName,  renamer,  parent);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  renamer,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  renamer,  parent);	  n.addChildToFront(newName,    renamer);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	95	None	replace
831	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	Preconditions.checkState(n.getType()  ==  Token.NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    Node    n    =    parent.getFirstChild();    n.removeProp(Node.IS_CONSTANT_NAME);    	compilable	timeout	38	1	replace
832	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    Node    n    =    parent.getFirstChild();    n.removeProp(Node.IS_CONSTANT_NAME);    	compilable	timeout	38	1	replace
833	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	t.getCompiler().reportCodeChange();    n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	108	1	add
834	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  n.removeProp(Node.IS_CONSTANT_NAME);  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	108	1	add
835	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(global)  {  t.getCompiler().reportCodeChange();  }  [CE]  cannot  find  symbol  global  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(global)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(global)  {  t.getCompiler().reportCodeChange();  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  global	108	None	add
836	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	t.getCompiler().reportCodeChange();    if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  t.getCompiler().reportCodeChange();  }	  timeout    	compilable	timeout	108	1	add
837	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  t.getCompiler().reportCodeChange();  }  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  t.getCompiler().reportCodeChange();  }	  timeout    	compilable	timeout	108	1	add
838	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(global)  {  t.getCompiler().reportCodeChange();  }  else  {  t.getCompiler().reportCodeChange();  }  [CE]  cannot  find  symbol  global  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(global)  {  t.getCompiler().reportCodeChange();  }  else  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(global)  {  t.getCompiler().reportCodeChange();  }  else  {  t.getCompiler().reportCodeChange();  }	  timeout    	non-compiled	[CE]  cannot  find  symbol  global	108	None	add
839	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	t.getCompiler().reportCodeChange();    if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  throw  new  IllegalStateException( " ");  }	  timeout    	compilable	timeout	108	1	add
840	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  throw  new  IllegalStateException( " ");  }  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  t.getCompiler().reportCodeChange();  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();    if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  else  {  throw  new  IllegalStateException( " ");  }	  timeout    	compilable	timeout	108	1	add
841	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME);	  n.addProp(Node.IS_CONSTANT_NAME,    name);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
842	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNIKNOWN_PROPERTY);  [CE]  cannot  find  symbol  IS_UNIKNOWN_PROPERTY  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNIKNOWN_PROPERTY);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNIKNOWN_PROPERTY);	  n.removeProp(Node.IS_UNKNOWN_PROPERTY);    	non-compiled	[CE]  cannot  find  symbol  IS_UNIKNOWN_PROPERTY	129	None	replace
843	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)&&  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)&&  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME)&&  n.removeProp(Node.IS_CONSTANT_NAME,  newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,    newName);    	non-compiled	[CE]  not  a  statement	119	None	replace
844	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  renamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  renamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  renamer.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    newName.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
845	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parent.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	parent.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    node.removeProp(Node.IS_CONSTANT_NAME);    	compilable	timeout	116	1	replace
846	[BUG]  [BUGGY]  parent.removeProp(Node.IS_CONSTANT_NAME);  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parent.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parent.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    node.removeProp(Node.IS_CONSTANT_NAME);    	compilable	timeout	116	1	replace
847	[BUG]  [BUGGY]  n.removeProp(Node.IS_SYNTHETIC);  [CE]  cannot  find  symbol  IS_SYNTHETIC  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_SYNTHETIC);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_SYNTHETIC);	  n.removeProp(Node.IS_TYPE);    	non-compiled	[CE]  cannot  find  symbol  IS_SYNTHETIC	113	None	replace
848	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  newName));  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  newName));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  newName));	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    parent);    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	81	None	replace
849	[BUG]  [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nameStack  =  no.getLastChild();  [CE]  variable  nameStack  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  Node  nameStack  =  no.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameStack    =    n.getLastChild();    Node  nameStack  =  no.getLastChild();	  timeout    	non-compiled	[CE]  variable  nameStack  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	28	None	add
850	[BUG]  [BUGGY]          Node  nameStack  =  n.getLastChild();  Number  nameStack  =  n.getLastChild();  [CE]  variable  nameStack  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameStack  =  n.getLastChild();  Number  nameStack  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameStack    =    n.getLastChild();    Number  nameStack  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  nameStack  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	28	None	add
851	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_PROPERTY);  [CE]  cannot  find  symbol  IS_FUNCTION_PROPERTY  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION_PROPERTY);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_PROPERTY);	  n.removeProp(Node.IS_FUNCTION_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_PROPERTY	17	None	replace
852	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.replaceChild(n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.replaceChild(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.replaceChild(n,  newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);    parent.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	41	None	replace
853	[BUG]  [BUGGY]  n.removeProp(Node.IS_PUBLIC_NAME,  newName);  [CE]  cannot  find  symbol  IS_PUBLIC_NAME  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_PUBLIC_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_PUBLIC_NAME,  newName);	  n.removeProp(Node.IS_FUNCTION_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_PUBLIC_NAME	18	None	replace
854	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  newName));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  newName));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_NAME,  newName));	  n.removeProp(Node.IS_FUNCTION_NAME,    newName);    	non-compiled	[CE]  ';'  expected	18	None	replace
855	[BUG]  [BUGGY]  n.setString(getName(n.getString()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getName(n.getString()));	  n.setString(getReplacementName(n.getString()    +    1));    timeout    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
856	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString(),  newName));  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString(),  newName));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString(),  newName));	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	1	None	replace
857	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString(),  newName),  t);  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString(),  newName),  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString(),  newName),  t);	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	1	None	replace
858	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+  1,  newName);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString())+  1,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+  1,  newName);	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
859	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()),  newName,  idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  newName,  idPrefix);	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	1	None	replace
860	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  newName,  t.getCompiler());  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()),  newName,  t.getCompiler());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  newName,  t.getCompiler());	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
861	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  newName,  null);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()),  newName,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  newName,  null);	  n.setString(getReplacementName(n.getString()),    newName);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	1	None	replace
862	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  n,  parent);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  n,  parent);	  n.replaceChild(n,    newName,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	48	None	replace
863	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  n);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  n);	  n.replaceChild(n,    newName,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	48	None	replace
864	[BUG]  [BUGGY]  n.addChildToFront(newName)  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName)  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName)	  n.addProp(Node.IS_CONSTANT_NAME,    newName)    	non-compiled	[CE]  ';'  expected	106	None	replace
865	[BUG]  [BUGGY]  n.addChildToBack(newName)  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToBack(newName)  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToBack(newName)	  n.addProp(Node.IS_CONSTANT_NAME,    newName)    	non-compiled	[CE]  ';'  expected	106	None	replace
866	[BUG]  [BUGGY]  n.removeProp(Node.IS_TYPE,  newName);  [CE]  cannot  find  symbol  IS_TYPE  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_TYPE,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_TYPE,  newName);	  n.removeProp(Node.IS_NAME_PROP,    newName);    	non-compiled	[CE]  cannot  find  symbol  IS_TYPE	44	None	replace
867	[BUG]  [BUGGY]  Number.setString(newName,  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Number.setString(newName,  n.getFirstChild());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Number.setString(newName,  n.getFirstChild());	  Number.setString(newName);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
868	[BUG]  [BUGGY]  Number  t  =  newName.setString(newName);  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Number  t  =  newName.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Number  t  =  newName.setString(newName);	  Number.setString(newName);    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	14	None	replace
869	[BUG]  [BUGGY]  n.removeProp(Node.IS_LIST_NAME,  newName);  [CE]  cannot  find  symbol  IS_LIST_NAME  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_LIST_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_LIST_NAME,  newName);	  n.removeProp(Node.IS_LIST_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_LIST_NAME	146	None	replace
870	[BUG]  [BUGGY]  name.addChildToBack(newName);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  name.addChildToBack(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	name.addChildToBack(newName);	  name.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  name	91	None	replace
871	[BUG]  [BUGGY]  name.addChildToFront(newName);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  name.addChildToFront(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	name.addChildToFront(newName);	  name.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  name	91	None	replace
872	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  + ",:   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    n.setString(newName  + ",:   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	97	1	add
873	[BUG]  [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  + ",:   "  +  getReplacementName(n.getString()));  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  + ",:   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    n.setString(newName  + ",:   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	97	1	add
874	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  + ".:   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    n.setString(newName  + ".:   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	97	1	add
875	[BUG]  [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  + ".:   "  +  getReplacementName(n.getString()));  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   ":   "  +  getReplacementName(n.getString()));  n.setString(newName  + ".:   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   ":   "    +    getReplacementName(n.getString()));    n.setString(newName  + ".:   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	97	1	add
876	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getName(n.getString()));  n.setString(getReplacementName(n.getString()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  n.setString(getName(n.getString()));  n.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));        n.setString(getReplacementName(n.getString()));    n.setString(getName(n.getString()));  n.setString(getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  cannot  find  symbol	5	None	add
877	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Node  name  =  no.getFirstChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Node  name  =  no.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Node  name  =  no.getFirstChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	add
878	[BUG]  [BUGGY]          Node  name  =  n.getFirstChild();  Node  name  =  null.getFirstChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getFirstChild();  Node  name  =  null.getFirstChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getFirstChild();    Node  name  =  null.getFirstChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	20	None	add
879	[BUG]  [BUGGY]  n.removeProp(Node.IS_LITERAL_NAME);  [CE]  cannot  find  symbol  IS_LITERAL_NAME  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_LITERAL_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_LITERAL_NAME);	  n.removeProp(Node.IS_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_LITERAL_NAME	103	None	replace
880	[BUG]  [BUGGY]  n.removeProp(Node.IS_ID_SEPARATOR  +  1);  [CE]  cannot  find  symbol  IS_ID_SEPARATOR  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_ID_SEPARATOR  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_ID_SEPARATOR  +  1);	  n.removeProp(Node.IS_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_ID_SEPARATOR	103	None	replace
881	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(GetReplacementName(n.getString()  +  1));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(GetReplacementName(n.getString()  +  1));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()    +    1));    n.setString(GetReplacementName(n.getString()  +  1));	  timeout    	non-compiled	[CE]  cannot  find  symbol	2	None	add
882	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getreplacementName(n.getString()  +  1));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  n.setString(getreplacementName(n.getString()  +  1));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()    +    1));    n.setString(getreplacementName(n.getString()  +  1));	  timeout    	non-compiled	[CE]  cannot  find  symbol	2	None	add
883	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  N.setString(getReplacementName(n.getString()  +  1));  [CE]  cannot  find  symbol  N  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  N.setString(getReplacementName(n.getString()  +  1));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()    +    1));    N.setString(getReplacementName(n.getString()  +  1));	  timeout    	non-compiled	[CE]  cannot  find  symbol  N	2	None	add
884	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  t);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  t);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    parent);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
885	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  t.getModule());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  t.getModule());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  t.getModule());	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    parent);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
886	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  renamer);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  renamer);	  n.addProp(Node.IS_CONSTANT_NAME,    newName,    parent);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
887	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME);        n.getProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	133	1	add
888	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.getProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	133	1	add
889	[BUG]  [BUGGY]  n.replaceChild(n,  parent,  newName,  getReplacementName(n.getString()));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent,  newName,  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  parent,  newName,  getReplacementName(n.getString()));	  n.replaceChild(n,    parent,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	49	None	replace
890	[BUG]  [BUGGY]  n.addChildToFront(newName,  t,  newName);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t,  newName);	  n.addChildToFront(newName,    t);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
891	[BUG]  [BUGGY]  n.addChildToFront(newName,  t,  null);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t,  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t,  null);	  n.addChildToFront(newName,    t);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
892	[BUG]  [BUGGY]  n.addChildToFront(newName,  t,  nameStack);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t,  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t,  nameStack);	  n.addChildToFront(newName,    t);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	130	None	replace
893	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN,  newName);  [CE]  cannot  find  symbol  IS_UNKNOWN  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNKNOWN,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN,  newName);	  n.removeProp(Node.IS_UNKNOWN);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN	128	None	replace
894	[BUG]  [BUGGY]  n.replaceChild(n,  parent,  newName,  renamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent,  newName,  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  parent,  newName,  renamer);	  n.replaceChild(n,    newName,    renamer);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	100	None	replace
895	[BUG]  [BUGGY]  NamingStrategy.setString(newName  + ": ");  [CE]  cannot  find  symbol  NamingStrategy  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NamingStrategy.setString(newName  + ": ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NamingStrategy.setString(newName  + ": ");	  NamingStrategy.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  NamingStrategy	13	None	replace
896	[BUG]  [BUGGY]  n.replaceChild(name,  newName,  nameStack);  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(name,  newName,  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(name,  newName,  nameStack);	  n.replaceChild(n,    newName,    nameStack);    	non-compiled	[CE]  cannot  find  symbol  name	51	None	replace
897	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  n,  nameStack);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  n,  nameStack);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  n,  nameStack);	  n.replaceChild(n,    newName,    nameStack);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	51	None	replace
898	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.addProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  n.addProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);        n.removeProp(Node.IS_CONSTANT_NAME);    n.addProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol	36	None	add
899	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);	  timeout    	compilable	timeout	45	1	add
900	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);	  timeout    	compilable	timeout	45	1	add
901	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  n.replaceChild(n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  n.replaceChild(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    n.replaceChild(n,  newName);	  timeout    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	45	None	add
902	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  NodeUtil.removeChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.replaceChild(n,    parent);    NodeUtil.removeChild(n,  parent);	  timeout    	compilable	timeout	45	1	add
903	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  NodeUtil.removeChild(n,  parent);  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  NodeUtil.removeChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    NodeUtil.removeChild(n,  parent);	  timeout    	compilable	timeout	45	1	add
904	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  n.replaceChild(n,  parent);  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.replaceChild(n,    parent);    n.replaceChild(n,  parent);  nameStack.pop();	  timeout    	compilable	timeout	45	1	add
905	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  n.replaceChild(n,  parent);  nameStack.pop();  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  n.replaceChild(n,  parent);  nameStack.pop();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    n.replaceChild(n,  parent);  nameStack.pop();	  timeout    	compilable	timeout	45	1	add
906	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  n.replaceChild(parent,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.replaceChild(n,    parent);    n.replaceChild(parent,  parent);	  timeout    	compilable	timeout	45	1	add
907	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  n.replaceChild(parent,  parent);  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  parent);  n.replaceChild(parent,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,    parent);    n.replaceChild(parent,  parent);	  timeout    	compilable	timeout	45	1	add
908	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  parentUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	                Node    nameUsage    =    n.getLastChild();    Node  parentUsage  =  n.getLastChild();	  timeout    	compilable	timeout	22	1	add
909	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  parentUsage  =  n.getLastChild();  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  parentUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    Node  parentUsage  =  n.getLastChild();	  timeout    	compilable	timeout	22	1	add
910	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  nameUsage  =  no.getLastChild();  [CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Node  nameUsage  =  no.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    Node  nameUsage  =  no.getLastChild();	  timeout    	non-compiled	[CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	22	None	add
911	[BUG]  [BUGGY]          Node  nameUsage  =  n.getLastChild();  Number  nameUsage  =  n.getLastChild();  [CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  nameUsage  =  n.getLastChild();  Number  nameUsage  =  n.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    nameUsage    =    n.getLastChild();    Number  nameUsage  =  n.getLastChild();	  timeout    	non-compiled	[CE]  variable  nameUsage  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	22	None	add
912	[BUG]  [BUGGY]  STRICT_NAME_ID_SEPARATOR.setString(newName);  [CE]  cannot  find  symbol  STRICT_NAME_ID_SEPARATOR  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  STRICT_NAME_ID_SEPARATOR.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	STRICT_NAME_ID_SEPARATOR.setString(newName);	  NAME_ID_SEPARATOR.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  STRICT_NAME_ID_SEPARATOR	90	None	replace
913	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  Node.newString(Token.NAME,  newName));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.replaceChild(n,  Node.newString(Token.NAME,  newName));	  n.replaceChild(n,    parent);    timeout    	compilable	timeout	46	1	replace
914	[BUG]  [BUGGY]  n.replaceChild(n,  Node.newString(Token.NAME,  newName));  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  Node.newString(Token.NAME,  newName));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  Node.newString(Token.NAME,  newName));	  n.replaceChild(n,    parent);    timeout    	compilable	timeout	46	1	replace
915	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  Node.newNumber(0));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.replaceChild(n,  Node.newNumber(0));	  n.replaceChild(n,    parent);    timeout    	compilable	timeout	46	1	replace
916	[BUG]  [BUGGY]  n.replaceChild(n,  Node.newNumber(0));  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  Node.newNumber(0));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  Node.newNumber(0));	  n.replaceChild(n,    parent);    timeout    	compilable	timeout	46	1	replace
917	[BUG]  [BUGGY]  n.removeChild(newName,  t);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName,  t);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName,  t);	  n.removeChild(newName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	72	None	replace
918	[BUG]  [BUGGY]  n.removeChild(newName,  n);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(newName,  n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName,  n);	  n.removeChild(newName);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	72	None	replace
919	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()), " ");  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()), " ");  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()), " ");	  n.setString(getReplacementName(n.getString()    +   ")   ");    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	127	None	replace
920	[BUG]  [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +... "._   "  +  getReplacementName(n.getString()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +... "._   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    n.setString(newName  +... "._   "  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  illegal  start  of  expression	82	None	add
921	[BUG]  [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +. "._   "  +  getReplacementName(n.getString()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  +   "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +. "._   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "._   "    +    getReplacementName(n.getString()));    n.setString(newName  +. "._   "  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  illegal  start  of  expression	82	None	add
922	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getModule(),  raf);  [CE]  cannot  find  symbol  raf  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getModule(),  raf);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getModule(),  raf);	  n.addChildToFront(newName,    t.getModule());    	non-compiled	[CE]  cannot  find  symbol  raf	131	None	replace
923	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getInitializingContextualRenamer();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  t  =  n.getInitializingContextualRenamer();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  t  =  n.getInitializingContextualRenamer();	          ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	30	None	replace
924	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getImmediateParentNode();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  t  =  n.getImmediateParentNode();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  t  =  n.getImmediateParentNode();	          ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	30	None	replace
925	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getDeclaration();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  t  =  n.getDeclaration();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  t  =  n.getDeclaration();	          ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	30	None	replace
926	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  inlineIdSupplier,  rootRenamer);  [CE]  cannot  find  symbol  inlineIdSupplier  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  inlineIdSupplier,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  inlineIdSupplier,  rootRenamer);	  n.replaceChild(n,    newName,    rootRenamer);    	non-compiled	[CE]  cannot  find  symbol  inlineIdSupplier	101	None	replace
927	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  InlineRenamer.UNKNOWN);  [CE]  cannot  find  symbol  UNKNOWN  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  InlineRenamer.UNKNOWN);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  InlineRenamer.UNKNOWN);	  n.replaceChild(n,    newName,    rootRenamer);    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN	101	None	replace
928	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(GetReplacementName(n,  parent.getString()));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(GetReplacementName(n,  parent.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));  n.setString(GetReplacementName(n,  parent.getString()));	  n.setString(getReplacementName(n.getString()));    n.setString(GetReplacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
929	[BUG]  [BUGGY]  newName  =  n.setString(newName);  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  newName  =  n.setString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	newName  =  n.setString(newName);	  newName.setString(newName);    	non-compiled	[CE]  incompatible  types	15	None	replace
930	[BUG]  [BUGGY]  newName  =  nameMap.get(newName);  [CE]  cannot  find  symbol  nameMap  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  newName  =  nameMap.get(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	newName  =  nameMap.get(newName);	  newName.setString(newName);    	non-compiled	[CE]  cannot  find  symbol  nameMap	15	None	replace
931	[BUG]  [BUGGY]  newName  =  nameStack.peek();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  newName  =  nameStack.peek();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	newName  =  nameStack.peek();	  newName.setString(newName);    	non-compiled	[CE]  incompatible  types	15	None	replace
932	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNSPECIFIED_NAME);  [CE]  cannot  find  symbol  IS_UNSPECIFIED_NAME  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNSPECIFIED_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNSPECIFIED_NAME);	  n.removeProp(Node.IS_UNIQUE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_UNSPECIFIED_NAME	34	None	replace
933	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +    getReplacementName(n.getString()));    n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	141	1	add
934	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +    getReplacementName(n.getString()));    n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	141	1	add
935	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  null,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  null,  idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  null,  idPrefix);	  n.replaceChild(n,    newName,    null);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	102	None	replace
936	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  null,  parent);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  null,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  null,  parent);	  n.replaceChild(n,    newName,    null);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	102	None	replace
937	[BUG]  [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  newName).replaceChild(n,  parent);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  newName).replaceChild(n,  parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceProp(Node.IS_CONSTANT_NAME,  newName).replaceChild(n,  parent);	  n.replaceProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
938	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   ",_     "  +  getReplacementName(n.getString()));  n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +   ",_       "    +    getReplacementName(n.getString()));    n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_ "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	60	1	add
939	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   ",_     "  +  getReplacementName(n.getString()));  n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_ "  +  getReplacementName(n.getString()));  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +   ",_     "  +  getReplacementName(n.getString()));  n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_ "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +   ",_       "    +    getReplacementName(n.getString()));    n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  n.setString(newName  +   ",_ "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	60	1	add
940	[BUG]  [BUGGY]  n.setProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);    timeout    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
941	[BUG]  [BUGGY]  n.addChildToFront(newName,  n.getFirstChild());  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  n.getFirstChild());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  n.getFirstChild());	  n.addChildToFront(newName,    n);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	96	None	replace
942	[BUG]  [BUGGY]  n.addChildToFront(newName,  n.idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  n.idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  n.idPrefix);	  n.addChildToFront(newName,    n);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	96	None	replace
943	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Node  name  =  no.getLastChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Node  name  =  no.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Node  name  =  no.getLastChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	24	None	add
944	[BUG]  [BUGGY]          Node  name  =  n.getLastChild();  Node  name  =  null.getLastChild();  [CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]          Node  name  =  n.getLastChild();  Node  name  =  null.getLastChild();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	                Node    name    =    n.getLastChild();    Node  name  =  null.getLastChild();	  timeout    	non-compiled	[CE]  variable  name  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	24	None	add
945	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  raf);  [CE]  cannot  find  symbol  raf  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  raf);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getCompiler(),  raf);	  n.addChildToFront(newName,    t.getCompiler());    	non-compiled	[CE]  cannot  find  symbol  raf	132	None	replace
946	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  null);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addChildToFront(newName,  t.getCompiler(),  null);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getCompiler(),  null);	  n.addChildToFront(newName,    t.getCompiler());    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	132	None	replace
947	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  Node.removeProp(Node.IS_CONSTANT_NAME  +  1);  [CE]  non-static  method  removeProp(int)  cannot  be  referenced  from  a  static  context  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  Node.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    Node.removeProp(Node.IS_CONSTANT_NAME  +  1);	  timeout    	non-compiled	[CE]  non-static  method  removeProp(int)  cannot  be  referenced  from  a  static  context	124	None	add
948	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    parent.removeProp(Node.IS_CONSTANT_NAME  +  1);	  timeout    	compilable	timeout	124	1	add
949	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.removeProp(Node.IS_CONSTANT_NAME  +  1);  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  parent.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME    +    1);    parent.removeProp(Node.IS_CONSTANT_NAME  +  1);	  timeout    	compilable	timeout	124	1	add
950	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }	  t.getCompiler().reportCodeChange();    timeout    	compilable	timeout	109	1	replace
951	[BUG]  [BUGGY]  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	if(newName!=  null)  {  t.getCompiler().reportCodeChange();  }	  t.getCompiler().reportCodeChange();    timeout    	compilable	timeout	109	1	replace
952	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNIKNOWN_SEPARATOR);  [CE]  cannot  find  symbol  IS_UNIKNOWN_SEPARATOR  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_UNIKNOWN_SEPARATOR);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNIKNOWN_SEPARATOR);	  n.removeProp(Node.IS_UNKNOWN_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_UNIKNOWN_SEPARATOR	35	None	replace
953	[BUG]  [BUGGY]  n.removeString(newName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeString(newName);	  n.setString(oldName);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
954	[BUG]  [BUGGY]  n.addString(newName);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.addString(newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addString(newName);	  n.setString(oldName);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
955	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  newName),  renamer);  [CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  newName),  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString(),  newName),  renamer);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    renamer);    	non-compiled	[CE]  method  getReplacementName  in  class  MakeDeclaredNamesUnique  cannot  be  applied  to  given  types;	84	None	replace
956	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  renamer,  rootRenamer);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  renamer,  rootRenamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  renamer,  rootRenamer);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    renamer);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	84	None	replace
957	[BUG]  [BUGGY]  n.setString(newName  + ",  _ "  +  getReplacementName(n.getString()),  renamer);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + ",  _ "  +  getReplacementName(n.getString()),  renamer);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ",  _ "  +  getReplacementName(n.getString()),  renamer);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    renamer);    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	84	None	replace
958	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_...   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	58	1	add
959	[BUG]  [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_...   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName    +     "_     "    +    getReplacementName(n.getString()));    n.setString(newName  +     "_...   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName        +       "_       "        +        getReplacementName(n.getString()));        n.setString(newName    +       "_...   "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));  n.setString(newName  +   "_...   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	58	1	add
960	[BUG]  [BUGGY]  n.removeProp(Node.IS_PROPERTY);  [CE]  cannot  find  symbol  IS_PROPERTY  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_PROPERTY);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_PROPERTY);	  n.removeProp(Node.IS_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_PROPERTY	33	None	replace
961	[BUG]  [BUGGY]  n.removeProp(Node.IS_VAR_NAME);  [CE]  cannot  find  symbol  IS_VAR_NAME  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_VAR_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_VAR_NAME);	  n.removeProp(Node.IS_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_VAR_NAME	69	None	replace
962	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.removeChild(parent,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.removeChild(parent,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    parent.replaceChild(n,    newName);    n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	39	None	replace
963	[BUG]  [BUGGY]  Node  nameStack  =  n.peek();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  Node  nameStack  =  n.peek();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  nameStack  =  n.peek();	          Node    nameStack    =    n.getLastChild();    timeout    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
964	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  n.idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  n.idPrefix);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  n.idPrefix);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()),    nameUsage);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	85	None	replace
965	[BUG]  [BUGGY]  NodeUtil.setString(getReplacementName(n.getString()));  N.setString(getReplacementName(n.getString()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.setString(getReplacementName(n.getString()));  N.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.setString(getReplacementName(n.getString()));  N.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    N.setString(getReplacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
966	[BUG]  [BUGGY]  NodeUtil.setString(getReplacementName(n.getString()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.setString(getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.setString(getReplacementName(n.getString()));	  n.setString(getReplacementName(n.getString()));    N.setString(getReplacementName(n.getString()));    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
967	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  t.getModule());  [CE]  no  suitable  method  found  for  removeProp(int,String,JSModule)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  t.getModule());  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName,  t.getModule());	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,String,JSModule)	73	None	replace
968	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  getReplacementName(n.getString()));  [CE]  no  suitable  method  found  for  removeProp(int,String,String)  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName,  getReplacementName(n.getString()));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName,  getReplacementName(n.getString()));	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,String,String)	73	None	replace
969	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  }  else  {  t.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	NodeUtil.copyNameAnnotations(n,    parent);    NodeUtil.copyNameAnnotations(n,  parent);  }  else  {  t.getCompiler().reportCodeChange();	  timeout    	compilable	timeout	137	1	add
970	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  }  else  {  t.getCompiler().reportCodeChange();  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  }  else  {  t.getCompiler().reportCodeChange();  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    NodeUtil.copyNameAnnotations(n,  parent);  }  else  {  t.getCompiler().reportCodeChange();	  timeout    	compilable	timeout	137	1	add
971	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  }  else  {  t.getCompiler().reportCodeChange();  break;  [CE]  unreachable  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  NodeUtil.copyNameAnnotations(n,  parent);  }  else  {  t.getCompiler().reportCodeChange();  break;  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    NodeUtil.copyNameAnnotations(n,  parent);  }  else  {  t.getCompiler().reportCodeChange();  break;	  timeout    	non-compiled	[CE]  unreachable  statement	137	None	add
972	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	NodeUtil.copyNameAnnotations(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	137	1	add
973	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  Preconditions.checkState(n.getType()  ==  Token.NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,    parent);    Preconditions.checkState(n.getType()  ==  Token.NAME);  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	137	1	add
974	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerForCodeInsertion(n);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerForCodeInsertion(n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  compiler  =  t.getCompilerForCodeInsertion(n);	          ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
975	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerForNode(n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  ContextualRenamer  compiler  =  t.getCompilerForNode(n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	ContextualRenamer  compiler  =  t.getCompilerForNode(n);	          ContextualRenamer    compiler    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
976	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  getReplacementName(newName));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.replaceChild(n,  newName,  getReplacementName(newName));  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  getReplacementName(newName));	  n.replaceChild(n,    newName,    idPrefix);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	143	None	replace
977	[BUG]  [BUGGY]  n.removeChild(parent);  n.revealChild(parent);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  n.revealChild(parent);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    n.revealChild(parent);	  timeout    	non-compiled	[CE]  cannot  find  symbol	122	None	add
978	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  parent.removeChild(n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeChild(parent);    parent.removeChild(n);	  timeout    	compilable	timeout	122	1	add
979	[BUG]  [BUGGY]  n.removeChild(parent);  parent.removeChild(n);  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  n.removeChild(parent);  parent.removeChild(n);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);    parent.removeChild(n);	  timeout    	compilable	timeout	122	1	add
980	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
981	[BUG]  [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
982	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  nameStack.pop();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  nameStack.pop();  }	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
983	[BUG]  [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  nameStack.pop();  }  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  nameStack.pop();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  nameStack.pop();  }	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
984	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  return;  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  return;  }	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
985	[BUG]  [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  return;  }  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  return;  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  return;  }	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
986	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
987	[BUG]  [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
988	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  t.getCompiler().reportCodeChange();  }	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
989	[BUG]  [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  t.getCompiler().reportCodeChange();  }  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  t.getCompiler().reportCodeChange();  }  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	if(newName!=  null)  {  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  }  else  {  t.getCompiler().reportCodeChange();  }	  n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	6	1	replace
990	[BUG]  [BUGGY]  parent.replaceChild(n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parent.replaceChild(n,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parent.replaceChild(n,  newName);	  parent.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	79	None	replace
991	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.IS_CONSTANT_NAME,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }      [BUGGY]  parent.replaceChild(n,  Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parent.replaceChild(n,  Node.IS_CONSTANT_NAME,  newName);	  parent.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	79	None	replace
