bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()),  newName);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()),  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()),  newName);	  n.setString(getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	4	None	replace
2	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()  +  1));	  n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	4	1	replace
3	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  timeout  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()  +  1));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()  +  1));	  n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	4	1	replace
4	[BUG]  [BUGGY]  n.setString(getReplacementName(newName.getString()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(newName.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(newName.getString()));	  n.setString(getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
5	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));	  timeout    	compilable	timeout	3	1	add
6	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  timeout  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));	  timeout    	compilable	timeout	3	1	add
7	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  Node  n.setString(getReplacementName(n.getString()));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()));  Node  n.setString(getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));    Node  n.setString(getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  ';'  expected	3	None	add
8	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();	  timeout    	compilable	timeout	3	1	add
9	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();  timeout  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(getReplacementName(n.getString()));  nameStack.pop();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));    n.setString(getReplacementName(n.getString()));  nameStack.pop();	  timeout    	compilable	timeout	3	1	add
10	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(replacementName(n.getString()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(replacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));    n.setString(replacementName(n.getString()));	  timeout    	non-compiled	[CE]  cannot  find  symbol	3	None	add
11	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  node.setString(getReplacementName(n.getString()));  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()));  node.setString(getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));    node.setString(getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  cannot  find  symbol  node	3	None	add
12	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(GetReplacementName(n.getString()));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()));  n.setString(GetReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));    n.setString(GetReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  cannot  find  symbol	3	None	add
13	[BUG]  [BUGGY]  NamingStrategy.setString(newName);  [CE]  cannot  find  symbol  NamingStrategy  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  NamingStrategy.setString(newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NamingStrategy.setString(newName);	  n.setString(idPrefix);    	non-compiled	[CE]  cannot  find  symbol  NamingStrategy	5	None	replace
14	[BUG]  [BUGGY]  Number.setString(newName);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  Number.setString(newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Number.setString(newName);	  n.setString(idPrefix);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
15	[BUG]  [BUGGY]  newName.setString(newName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  newName.setString(newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	newName.setString(newName);	  n.setString(idPrefix);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
16	[BUG]  [BUGGY]  n.setString(oldName);  [CE]  cannot  find  symbol  oldName  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(oldName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(oldName);	  n.setString(idPrefix);    	non-compiled	[CE]  cannot  find  symbol  oldName	5	None	replace
17	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_PROP);  [CE]  cannot  find  symbol  IS_FUNCTION_PROP  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_FUNCTION_PROP);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_PROP);	  n.removeProp(Node.IS_FUNCTION_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_PROP	13	None	replace
18	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  newName);  [CE]  cannot  find  symbol  IS_FUNCTION_NAME  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_NAME,  newName);	  n.removeProp(Node.IS_FUNCTION_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_NAME	13	None	replace
19	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_SIGNATURE);  [CE]  cannot  find  symbol  IS_FUNCTION_SIGNATURE  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_FUNCTION_SIGNATURE);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_SIGNATURE);	  n.removeProp(Node.IS_FUNCTION_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_SIGNATURE	13	None	replace
20	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      Node  name  =  n.getFirstChild();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	        Node  name  =  n.getFirstChild();	  timeout    	compilable	timeout	8	1	add
21	[BUG]  [BUGGY]      Node  name  =  n.getFirstChild();  timeout  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      Node  name  =  n.getFirstChild();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	        Node  name  =  n.getFirstChild();	  timeout    	compilable	timeout	8	1	add
22	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      Node  nameUsage  =  n.getLastChild();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	        Node  nameUsage  =  n.getLastChild();	  timeout    	compilable	timeout	8	1	add
23	[BUG]  [BUGGY]      Node  nameUsage  =  n.getLastChild();  timeout  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      Node  nameUsage  =  n.getLastChild();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	        Node  nameUsage  =  n.getLastChild();	  timeout    	compilable	timeout	8	1	add
24	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      Node  name  =  n.getLastChild();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	        Node  name  =  n.getLastChild();	  timeout    	compilable	timeout	8	1	add
25	[BUG]  [BUGGY]      Node  name  =  n.getLastChild();  timeout  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      Node  name  =  n.getLastChild();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	        Node  name  =  n.getLastChild();	  timeout    	compilable	timeout	8	1	add
26	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      Node  nameUsage  =  n.getFirstChild();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	        Node  nameUsage  =  n.getFirstChild();	  timeout    	compilable	timeout	8	1	add
27	[BUG]  [BUGGY]      Node  nameUsage  =  n.getFirstChild();  timeout  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      Node  nameUsage  =  n.getFirstChild();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	        Node  nameUsage  =  n.getFirstChild();	  timeout    	compilable	timeout	8	1	add
28	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      Node  nameStack  =  n.getLastChild();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	        Node  nameStack  =  n.getLastChild();	  timeout    	compilable	timeout	8	1	add
29	[BUG]  [BUGGY]      Node  nameStack  =  n.getLastChild();  timeout  [FE]                          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      Node  nameStack  =  n.getLastChild();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	        Node  nameStack  =  n.getLastChild();	  timeout    	compilable	timeout	8	1	add
30	[BUG]  [BUGGY]      ContextualRenamer  t  =  n.getConstructor();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      ContextualRenamer  t  =  n.getConstructor();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	        ContextualRenamer  t  =  n.getConstructor();	  timeout    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	8	None	add
31	[BUG]  [BUGGY]      ContextualRenamer  rootRenamer  =  n.getConstructor();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      ContextualRenamer  rootRenamer  =  n.getConstructor();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	        ContextualRenamer  rootRenamer  =  n.getConstructor();	  timeout    	non-compiled	[CE]  cannot  find  symbol	8	None	add
32	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP,  newName);  [CE]  cannot  find  symbol  IS_UNKNOWN_PROP  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_PROP,  newName);	  n.removeProp(Node.IS_UNKNOWN_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_PROP	7	None	replace
33	[BUG]  [BUGGY]  n.removeProp(Node.IS_PROP);  [CE]  cannot  find  symbol  IS_PROP  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_PROP);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_PROP);	  n.removeProp(Node.IS_UNKNOWN_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_PROP	7	None	replace
34	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNIQUE_ID_SEPARATOR);  [CE]  cannot  find  symbol  IS_UNIQUE_ID_SEPARATOR  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_UNIQUE_ID_SEPARATOR);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNIQUE_ID_SEPARATOR);	  n.removeProp(Node.IS_SINGLE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_UNIQUE_ID_SEPARATOR	14	None	replace
35	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_SEPARATOR);  [CE]  cannot  find  symbol  IS_UNKNOWN_SEPARATOR  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_UNKNOWN_SEPARATOR);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_SEPARATOR);	  n.removeProp(Node.IS_SINGLE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_SEPARATOR	14	None	replace
36	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	1	1	add
37	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	1	1	add
38	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    Node  n  =  parent.getFirstChild();  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	1	None	add
39	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    parent.replaceChild(n,  newName);  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	add
40	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  Node  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  Node  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    Node  n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
41	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  parent.replaceChild(n,  newName);	  timeout    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	1	None	add
42	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  parent.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME);  parent.getCompiler().reportCodeChange();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME);  parent.getCompiler().reportCodeChange();	  timeout    	non-compiled	[CE]  cannot  find  symbol	1	None	add
43	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTRUCTOR_NAME);  [CE]  cannot  find  symbol  IS_CONSTRUCTOR_NAME  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTRUCTOR_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTRUCTOR_NAME);	  n.removeProp(Node.IS_NAME_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTRUCTOR_NAME	16	None	replace
44	[BUG]  [BUGGY]  n.removeProp(Node.IS_NAME_PROP,  newName);  [CE]  cannot  find  symbol  IS_NAME_PROP  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_NAME_PROP,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_NAME_PROP,  newName);	  n.removeProp(Node.IS_NAME_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_NAME_PROP	16	None	replace
45	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceChild(n,  parent);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.replaceChild(n,  parent);	  n.replaceChild(n,    newName);    	compilable	timeout	6	1	replace
46	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  timeout  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceChild(n,  parent);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  parent);	  n.replaceChild(n,    newName);    	compilable	timeout	6	1	replace
47	[BUG]  [BUGGY]  n.replaceChild(parent,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceChild(parent,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(parent,  newName);	  n.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	6	None	replace
48	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  parent);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceChild(n,  newName,  parent);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  parent);	  n.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	6	None	replace
49	[BUG]  [BUGGY]  n.replaceChild(n,  parent,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceChild(n,  parent,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  parent,  newName);	  n.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	6	None	replace
50	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceChild(n,  newName,  nameUsage);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  nameUsage);	  n.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	6	None	replace
51	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  nameStack);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceChild(n,  newName,  nameStack);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  nameStack);	  n.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	6	None	replace
52	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  name);  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceChild(n,  newName,  name);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  name);	  n.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	6	None	replace
53	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	10	1	add
54	[BUG]  [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	10	1	add
55	[BUG]  [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  Node  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  Node  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    Node  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  	10	None	add
56	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	10	1	add
57	[BUG]  [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  timeout  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_-   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	10	1	add
58	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_... "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_... "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	10	1	add
59	[BUG]  [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_... "  +  getReplacementName(n.getString()));  timeout  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_... "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_... "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	10	1	add
60	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	10	1	add
61	[BUG]  [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  timeout  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  + ",_   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	10	1	add
62	[BUG]  [BUGGY]  n.addChildToFront(newName,  parent);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addChildToFront(newName,  parent);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  parent);	  n.addChildToFront(newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
63	[BUG]  [BUGGY]  n.addChildToFront(newName,  nameStack);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addChildToFront(newName,  nameStack);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  nameStack);	  n.addChildToFront(newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
64	[BUG]  [BUGGY]  n.addChildToFront(newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addChildToFront(newName,  nameUsage);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  nameUsage);	  n.addChildToFront(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	15	None	replace
65	[BUG]  [BUGGY]  n.addChildToFront(newName,  rootRenamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addChildToFront(newName,  rootRenamer);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  rootRenamer);	  n.addChildToFront(newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
66	[BUG]  [BUGGY]  n.addChildToFront(newName,  name);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addChildToFront(newName,  name);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  name);	  n.addChildToFront(newName);    	non-compiled	[CE]  cannot  find  symbol  name	15	None	replace
67	[BUG]  [BUGGY]  n.addChildToFront(newName,  newName);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addChildToFront(newName,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  newName);	  n.addChildToFront(newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
68	[BUG]  [BUGGY]  n.addChildToFront(parent,  newName);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addChildToFront(parent,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(parent,  newName);	  n.addChildToFront(newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
69	[BUG]  [BUGGY]  n.removeProp(Node.IS_NAME);  [CE]  cannot  find  symbol  IS_NAME  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_NAME);	  n.removeProp(Node.IS_SYNTHETIC_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_NAME	17	None	replace
70	[BUG]  [BUGGY]  n.removeProp(Node.IS_SYNTHETIC_NAME,  newName);  [CE]  cannot  find  symbol  IS_SYNTHETIC_NAME  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_SYNTHETIC_NAME,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_SYNTHETIC_NAME,  newName);	  n.removeProp(Node.IS_SYNTHETIC_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_SYNTHETIC_NAME	17	None	replace
71	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP);  [CE]  cannot  find  symbol  IS_CONSTANT_PROP  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_PROP);	  n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTANT_PROP	2	None	replace
72	[BUG]  [BUGGY]  n.removeChild(newName);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeChild(newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	2	None	replace
73	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  no  suitable  method  found  for  removeProp(int,String)  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,String)	2	None	replace
74	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_PREFIX);  [CE]  cannot  find  symbol  IS_CONSTANT_PREFIX  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_PREFIX);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_PREFIX);	  n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTANT_PREFIX	2	None	replace
75	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  parent);	  n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
76	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  name);  [CE]  cannot  find  symbol  name  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  name);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  name);	  n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	12	None	replace
77	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  global);  [CE]  cannot  find  symbol  global  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName,  global);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName,  global);	  n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol  global	12	None	replace
78	[BUG]  [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	Node  newName  =  n.addProp(Node.IS_CONSTANT_NAME,  newName);	  n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	12	None	replace
79	[BUG]  [BUGGY]  parent.addProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  parent.addProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	parent.addProp(Node.IS_CONSTANT_NAME,  newName);	  n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
80	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  newName);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  newName);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	11	None	replace
81	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  parent);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  parent);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  parent);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	11	None	replace
82	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  + "._ "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + "._ "  +  getReplacementName(n.getString()));	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	11	1	replace
83	[BUG]  [BUGGY]  n.setString(newName  + "._ "  +  getReplacementName(n.getString()));  timeout  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  + "._ "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "._ "  +  getReplacementName(n.getString()));	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	11	1	replace
84	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  renamer);  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  renamer);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  renamer);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	11	None	replace
85	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  nameUsage);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()),  nameUsage);	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	11	None	replace
86	[BUG]  [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_ ")  +  getReplacementName(n.getString()));  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_ ")  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_ ")  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  not  a  statement	10	None	add
87	[BUG]  [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_'  +  getReplacementName(n.getString()));  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +   "_'  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  +   "_'  +  getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  unclosed  string  literal	10	None	add
88	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString())+  1);	  n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	4	1	replace
89	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  timeout  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString())+  1);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString())+  1);	  n.setString(getReplacementName(n.getString()));    timeout    	compilable	timeout	4	1	replace
90	[BUG]  [BUGGY]  NAME_ID_SEPARATOR.setString(newName);  [CE]  cannot  find  symbol  NAME_ID_SEPARATOR  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  NAME_ID_SEPARATOR.setString(newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NAME_ID_SEPARATOR.setString(newName);	  n.setString(idPrefix);    	non-compiled	[CE]  cannot  find  symbol  NAME_ID_SEPARATOR	5	None	replace
91	[BUG]  [BUGGY]  name.setString(newName);  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  name.setString(newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	name.setString(newName);	  n.setString(idPrefix);    	non-compiled	[CE]  cannot  find  symbol  name	5	None	replace
92	[BUG]  [BUGGY]  n.removeProp(Node.IS_NEW_NAME);  [CE]  cannot  find  symbol  IS_NEW_NAME  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_NEW_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_NEW_NAME);	  n.removeProp(Node.IS_SYNTHETIC_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_NEW_NAME	17	None	replace
93	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_SYNTHETIC_NAME);  [CE]  cannot  find  symbol  IS_UNKNOWN_SYNTHETIC_NAME  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_UNKNOWN_SYNTHETIC_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_SYNTHETIC_NAME);	  n.removeProp(Node.IS_SYNTHETIC_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_SYNTHETIC_NAME	17	None	replace
94	[BUG]  [BUGGY]  n.removeProp(Node.IS_SUSPENDING_NAME);  [CE]  cannot  find  symbol  IS_SUSPENDING_NAME  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_SUSPENDING_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_SUSPENDING_NAME);	  n.removeProp(Node.IS_SYNTHETIC_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_SUSPENDING_NAME	17	None	replace
95	[BUG]  [BUGGY]  n.addChildToFront(newName,  renamer);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addChildToFront(newName,  renamer);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  renamer);	  n.addChildToFront(newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
96	[BUG]  [BUGGY]  n.addChildToFront(newName,  n);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addChildToFront(newName,  n);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  n);	  n.addChildToFront(newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
97	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + ": "  +  getReplacementName(n.getString()));	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	11	1	replace
98	[BUG]  [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()));  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  + ": "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + ": "  +  getReplacementName(n.getString()));	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    timeout    	compilable	timeout	11	1	replace
99	[BUG]  [BUGGY]  n.setString(newName  + "_ ",  getReplacementName(n.getString()));  [CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  + "_ ",  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ ",  getReplacementName(n.getString()));	  n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  method  setString  in  class  Node  cannot  be  applied  to  given  types;	11	None	replace
100	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  renamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceChild(n,  newName,  renamer);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  renamer);	  n.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	6	None	replace
101	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  rootRenamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceChild(n,  newName,  rootRenamer);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  rootRenamer);	  n.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	6	None	replace
102	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  null);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceChild(n,  newName,  null);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  null);	  n.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	6	None	replace
103	[BUG]  [BUGGY]  n.removeProp(Node.IS_ID_SEPARATOR);  [CE]  cannot  find  symbol  IS_ID_SEPARATOR  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_ID_SEPARATOR);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_ID_SEPARATOR);	  n.removeProp(Node.IS_SINGLE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_ID_SEPARATOR	14	None	replace
104	[BUG]  [BUGGY]  n.removeProp(Node.IS_SINGLE_ID_NAME);  [CE]  cannot  find  symbol  IS_SINGLE_ID_NAME  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_SINGLE_ID_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_SINGLE_ID_NAME);	  n.removeProp(Node.IS_SINGLE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_SINGLE_ID_NAME	14	None	replace
105	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_SIGNATURE);  [CE]  cannot  find  symbol  IS_UNKNOWN_SIGNATURE  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_UNKNOWN_SIGNATURE);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_SIGNATURE);	  n.removeProp(Node.IS_SINGLE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_SIGNATURE	14	None	replace
106	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName)  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName)  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName)	  n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  ';'  expected	12	None	replace
107	[BUG]  [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceProp(Node.IS_CONSTANT_NAME,  newName);	  n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
108	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  t.getCompiler().reportCodeChange();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	t.getCompiler().reportCodeChange();	      timeout    	compilable	timeout	9	1	replace
109	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  timeout  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  t.getCompiler().reportCodeChange();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();	      timeout    	compilable	timeout	9	1	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newName);  [CE]  cannot  find  symbol  compiler  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  newName);	      timeout    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer,  newName);  [CE]  cannot  find  symbol  compiler  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeTraversal.traverse(compiler,  n,  rootRenamer,  newName);	      timeout    	non-compiled	[CE]  cannot  find  symbol  compiler	9	None	replace
112	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  break;  [CE]  unreachable  statement  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  t.getCompiler().reportCodeChange();  break;  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	t.getCompiler().reportCodeChange();  break;	      timeout    	non-compiled	[CE]  unreachable  statement	9	None	replace
113	[BUG]  [BUGGY]  n.removeProp(Node.IS_TYPE);  [CE]  cannot  find  symbol  IS_TYPE  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_TYPE);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_TYPE);	  n.removeProp(Node.IS_NAME_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_TYPE	16	None	replace
114	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION);  [CE]  cannot  find  symbol  IS_FUNCTION  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_FUNCTION);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION);	  n.removeProp(Node.IS_FUNCTION_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION	13	None	replace
115	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME  +  1);  [CE]  cannot  find  symbol  IS_FUNCTION_NAME  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME  +  1);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_NAME  +  1);	  n.removeProp(Node.IS_FUNCTION_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_NAME	13	None	replace
116	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  node.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  node  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  node.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    node.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol  node	1	None	add
117	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  newName.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  newName.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    newName.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol	1	None	add
118	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);  [CE]  void  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  parent);	  timeout    	non-compiled	[CE]  void  cannot  be  dereferenced	1	None	add
119	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  newName);  [CE]  void  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  newName);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME).replaceChild(n,  newName);	  timeout    	non-compiled	[CE]  void  cannot  be  dereferenced	1	None	add
120	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  N.setString(getReplacementName(n.getString()));  [CE]  cannot  find  symbol  N  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()));  N.setString(getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));    N.setString(getReplacementName(n.getString()));	  timeout    	non-compiled	[CE]  cannot  find  symbol  N	3	None	add
121	[BUG]  [BUGGY]      ContextualRenamer  compiler  =  t.getCompiler();  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      ContextualRenamer  compiler  =  t.getCompiler();  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	        ContextualRenamer  compiler  =  t.getCompiler();	  timeout    	non-compiled	[CE]  incompatible  types	8	None	add
122	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeChild(parent);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeChild(parent);	  n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	compilable	timeout	2	1	replace
123	[BUG]  [BUGGY]  n.removeChild(parent);  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeChild(parent);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeChild(parent);	  n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	compilable	timeout	2	1	replace
124	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME  +  1);	  n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	compilable	timeout	2	1	replace
125	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  timeout  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME  +  1);	  n.removeProp(Node.IS_CONSTANT_NAME);    timeout    	compilable	timeout	2	1	replace
126	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_NAME);  [CE]  cannot  find  symbol  IS_UNKNOWN_NAME  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_UNKNOWN_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_NAME);	  n.removeProp(Node.IS_UNKNOWN_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_NAME	7	None	replace
127	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()  + ") ");  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(getReplacementName(n.getString()  + ") ");  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()  + ") ");	  n.setString(getReplacementName(n.getString()));    timeout    	non-compiled	[CE]  	4	None	replace
128	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN);  [CE]  cannot  find  symbol  IS_UNKNOWN  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_UNKNOWN);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN);	  n.removeProp(Node.IS_SINGLE_ID_SEPARATOR);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN	14	None	replace
129	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROPERTY);  [CE]  cannot  find  symbol  IS_UNKNOWN_PROPERTY  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROPERTY);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_PROPERTY);	  n.removeProp(Node.IS_UNKNOWN_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_PROPERTY	7	None	replace
130	[BUG]  [BUGGY]  n.addChildToFront(newName,  t);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addChildToFront(newName,  t);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t);	  n.addChildToFront(newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
131	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getModule());  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addChildToFront(newName,  t.getModule());  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getModule());	  n.addChildToFront(newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
132	[BUG]  [BUGGY]  n.addChildToFront(newName,  t.getCompiler());  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addChildToFront(newName,  t.getCompiler());  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName,  t.getCompiler());	  n.addChildToFront(newName);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	15	None	replace
133	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	1	1	add
134	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.getProp(Node.IS_CONSTANT_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    n.getProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	1	1	add
135	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_PREFIX);  [CE]  cannot  find  symbol  IS_CONSTANT_PREFIX  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_PREFIX);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_PREFIX);	  timeout    	non-compiled	[CE]  cannot  find  symbol  IS_CONSTANT_PREFIX	1	None	add
136	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME;  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  n.removeProp(Node.IS_CONSTANT_NAME;  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);    n.removeProp(Node.IS_CONSTANT_NAME;	  timeout    	non-compiled	[CE]  ')'  expected	1	None	add
137	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	NodeUtil.copyNameAnnotations(n,  parent);	      timeout    	compilable	timeout	9	1	replace
138	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  timeout  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	NodeUtil.copyNameAnnotations(n,  parent);	      timeout    	compilable	timeout	9	1	replace
139	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  + "._   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	10	1	add
140	[BUG]  [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  + "._   "  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  + "._   "  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	10	1	add
141	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	10	1	add
142	[BUG]  [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  timeout  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.setString(newName  +   "_   "  +  getReplacementName(n.getString()));  n.setString(newName  +  getReplacementName(n.getString()));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName    +   "_   "    +    getReplacementName(n.getString()));    n.setString(newName  +  getReplacementName(n.getString()));	  timeout    	compilable	timeout	10	1	add
143	[BUG]  [BUGGY]  n.replaceChild(n,  newName,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.replaceChild(n,  newName,  idPrefix);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName,  idPrefix);	  n.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	6	None	replace
144	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName));  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName));	  n.addProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  ';'  expected	12	None	replace
145	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  n,  parent);  [CE]  cannot  find  symbol  compiler  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]      NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	        NodeTraversal.traverse(compiler,  n,  parent);	  timeout    	non-compiled	[CE]  cannot  find  symbol  compiler	8	None	add
146	[BUG]  [BUGGY]  n.removeProp(Node.IS_LIST_NAME);  [CE]  cannot  find  symbol  IS_LIST_NAME  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }    [BUGGY]  n.removeProp(Node.IS_LIST_NAME);  [BUGGY]    t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_LIST_NAME);	  n.removeProp(Node.IS_NAME_PROP);    	non-compiled	[CE]  cannot  find  symbol  IS_LIST_NAME	16	None	replace
