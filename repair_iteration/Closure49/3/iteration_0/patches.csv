bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.removeProp(Node.IS_CONSTANT_NAME);	n.setString(newName);  	compilable	timeout	5	1	replace
2	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  timeout  [FE]    AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);	n.setString(newName);  	compilable	timeout	5	1	replace
3	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.setString(getReplacementName(n.getString()));  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(getReplacementName(n.getString()));	n.setString(newName);  	compilable	timeout	5	1	replace
4	[BUG]  [BUGGY]  n.setString(getReplacementName(n.getString()));  timeout  [FE]      AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.setString(getReplacementName(n.getString()));  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(getReplacementName(n.getString()));	n.setString(newName);  	compilable	timeout	5	1	replace
5	[BUG]  [BUGGY]  n.setString(idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]        AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.setString(idPrefix);  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(idPrefix);	n.setString(newName);  	non-compiled	[CE]  cannot  find  symbol  idPrefix	5	None	replace
6	[BUG]  [BUGGY]  n.replaceChild(n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.replaceChild(n,  newName);  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.replaceChild(n,  newName);	n.setString(newName);  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
7	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP);  [CE]  cannot  find  symbol  IS_UNKNOWN_PROP  [FE]            AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP);  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_UNKNOWN_PROP);	n.setString(newName);  	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN_PROP	5	None	replace
8	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]    [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	  	n.setString(newName);  	compilable	timeout	5	1	replace
9	[BUG]  [BUGGY]    timeout  [FE]              AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]    [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	  	n.setString(newName);  	compilable	timeout	5	1	replace
10	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	add	n.setString(newName  + "_ "  +  getReplacementName(n.getString()));	n.setString(newName);  	compilable	timeout	5	1	replace
11	[BUG]  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  timeout  [FE]    AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.setString(newName  + "_ "  +  getReplacementName(n.getString()));  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.setString(newName  + "_ "  +  getReplacementName(n.getString()));	n.setString(newName);  	compilable	timeout	5	1	replace
12	[BUG]  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.addProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addProp(Node.IS_CONSTANT_NAME,  newName);	n.setString(newName);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
13	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME);  [CE]  cannot  find  symbol  IS_FUNCTION_NAME  [FE]        AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME);  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_FUNCTION_NAME);	n.setString(newName);  	non-compiled	[CE]  cannot  find  symbol  IS_FUNCTION_NAME	5	None	replace
14	[BUG]  [BUGGY]  n.removeProp(Node.IS_SINGLE_ID_SEPARATOR);  [CE]  cannot  find  symbol  IS_SINGLE_ID_SEPARATOR  [FE]    AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.removeProp(Node.IS_SINGLE_ID_SEPARATOR);  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_SINGLE_ID_SEPARATOR);	n.setString(newName);  	non-compiled	[CE]  cannot  find  symbol  IS_SINGLE_ID_SEPARATOR	5	None	replace
15	[BUG]  [BUGGY]  n.addChildToFront(newName);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.addChildToFront(newName);  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.addChildToFront(newName);	n.setString(newName);  	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
16	[BUG]  [BUGGY]  n.removeProp(Node.IS_NAME_PROP);  [CE]  cannot  find  symbol  IS_NAME_PROP  [FE]        AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.removeProp(Node.IS_NAME_PROP);  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_NAME_PROP);	n.setString(newName);  	non-compiled	[CE]  cannot  find  symbol  IS_NAME_PROP	5	None	replace
17	[BUG]  [BUGGY]  n.removeProp(Node.IS_SYNTHETIC_NAME);  [CE]  cannot  find  symbol  IS_SYNTHETIC_NAME  [FE]          AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  [BUGGY]  n.removeProp(Node.IS_SYNTHETIC_NAME);  [BUGGY]  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:    nameStack.pop();  break;  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	166	166	66	replace	n.removeProp(Node.IS_SYNTHETIC_NAME);	n.setString(newName);  	non-compiled	[CE]  cannot  find  symbol  IS_SYNTHETIC_NAME	5	None	replace
