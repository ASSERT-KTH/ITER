bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  renamer  =  n.getFirstChild();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  n.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  n.getFirstChild();	  Node    rootRenamer    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
2	[BUG]  [BUGGY]  Node  renamer  =  parent.getFirstChild();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  parent.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  parent.getFirstChild();	  Node    rootRenamer    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
3	[BUG]  [BUGGY]  Node  newName  =  n.getFirstChild();  [CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  newName  =  n.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  newName  =  n.getFirstChild();	  Node    rootRenamer    =    n.getFirstChild();    	non-compiled	[CE]  variable  newName  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	11	None	replace
4	[BUG]  [BUGGY]  Node  nameRenamer  =  n.getFirstChild();  [CE]  cannot  find  symbol  renamer  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  nameRenamer  =  n.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  nameRenamer  =  n.getFirstChild();	  Node    rootRenamer    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  renamer	11	None	replace
5	[BUG]  [BUGGY]  Node  renamer  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  n.getLastChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  n.getLastChild();	  Node    rootRenamer    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
6	[BUG]  [BUGGY]  Node  rootRenamer  =  parent.getFirstChild();  [CE]  cannot  find  symbol  renamer  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  rootRenamer  =  parent.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  rootRenamer  =  parent.getFirstChild();	  Node    rootRenamer    =    n.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  renamer	11	None	replace
7	[BUG]  [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  rootRenamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  rootRenamer);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.replaceChild(n,  rootRenamer);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	36	None	replace
8	[BUG]  [BUGGY]  Renamer  renamer  =  n.replaceChild(rootRenamer,  parent);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replaceChild(rootRenamer,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replaceChild(rootRenamer,  parent);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	36	None	replace
9	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.replaceChild(n,  parent);  [CE]  cannot  find  symbol  nameUsage  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.replaceChild(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.replaceChild(n,  parent);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	36	None	replace
10	[BUG]  [BUGGY]  Renamer  renamer  =  n.replaceChild(n,  parent);  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replaceChild(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replaceChild(n,  parent);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    parent);    	non-compiled	[CE]  incompatible  types	36	None	replace
11	[BUG]  [BUGGY]  Renamer  renamer  =  n.replaceChild(parent,  rootRenamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replaceChild(parent,  rootRenamer);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replaceChild(parent,  rootRenamer);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	36	None	replace
12	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.replaceChild(n,  parent,  newName);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.replaceChild(n,  parent,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.replaceChild(n,  parent,  newName);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
13	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.peek();  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.peek();  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.peek();  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
14	[BUG]  [BUGGY]  n  =  nameStack.peek();  renamer  =  nameStack.peek();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n  =  nameStack.peek();  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n  =  nameStack.peek();  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    =    nameStack.pop();    	non-compiled	[CE]  incompatible  types	27	None	replace
15	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	add	Renamer  renamer  =  nameStack.peek();  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    =    nameStack.pop();    	compilable	timeout	27	1	replace
16	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  =  nameStack.peek();  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    =    nameStack.pop();    	compilable	timeout	27	1	replace
17	[BUG]  [BUGGY]  Renamer  renamer  =  n.peek()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.peek()  +  1;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.peek()  +  1;	  Renamer    renamer    =    rootRenamer.peek()    +    1;    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
18	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.peek()  *  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.peek()  *  1;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.peek()  *  1;	  Renamer    renamer    =    rootRenamer.peek()    +    1;    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
19	[BUG]  [BUGGY]  Renamer  renamer  =  name.peek()  +  1;  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  name.peek()  +  1;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  name.peek()  +  1;	  Renamer    renamer    =    rootRenamer.peek()    +    1;    	non-compiled	[CE]  cannot  find  symbol  name	17	None	replace
20	[BUG]  [BUGGY]  Node  renamer  =  nameStack.peek();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Node    renamer    =    nameStack.pop();    	non-compiled	[CE]  incompatible  types	25	None	replace
21	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  Node  renamer  =  nameStack.peek();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  Node  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  Node  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Node    renamer    =    nameStack.pop();    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	25	None	replace
22	[BUG]  [BUGGY]  n  =  nameStack.peek();  Node  renamer  =  nameStack.peek();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n  =  nameStack.peek();  Node  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n  =  nameStack.peek();  Node  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Node    renamer    =    nameStack.pop();    	non-compiled	[CE]  incompatible  types	25	None	replace
23	[BUG]  [BUGGY]  Node  renamer  =  nameStack.pop();  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  nameStack.pop();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  nameStack.pop();	  Renamer    renamer    =    nameStack.pop();    Node    renamer    =    nameStack.pop();    	non-compiled	[CE]  incompatible  types	25	None	replace
24	[BUG]  [BUGGY]  Name  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Name  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Name  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Node    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
25	[BUG]  [BUGGY]  Renamer  renamer  =  n.replaceChild(newName,  parent);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replaceChild(newName,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replaceChild(newName,  parent);	  Renamer    renamer    =    newName.replaceChild(n,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	48	None	replace
26	[BUG]  [BUGGY]  Renamer  renamer  =  n.replaceChild(n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replaceChild(n,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replaceChild(n,  newName);	  Renamer    renamer    =    newName.replaceChild(n,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	48	None	replace
27	[BUG]  [BUGGY]  Renamer  renamer  =  node.replaceChild(n,  parent);  [CE]  cannot  find  symbol  node  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  node.replaceChild(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  node.replaceChild(n,  parent);	  Renamer    renamer    =    newName.replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  node	48	None	replace
28	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.peek()  +  1;  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.peek()  +  1;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.peek()  +  1;	  Renamer    renamer    =    newName.peek()    +    1;    	non-compiled	[CE]  cannot  find  symbol  nameUsage	19	None	replace
29	[BUG]  [BUGGY]  renamer  =  nameStack.peek();  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  renamer  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  renamer  =  nameStack.peek();  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	renamer  =  nameStack.peek();  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol  renamer	52	None	replace
30	[BUG]  [BUGGY]  Renamer  renamer  =  newName.peek();  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.peek();  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.peek();  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
31	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  =  renamer.peek();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  =  renamer.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  renamer  =  renamer.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
32	[BUG]  [BUGGY]  Renamer  renamer  =  newNameStack.peek();  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  newNameStack  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newNameStack.peek();  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newNameStack.peek();  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol  newNameStack	52	None	replace
33	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.findName(newName);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.findName(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.findName(newName);	  Renamer    renamer    =    nameUsage.findName(newName);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
34	[BUG]  [BUGGY]  Renamer  renamer  =  parent.findName(newName);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.findName(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.findName(newName);	  Renamer    renamer    =    nameUsage.findName(newName);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
35	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.findName(newName,  parent);  [CE]  cannot  find  symbol  nameUsage  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.findName(newName,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.findName(newName,  parent);	  Renamer    renamer    =    nameUsage.findName(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	37	None	replace
36	[BUG]  [BUGGY]  Renamer  renamer  =  newName.findName(nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.findName(nameUsage);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.findName(nameUsage);	  Renamer    renamer    =    nameUsage.findName(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	37	None	replace
37	[BUG]  [BUGGY]  Renamer  renamer  =  newNameUsage.findName(newName);  [CE]  cannot  find  symbol  newNameUsage  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newNameUsage.findName(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newNameUsage.findName(newName);	  Renamer    renamer    =    nameUsage.findName(newName);    	non-compiled	[CE]  cannot  find  symbol  newNameUsage	37	None	replace
38	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.findName(n);  [CE]  cannot  find  symbol  nameUsage  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.findName(n);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.findName(n);	  Renamer    renamer    =    nameUsage.findName(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	37	None	replace
39	[BUG]  [BUGGY]  Node  n  =  nameStack.peek();  Renamer  renamer  =  n.peek();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  nameStack.peek();  Renamer  renamer  =  n.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  nameStack.peek();  Renamer  renamer  =  n.peek();	  Renamer    renamer    =    nameStack.pop();    Renamer    renamer    =    nameStack.push();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	23	None	replace
40	[BUG]  [BUGGY]  Node  n  =  nameStack.peek();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Renamer    renamer    =    nameStack.push();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	23	None	replace
41	[BUG]  [BUGGY]  n  =  nameStack.peek();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Renamer    renamer    =    nameStack.push();    	non-compiled	[CE]  incompatible  types	23	None	replace
42	[BUG]  [BUGGY]  ContextualRenamer  renamer  =  nameStack.peek();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    ContextualRenamer    renamer    =    nameStack.peek();    	non-compiled	[CE]  incompatible  types	24	None	replace
43	[BUG]  [BUGGY]  ContextualRenamer  renamer  =  nameStack.pop();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  renamer  =  nameStack.pop();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  renamer  =  nameStack.pop();	  Renamer    renamer    =    nameStack.pop();    ContextualRenamer    renamer    =    nameStack.peek();    	non-compiled	[CE]  incompatible  types	24	None	replace
44	[BUG]  [BUGGY]  MutableRenamer  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  MutableRenamer  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	MutableRenamer  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    ContextualRenamer    renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
45	[BUG]  [BUGGY]  ContextualRenamer  renamer  =  rootRenamer.peek();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  renamer  =  rootRenamer.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  renamer  =  rootRenamer.peek();	  Renamer    renamer    =    nameStack.pop();    ContextualRenamer    renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
46	[BUG]  [BUGGY]  Renamer  renamer  =  NameStack.peek();  [CE]  cannot  find  symbol  NameStack  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  NameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  NameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol  NameStack	53	None	replace
47	[BUG]  [BUGGY]  Node  n  =  n.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  n.getParent();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  n.getParent();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	12	None	replace
48	[BUG]  [BUGGY]  Node  n  =  parent.getNext();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  parent.getNext();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  parent.getNext();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	12	None	replace
49	[BUG]  [BUGGY]  Node  n  =  t.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  t.getParent();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  t.getParent();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	12	None	replace
50	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  n.getNext();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  n.getNext();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	12	None	replace
51	[BUG]  [BUGGY]  Node  n  =  t.getCompiler().getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  t.getCompiler().getParent();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  t.getCompiler().getParent();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	12	None	replace
52	[BUG]  [BUGGY]  Renamer  renamer  =  node.nameUsage.peek();  [CE]  package  node  does  not  exist  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  node.nameUsage.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  node.nameUsage.peek();	  Renamer    renamer    =    this.nameUsage.peek();    	non-compiled	[CE]  package  node  does  not  exist	6	None	replace
53	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.peek();  ContextualRenamer  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.peek();  ContextualRenamer  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.peek();  ContextualRenamer  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    ContextualRenamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
54	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  ContextualRenamer  renamer  =  nameStack.peek();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  ContextualRenamer  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  ContextualRenamer  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    ContextualRenamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	22	None	replace
55	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.peek();  ContextualRenamer  renamer  =  nameStack.pop();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.peek();  ContextualRenamer  renamer  =  nameStack.pop();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.peek();  ContextualRenamer  renamer  =  nameStack.pop();	  Renamer    renamer    =    nameStack.pop();    ContextualRenamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
56	[BUG]  [BUGGY]  n  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Renamer    renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
57	[BUG]  [BUGGY]  Node  renamer  =  name.getFirstChild();  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  name.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  name.getFirstChild();	  Node    renamer    =    newName.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  name	49	None	replace
58	[BUG]  [BUGGY]  Node  renamer  =  node.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  node.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  node.getFirstChild();	  Node    renamer    =    newName.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	49	None	replace
59	[BUG]  [BUGGY]  Node  renamer  =  nameUsage.getFirstChild();  [CE]  cannot  find  symbol  nameUsage  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  nameUsage.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  nameUsage.getFirstChild();	  Node    renamer    =    newName.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	49	None	replace
60	[BUG]  [BUGGY]  Node  renamer  =  t.getFirstChild();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  t.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  t.getFirstChild();	  Node    renamer    =    newName.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
61	[BUG]  [BUGGY]  Renamer  renamer  =  node.peek()  +  1;  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  node.peek()  +  1;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  node.peek()  +  1;	  Renamer    renamer    =    parent.peek()    +    1;    	non-compiled	[CE]  cannot  find  symbol  node	18	None	replace
62	[BUG]  [BUGGY]  Renamer  renamer  =  newName.remove(rootRenamer);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.remove(rootRenamer);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.remove(rootRenamer);	  Renamer    renamer    =    rootRenamer.remove(newName);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
63	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.remove(newName);  [CE]  cannot  find  symbol  nameUsage  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.remove(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.remove(newName);	  Renamer    renamer    =    rootRenamer.remove(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	50	None	replace
64	[BUG]  [BUGGY]  Renamer  renamer  =  name.remove(newName);  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  name.remove(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  name.remove(newName);	  Renamer    renamer    =    rootRenamer.remove(newName);    	non-compiled	[CE]  cannot  find  symbol  name	50	None	replace
65	[BUG]  [BUGGY]  Renamer  renamer  =  nameMap.remove(newName);  [CE]  cannot  find  symbol  nameMap  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameMap.remove(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameMap.remove(newName);	  Renamer    renamer    =    rootRenamer.remove(newName);    	non-compiled	[CE]  cannot  find  symbol  nameMap	50	None	replace
66	[BUG]  [BUGGY]  Renamer  renamer  =  parent.remove(newName);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.remove(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.remove(newName);	  Renamer    renamer    =    rootRenamer.remove(newName);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
67	[BUG]  [BUGGY]  Renamer  renamer  =  n.replaceChild(parent,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replaceChild(parent,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replaceChild(parent,  newName);	  Renamer    renamer    =    parent.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	42	None	replace
68	[BUG]  [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  newName,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  newName,  nameUsage);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.replaceChild(n,  newName,  nameUsage);	  Renamer    renamer    =    parent.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	42	None	replace
69	[BUG]  [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  newName,  rootRenamer);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  newName,  rootRenamer);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.replaceChild(n,  newName,  rootRenamer);	  Renamer    renamer    =    parent.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	42	None	replace
70	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.replaceChild(n,  newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.replaceChild(n,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.replaceChild(n,  newName);	  Renamer    renamer    =    parent.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	42	None	replace
71	[BUG]  [BUGGY]  Renamer  renamer  =  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.removeProp(Node.IS_CONSTANT_NAME);	  Renamer    renamer    =    rootRenamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  incompatible  types	51	None	replace
72	[BUG]  [BUGGY]  Renamer  renamer  =  parent.removeProp(Node.IS_CONSTANT_NAME);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.removeProp(Node.IS_CONSTANT_NAME);	  Renamer    renamer    =    rootRenamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  incompatible  types	51	None	replace
73	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.removeProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.removeProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.removeProp(Node.IS_CONSTANT_NAME,  newName);	  Renamer    renamer    =    rootRenamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
74	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.removeProp(Node.IS_CONSTANT_NAME);	  Renamer    renamer    =    rootRenamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	51	None	replace
75	[BUG]  [BUGGY]  Renamer  renamer  =  newName.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.removeProp(Node.IS_CONSTANT_NAME);	  Renamer    renamer    =    rootRenamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
76	[BUG]  [BUGGY]  Renamer  renamer  =  name.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  name.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  name.removeProp(Node.IS_CONSTANT_NAME);	  Renamer    renamer    =    rootRenamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  name	51	None	replace
77	[BUG]  [BUGGY]  Renamer  renamer  =  newName.replace(n,  rootRenamer);  [CE]  no  suitable  method  found  for  replace(Node,Renamer)  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.replace(n,  rootRenamer);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.replace(n,  rootRenamer);	  Renamer    renamer    =    rootRenamer.replace(n,    newName);    	non-compiled	[CE]  no  suitable  method  found  for  replace(Node,Renamer)	39	None	replace
78	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.replace(n,  newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.replace(n,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.replace(n,  newName);	  Renamer    renamer    =    rootRenamer.replace(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	39	None	replace
79	[BUG]  [BUGGY]  Renamer  renamer  =  n.replace(n,  rootRenamer);  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replace(n,  rootRenamer);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replace(n,  rootRenamer);	  Renamer    renamer    =    rootRenamer.replace(n,    newName);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
80	[BUG]  [BUGGY]  Renamer  renamer  =  n.replace(rootRenamer,  newName);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replace(rootRenamer,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replace(rootRenamer,  newName);	  Renamer    renamer    =    rootRenamer.replace(n,    newName);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
81	[BUG]  [BUGGY]  Renamer  renamer  =  name.replace(n,  newName);  [CE]  cannot  find  symbol  name  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  name.replace(n,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  name.replace(n,  newName);	  Renamer    renamer    =    rootRenamer.replace(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	39	None	replace
82	[BUG]  [BUGGY]  Renamer  renamer  =  n.replace(n,  newName);  [CE]  cannot  find  symbol  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replace(n,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replace(n,  newName);	  Renamer    renamer    =    rootRenamer.replace(n,    newName);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
83	[BUG]  [BUGGY]  Renamer  renamer  =  n.replaceChild(rootRenamer,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replaceChild(rootRenamer,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replaceChild(rootRenamer,  newName);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	replace
84	[BUG]  [BUGGY]  Renamer  renamer  =  newName.replaceChild(n,  rootRenamer);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.replaceChild(n,  rootRenamer);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.replaceChild(n,  rootRenamer);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
85	[BUG]  [BUGGY]  Renamer  renamer  =  name.replaceChild(n,  newName);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  name.replaceChild(n,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  name.replaceChild(n,  newName);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	5	None	replace
86	[BUG]  [BUGGY]  Renamer  renamer  =  name.replaceChild(n,  rootRenamer);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  name.replaceChild(n,  rootRenamer);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  name.replaceChild(n,  rootRenamer);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	5	None	replace
87	[BUG]  [BUGGY]  n.removeProp(Node.IS_NAME,  newName);  [CE]  cannot  find  symbol  IS_NAME  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n.removeProp(Node.IS_NAME,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n.removeProp(Node.IS_NAME,  newName);	  n.removeProp(Node.IS_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_NAME	13	None	replace
88	[BUG]  [BUGGY]  n.removeProp(Node.IS_PROP);  [CE]  cannot  find  symbol  IS_PROP  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n.removeProp(Node.IS_PROP);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n.removeProp(Node.IS_PROP);	  n.removeProp(Node.IS_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_PROP	13	None	replace
89	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN);  [CE]  cannot  find  symbol  IS_UNKNOWN  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n.removeProp(Node.IS_UNKNOWN);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n.removeProp(Node.IS_UNKNOWN);	  n.removeProp(Node.IS_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_UNKNOWN	13	None	replace
90	[BUG]  [BUGGY]  Node  renamer  =  n.getParent();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  n.getParent();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  n.getParent();	  Node    renamer    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
91	[BUG]  [BUGGY]  Node  renamer  =  n.getNext();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  n.getNext();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  n.getNext();	  Node    renamer    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
92	[BUG]  [BUGGY]  Node  renamer  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  parent.getNext();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  parent.getNext();	  Node    renamer    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
93	[BUG]  [BUGGY]  Node  renamer  =  newName.getParent();  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  newName.getParent();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  newName.getParent();	  Node    renamer    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
94	[BUG]  [BUGGY]  Node  renamer  =  t.getParent();  [CE]  cannot  find  symbol  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  t.getParent();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  t.getParent();	  Node    renamer    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
95	[BUG]  [BUGGY]  Node  renamer  =  node.getParent();  [CE]  cannot  find  symbol  node  [FE]                                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  node.getParent();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  node.getParent();	  Node    renamer    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol  node	15	None	replace
96	[BUG]  [BUGGY]  renamer  =  n.peek();  [CE]  cannot  find  symbol  renamer  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  renamer  =  n.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	renamer  =  n.peek();	  renamer    =    rootRenamer.peek();    	non-compiled	[CE]  cannot  find  symbol  renamer	7	None	replace
97	[BUG]  [BUGGY]  Renamer  renamer  =  parent.replace(n,  rootRenamer);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.replace(n,  rootRenamer);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.replace(n,  rootRenamer);	  Renamer    renamer    =    rootRenamer.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
98	[BUG]  [BUGGY]  Renamer  renamer  =  n.replace(n,  parent);  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replace(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replace(n,  parent);	  Renamer    renamer    =    rootRenamer.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
99	[BUG]  [BUGGY]  Renamer  renamer  =  n.replace(rootRenamer,  parent);  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replace(rootRenamer,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replace(rootRenamer,  parent);	  Renamer    renamer    =    rootRenamer.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
100	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.replace(n,  parent);  [CE]  cannot  find  symbol  nameUsage  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.replace(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.replace(n,  parent);	  Renamer    renamer    =    rootRenamer.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	38	None	replace
101	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.replace(n,  parent,  newName);  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.replace(n,  parent,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.replace(n,  parent,  newName);	  Renamer    renamer    =    rootRenamer.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
102	[BUG]  [BUGGY]  n  =  nameStack.peek();  Renamer  renamer  =  nameStack.peek();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n  =  nameStack.peek();  Renamer  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n  =  nameStack.peek();  Renamer  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Renamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  incompatible  types	20	None	replace
103	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.push(newName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.push(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.push(newName);	  Renamer    renamer    =    nameUsage.push(newName);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
104	[BUG]  [BUGGY]  Renamer  renamer  =  newName.push(nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.push(nameUsage);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.push(nameUsage);	  Renamer    renamer    =    nameUsage.push(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	41	None	replace
105	[BUG]  [BUGGY]  Renamer  renamer  =  parent.push(newName);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.push(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.push(newName);	  Renamer    renamer    =    nameUsage.push(newName);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
106	[BUG]  [BUGGY]  Renamer  renamer  =  newNameUsage.push(newName);  [CE]  cannot  find  symbol  newNameUsage  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newNameUsage.push(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newNameUsage.push(newName);	  Renamer    renamer    =    nameUsage.push(newName);    	non-compiled	[CE]  cannot  find  symbol  newNameUsage	41	None	replace
107	[BUG]  [BUGGY]  Renamer  renamer  =  newNameUsage.push(nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newNameUsage.push(nameUsage);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newNameUsage.push(nameUsage);	  Renamer    renamer    =    nameUsage.push(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	41	None	replace
108	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.push(n);  [CE]  cannot  find  symbol  nameUsage  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.push(n);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.push(n);	  Renamer    renamer    =    nameUsage.push(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	41	None	replace
109	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  n.getFirstChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	10	None	replace
110	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  parent.getLastChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  parent.getLastChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	10	None	replace
111	[BUG]  [BUGGY]  Node  n  =  t.getCompiler().getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  t.getCompiler().getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  t.getCompiler().getFirstChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	10	None	replace
112	[BUG]  [BUGGY]  Node  n  =  newName.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  newName.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  newName.getFirstChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	10	None	replace
113	[BUG]  [BUGGY]  Node  n  =  t.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  t.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  t.getFirstChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	10	None	replace
114	[BUG]  [BUGGY]  Node  n  =  nameUsage.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  nameUsage.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  nameUsage.getFirstChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	10	None	replace
115	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  no  suitable  method  found  for  removeProp(int,String)  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  no  suitable  method  found  for  removeProp(int,String)	9	None	replace
116	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  renamer  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	renamer.removeProp(Node.IS_CONSTANT_NAME);	  n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  renamer	9	None	replace
117	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [CE]  cannot  find  symbol  renamer  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n.removeProp(Node.IS_CONSTANT_NAME  +  1);	  n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  renamer	9	None	replace
118	[BUG]  [BUGGY]  Renamer  renamer  =  newName.pop();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.pop();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.pop();	  Renamer    renamer    =    nameUsage.pop();    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
119	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  n.getCompiler();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  rootRenamer  =  n.getCompiler();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  rootRenamer  =  n.getCompiler();	  ContextualRenamer    rootRenamer    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
120	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  t.getConstructor();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  rootRenamer  =  t.getConstructor();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  rootRenamer  =  t.getConstructor();	  ContextualRenamer    rootRenamer    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
121	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  t.getRootContextualRenamer();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  rootRenamer  =  t.getRootContextualRenamer();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  rootRenamer  =  t.getRootContextualRenamer();	  ContextualRenamer    rootRenamer    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
122	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  t.getRootNode();  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  rootRenamer  =  t.getRootNode();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  rootRenamer  =  t.getRootNode();	  ContextualRenamer    rootRenamer    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
123	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  t.getRootCompiler();  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  rootRenamer  =  t.getRootCompiler();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  rootRenamer  =  t.getRootCompiler();	  ContextualRenamer    rootRenamer    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
124	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  t.getCompilerInstance();  [CE]  cannot  find  symbol  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  rootRenamer  =  t.getCompilerInstance();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  rootRenamer  =  t.getCompilerInstance();	  ContextualRenamer    rootRenamer    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
125	[BUG]  [BUGGY]  Renamer  renamer  =  rootName.peek();  [CE]  cannot  find  symbol  rootName  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootName.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootName.peek();	  Renamer    renamer    =    nameRenamer.peek();    	non-compiled	[CE]  cannot  find  symbol  rootName	29	None	replace
126	[BUG]  [BUGGY]  Renamer  renamer  =  newName.parse(rootRenamer);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.parse(rootRenamer);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.parse(rootRenamer);	  Renamer    renamer    =    rootRenamer.parse(newName);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
127	[BUG]  [BUGGY]  Renamer  renamer  =  name.parse(newName);  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  name.parse(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  name.parse(newName);	  Renamer    renamer    =    rootRenamer.parse(newName);    	non-compiled	[CE]  cannot  find  symbol  name	4	None	replace
128	[BUG]  [BUGGY]  Renamer  renamer  =  nameMap.parse(newName);  [CE]  cannot  find  symbol  nameMap  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameMap.parse(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameMap.parse(newName);	  Renamer    renamer    =    rootRenamer.parse(newName);    	non-compiled	[CE]  cannot  find  symbol  nameMap	4	None	replace
129	[BUG]  [BUGGY]  Renamer  renamer  =  parent.parse(newName);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.parse(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.parse(newName);	  Renamer    renamer    =    rootRenamer.parse(newName);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
130	[BUG]  [BUGGY]  Renamer  renamer  =  nameToken.parse(newName);  [CE]  cannot  find  symbol  nameToken  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameToken.parse(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameToken.parse(newName);	  Renamer    renamer    =    rootRenamer.parse(newName);    	non-compiled	[CE]  cannot  find  symbol  nameToken	4	None	replace
131	[BUG]  [BUGGY]  Renamer  renamer  =  parent.replace(n,  newName);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.replace(n,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.replace(n,  newName);	  Renamer    renamer    =    newName.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
132	[BUG]  [BUGGY]  Renamer  renamer  =  n.replace(newName,  parent);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replace(newName,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replace(newName,  parent);	  Renamer    renamer    =    newName.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
133	[BUG]  [BUGGY]  Renamer  renamer  =  newName.replace(n,  n);  [CE]  no  suitable  method  found  for  replace(Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.replace(n,  n);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.replace(n,  n);	  Renamer    renamer    =    newName.replace(n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  replace(Node,Node)	35	None	replace
134	[BUG]  [BUGGY]  Renamer  renamer  =  newName.replace(n,  parent,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.replace(n,  parent,  nameUsage);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.replace(n,  parent,  nameUsage);	  Renamer    renamer    =    newName.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	35	None	replace
135	[BUG]  [BUGGY]  Renamer  renamer  =  newName.parse(nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.parse(nameUsage);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.parse(nameUsage);	  Renamer    renamer    =    nameUsage.parse(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	43	None	replace
136	[BUG]  [BUGGY]  Renamer  renamer  =  newNameUsage.parse(nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newNameUsage.parse(nameUsage);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newNameUsage.parse(nameUsage);	  Renamer    renamer    =    nameUsage.parse(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	43	None	replace
137	[BUG]  [BUGGY]  Renamer  renamer  =  newNameUsage.parse(newName);  [CE]  cannot  find  symbol  newNameUsage  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newNameUsage.parse(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newNameUsage.parse(newName);	  Renamer    renamer    =    nameUsage.parse(newName);    	non-compiled	[CE]  cannot  find  symbol  newNameUsage	43	None	replace
138	[BUG]  [BUGGY]  Renamer  renamer  =  node.parse(newName);  [CE]  cannot  find  symbol  node  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  node.parse(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  node.parse(newName);	  Renamer    renamer    =    nameUsage.parse(newName);    	non-compiled	[CE]  cannot  find  symbol  node	43	None	replace
139	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek()  /  1;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek()  /  1;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek()  /  1;	  Renamer    renamer    =    nameStack.peek()    *    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	44	None	replace
140	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek()  *  2;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek()  *  2;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek()  *  2;	  Renamer    renamer    =    nameStack.peek()    *    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	44	None	replace
141	[BUG]  [BUGGY]  Renamer  renamer  =  newNameStack.peek()  *  1;  [CE]  cannot  find  symbol  newNameStack  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newNameStack.peek()  *  1;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newNameStack.peek()  *  1;	  Renamer    renamer    =    nameStack.peek()    *    1;    	non-compiled	[CE]  cannot  find  symbol  newNameStack	44	None	replace
142	[BUG]  [BUGGY]  Renamer  renamer  =  referenceStack.peek()  *  1;  [CE]  cannot  find  symbol  referenceStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  referenceStack.peek()  *  1;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  referenceStack.peek()  *  1;	  Renamer    renamer    =    nameStack.peek()    *    1;    	non-compiled	[CE]  cannot  find  symbol  referenceStack	44	None	replace
143	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek()  *  4;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek()  *  4;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek()  *  4;	  Renamer    renamer    =    nameStack.peek()    *    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	44	None	replace
144	[BUG]  [BUGGY]  Renamer  renamer  =  n.removeFirstChild();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.removeFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.removeFirstChild();	  Renamer    renamer    =    newName.removeFirstChild();    	non-compiled	[CE]  incompatible  types	47	None	replace
145	[BUG]  [BUGGY]  Renamer  renamer  =  parent.removeFirstChild();  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.removeFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.removeFirstChild();	  Renamer    renamer    =    newName.removeFirstChild();    	non-compiled	[CE]  incompatible  types	47	None	replace
146	[BUG]  [BUGGY]  Renamer  renamer  =  name.removeFirstChild();  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  name.removeFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  name.removeFirstChild();	  Renamer    renamer    =    newName.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  name	47	None	replace
147	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.removeFirstChild();  [CE]  cannot  find  symbol  nameUsage  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.removeFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.removeFirstChild();	  Renamer    renamer    =    newName.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	47	None	replace
148	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.removeFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.removeFirstChild();	  Renamer    renamer    =    newName.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
149	[BUG]  [BUGGY]  Renamer  renamer  =  getReferenceName(n.getString(),  newName);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  getReferenceName(n.getString(),  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  getReferenceName(n.getString(),  newName);	  Renamer    renamer    =    getReferenceName(n.getString());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
150	[BUG]  [BUGGY]  Renamer  renamer  =  getReferenceName(n,  parent.getString());  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  getReferenceName(n,  parent.getString());  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  getReferenceName(n,  parent.getString());	  Renamer    renamer    =    getReferenceName(n.getString());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
151	[BUG]  [BUGGY]  Renamer  renamer  =  getReferenceName(newName.getString());  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  getReferenceName(newName.getString());  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  getReferenceName(newName.getString());	  Renamer    renamer    =    getReferenceName(n.getString());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
152	[BUG]  [BUGGY]  Renamer  renamer  =  getReferenceName(n.getString(),  parent);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  getReferenceName(n.getString(),  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  getReferenceName(n.getString(),  parent);	  Renamer    renamer    =    getReferenceName(n.getString());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
153	[BUG]  [BUGGY]  Renamer  renamer  =  getReferenceName(parent.getString());  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  getReferenceName(parent.getString());  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  getReferenceName(parent.getString());	  Renamer    renamer    =    getReferenceName(n.getString());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
154	[BUG]  [BUGGY]  Renamer  renamer  =  getReferenceName(n,  nameStack.getString());  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  getReferenceName(n,  nameStack.getString());  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  getReferenceName(n,  nameStack.getString());	  Renamer    renamer    =    getReferenceName(n.getString());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
155	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.newInstance();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.newInstance();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.newInstance();	  Renamer    renamer    =    rootRenamer.pop();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
156	[BUG]  [BUGGY]  renamer  =  nameUsage.peek();  [CE]  cannot  find  symbol  renamer  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  renamer  =  nameUsage.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	renamer  =  nameUsage.peek();	  renamer    =    newName.peek();    	non-compiled	[CE]  cannot  find  symbol  renamer	8	None	replace
157	[BUG]  [BUGGY]  ContextualRenamer  renamer  =  t.getCompiler();  [CE]  incompatible  types  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  renamer  =  t.getCompiler();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  renamer  =  t.getCompiler();	  ContextualRenamer    rootRenamer    =    t.getCompiler();    	non-compiled	[CE]  incompatible  types	14	None	replace
158	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  t.getRawRenamer();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  rootRenamer  =  t.getRawRenamer();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  rootRenamer  =  t.getRawRenamer();	  ContextualRenamer    rootRenamer    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
159	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  t.getReferenceName();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  rootRenamer  =  t.getReferenceName();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  rootRenamer  =  t.getReferenceName();	  ContextualRenamer    rootRenamer    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
160	[BUG]  [BUGGY]  Renamer  renamer  =  getReferenceName(n.getString(),  name);  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  getReferenceName(n.getString(),  name);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  getReferenceName(n.getString(),  name);	  Renamer    renamer    =    getReferenceName(n.getString());    	non-compiled	[CE]  cannot  find  symbol  name	34	None	replace
161	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.replaceProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.replaceProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.replaceProp(Node.IS_CONSTANT_NAME,  newName);	  Renamer    renamer    =    rootRenamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
162	[BUG]  [BUGGY]  Node  n  =  nameStack.peek();  ContextualRenamer  renamer  =  nameStack.peek();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  nameStack.peek();  ContextualRenamer  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  nameStack.peek();  ContextualRenamer  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    ContextualRenamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	22	None	replace
163	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  name);  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  name);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  name);	  n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  name	9	None	replace
164	[BUG]  [BUGGY]  Renamer  renamer  =  nameMap.replaceChild(n,  newName);  [CE]  cannot  find  symbol  nameMap  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameMap.replaceChild(n,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameMap.replaceChild(n,  newName);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameMap	5	None	replace
165	[BUG]  [BUGGY]  Renamer  renamer  =  nameRenamer.replaceChild(n,  newName);  [CE]  cannot  find  symbol  nameRenamer  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameRenamer.replaceChild(n,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameRenamer.replaceChild(n,  newName);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameRenamer	5	None	replace
166	[BUG]  [BUGGY]  Renamer  renamer  =  referenceStack.push(newName);  [CE]  cannot  find  symbol  referenceStack  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  referenceStack.push(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  referenceStack.push(newName);	  Renamer    renamer    =    nameUsage.push(newName);    	non-compiled	[CE]  cannot  find  symbol  referenceStack	41	None	replace
167	[BUG]  [BUGGY]  Renamer  renamer  =  referencesStack.peek();  [CE]  cannot  find  symbol  referencesStack  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  referencesStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  referencesStack.peek();	  Renamer    renamer    =    namesStack.peek();    	non-compiled	[CE]  cannot  find  symbol  referencesStack	31	None	replace
168	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  renamer  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
169	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  =  newNameStack.peek();  [CE]  cannot  find  symbol  newNameStack  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  =  newNameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  renamer  =  newNameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol  newNameStack	52	None	replace
170	[BUG]  [BUGGY]  Node  n  =  nameStack.peek();  Renamer  renamer  =  nameStack.peek();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  nameStack.peek();  Renamer  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  nameStack.peek();  Renamer  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    =    nameStack.pop();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	27	None	replace
171	[BUG]  [BUGGY]  Renamer  renamer  =  firstChild.removeFirstChild();  [CE]  cannot  find  symbol  firstChild  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  firstChild.removeFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  firstChild.removeFirstChild();	  Renamer    renamer    =    newName.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol  firstChild	47	None	replace
172	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.removeFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.removeFirstChild();	  Renamer    renamer    =    newName.removeFirstChild();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
173	[BUG]  [BUGGY]  Node  n  =  name.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  name.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  name.getFirstChild();	  Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	10	None	replace
174	[BUG]  [BUGGY]  n.removeProp(Node.IS_NEW_NAME);  [CE]  cannot  find  symbol  IS_NEW_NAME  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n.removeProp(Node.IS_NEW_NAME);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n.removeProp(Node.IS_NEW_NAME);	  n.removeProp(Node.IS_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_NEW_NAME	13	None	replace
175	[BUG]  [BUGGY]  Renamer  renamer  =  nameRenamer.replaceChild(n,  parent);  [CE]  cannot  find  symbol  nameRenamer  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameRenamer.replaceChild(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameRenamer.replaceChild(n,  parent);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  nameRenamer	36	None	replace
176	[BUG]  [BUGGY]  Renamer  renamer  =  compiler.replaceChild(n,  parent);  [CE]  cannot  find  symbol  compiler  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  compiler.replaceChild(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  compiler.replaceChild(n,  parent);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  compiler	36	None	replace
177	[BUG]  [BUGGY]  Node  renamer  =  n,  parent.getParent();  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  n,  parent.getParent();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  n,  parent.getParent();	  Node    renamer    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	15	None	replace
178	[BUG]  [BUGGY]  Node  renamer  =  rootRenamer.getParent();  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  rootRenamer.getParent();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  rootRenamer.getParent();	  Node    renamer    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
179	[BUG]  [BUGGY]  Renamer  renamer  =  nameRenamer.replace(n,  parent);  [CE]  cannot  find  symbol  nameRenamer  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameRenamer.replace(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameRenamer.replace(n,  parent);	  Renamer    renamer    =    rootRenamer.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  nameRenamer	38	None	replace
180	[BUG]  [BUGGY]  Renamer  renamer  =  name.replace(n,  parent);  [CE]  cannot  find  symbol  name  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  name.replace(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  name.replace(n,  parent);	  Renamer    renamer    =    rootRenamer.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  name	38	None	replace
181	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.parse(newName);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.parse(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.parse(newName);	  Renamer    renamer    =    rootRenamer.parse(newName);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
182	[BUG]  [BUGGY]  Renamer  renamer  =  compiler.parse(newName);  [CE]  cannot  find  symbol  compiler  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  compiler.parse(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  compiler.parse(newName);	  Renamer    renamer    =    rootRenamer.parse(newName);    	non-compiled	[CE]  cannot  find  symbol  compiler	4	None	replace
183	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.renamedNames.peek();  [CE]  cannot  find  symbol  renamedNames  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.renamedNames.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.renamedNames.peek();	  Renamer    renamer    =    rootRenamer.pop();    	non-compiled	[CE]  cannot  find  symbol  renamedNames	32	None	replace
184	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.rootRenamer.peek();  [CE]  cannot  find  symbol  rootRenamer  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.rootRenamer.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.rootRenamer.peek();	  Renamer    renamer    =    rootRenamer.pop();    	non-compiled	[CE]  cannot  find  symbol  rootRenamer	32	None	replace
185	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.rootRenamer.pop();  [CE]  cannot  find  symbol  rootRenamer  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.rootRenamer.pop();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.rootRenamer.pop();	  Renamer    renamer    =    rootRenamer.pop();    	non-compiled	[CE]  cannot  find  symbol  rootRenamer	32	None	replace
186	[BUG]  [BUGGY]  Renamer  renamer  =  nameRenamer.peek()  +  1;  [CE]  cannot  find  symbol  nameRenamer  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameRenamer.peek()  +  1;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameRenamer.peek()  +  1;	  Renamer    renamer    =    rootRenamer.peek()    +    1;    	non-compiled	[CE]  cannot  find  symbol  nameRenamer	17	None	replace
187	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek()  *  3;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek()  *  3;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek()  *  3;	  Renamer    renamer    =    nameStack.peek()    *    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	44	None	replace
188	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  null  renamer  =  nameStack.peek();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  null  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  null  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.peek();    	non-compiled	[CE]  not  a  statement	53	None	replace
189	[BUG]  [BUGGY]  Renamer  renamer  =  referenceStack.parse(newName);  [CE]  cannot  find  symbol  referenceStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  referenceStack.parse(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  referenceStack.parse(newName);	  Renamer    renamer    =    nameUsage.parse(newName);    	non-compiled	[CE]  cannot  find  symbol  referenceStack	43	None	replace
190	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.parse(newName,  parent);  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.parse(newName,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.parse(newName,  parent);	  Renamer    renamer    =    nameUsage.parse(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	43	None	replace
191	[BUG]  [BUGGY]  Node  renamer  =  rootRenamer.getFirstChild();  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  rootRenamer.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  rootRenamer.getFirstChild();	  Node    renamer    =    newName.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
192	[BUG]  [BUGGY]  Node  renamer  =  nameStack.getFirstChild();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  nameStack.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  nameStack.getFirstChild();	  Node    renamer    =    newName.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
193	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.findName(newName,  global);  [CE]  cannot  find  symbol  global  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.findName(newName,  global);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.findName(newName,  global);	  Renamer    renamer    =    nameUsage.findName(newName);    	non-compiled	[CE]  cannot  find  symbol  global	37	None	replace
194	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.findName(newName,  rootRenamer);  [CE]  cannot  find  symbol  nameUsage  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.findName(newName,  rootRenamer);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.findName(newName,  rootRenamer);	  Renamer    renamer    =    nameUsage.findName(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	37	None	replace
195	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.findName(newName,  null);  [CE]  cannot  find  symbol  nameUsage  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.findName(newName,  null);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.findName(newName,  null);	  Renamer    renamer    =    nameUsage.findName(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	37	None	replace
196	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.findName(n,  newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.findName(n,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.findName(n,  newName);	  Renamer    renamer    =    nameUsage.findName(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	37	None	replace
197	[BUG]  [BUGGY]  Renamer  renamer  =  nameRenamer.remove(newName);  [CE]  cannot  find  symbol  nameRenamer  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameRenamer.remove(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameRenamer.remove(newName);	  Renamer    renamer    =    rootRenamer.remove(newName);    	non-compiled	[CE]  cannot  find  symbol  nameRenamer	50	None	replace
198	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.remove(newName);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.remove(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.remove(newName);	  Renamer    renamer    =    rootRenamer.remove(newName);    	non-compiled	[CE]  incompatible  types	50	None	replace
199	[BUG]  [BUGGY]  ContextualRenamer  n  =  nameStack.peek();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  n  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  n  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Node    renamer    =    nameStack.peek();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	26	None	replace
200	[BUG]  [BUGGY]  renamer  =  rootRenamer.replace(n,  parent);  [CE]  cannot  find  symbol  renamer  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  renamer  =  rootRenamer.replace(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	renamer  =  rootRenamer.replace(n,  parent);	  Renamer    renamer    =    newName.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  renamer	35	None	replace
201	[BUG]  [BUGGY]  Renamer  renamer  =  node.replace(n,  parent);  [CE]  cannot  find  symbol  node  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  node.replace(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  node.replace(n,  parent);	  Renamer    renamer    =    newName.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  node	35	None	replace
202	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.peek();  Node  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  rootRenamer.peek();  Node  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.peek();  Node  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Node    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
203	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  Node  n  =  nameStack.peek();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  Node  n  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  Node  n  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Node    renamer    =    nameStack.pop();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	25	None	replace
204	[BUG]  [BUGGY]  Renamer  renamer  =  nameRenamer.replace(n,  newName);  [CE]  cannot  find  symbol  nameRenamer  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameRenamer.replace(n,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameRenamer.replace(n,  newName);	  Renamer    renamer    =    rootRenamer.replace(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  nameRenamer	39	None	replace
205	[BUG]  [BUGGY]  Renamer  renamer  =  this.nameRenamer.peek();  [CE]  cannot  find  symbol  nameRenamer  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  this.nameRenamer.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  this.nameRenamer.peek();	  Renamer    renamer    =    nameRenamer.peek();    	non-compiled	[CE]  cannot  find  symbol  nameRenamer	29	None	replace
206	[BUG]  [BUGGY]  Renamer  renamer  =  name.replaceChild(n,  parent);  [CE]  cannot  find  symbol  name  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  name.replaceChild(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  name.replaceChild(n,  parent);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    newName);    	non-compiled	[CE]  cannot  find  symbol  name	5	None	replace
207	[BUG]  [BUGGY]  Renamer  renamer  =  node.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  node  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  node.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  node.removeProp(Node.IS_CONSTANT_NAME);	  Renamer    renamer    =    rootRenamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  node	51	None	replace
208	[BUG]  [BUGGY]  Node  n  =  parent.removeFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  parent.removeFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  parent.removeFirstChild();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	12	None	replace
209	[BUG]  [BUGGY]  Node  n  =  parent.replaceChild(n,  newName);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  n  =  parent.replaceChild(n,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  parent.replaceChild(n,  newName);	  Node    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	12	None	replace
210	[BUG]  [BUGGY]  Node  renamer  =  n,  parent.getFirstChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  n,  parent.getFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  n,  parent.getFirstChild();	  Node    renamer    =    newName.getFirstChild();    	non-compiled	[CE]  ';'  expected	49	None	replace
211	[BUG]  [BUGGY]  Node  renamer  =  newName.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  newName.removeFirstChild();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  newName.removeFirstChild();	  Node    renamer    =    newName.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
212	[BUG]  [BUGGY]  Renamer  renamer  =  n.replace(parent,  newName);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replace(parent,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replace(parent,  newName);	  Renamer    renamer    =    newName.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
213	[BUG]  [BUGGY]  Renamer  renamer  =  newName.replace(n,  parent,  t);  [CE]  no  suitable  method  found  for  replace(Node,Node,NodeTraversal)  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  newName.replace(n,  parent,  t);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.replace(n,  parent,  t);	  Renamer    renamer    =    newName.replace(n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  replace(Node,Node,NodeTraversal)	35	None	replace
214	[BUG]  [BUGGY]  Renamer  renamer  =  n.replace(name,  newName);  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replace(name,  newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replace(name,  newName);	  Renamer    renamer    =    newName.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  name	35	None	replace
215	[BUG]  [BUGGY]  MutableRenamer  renamer  =  nameStack.peek();  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  MutableRenamer  renamer  =  nameStack.peek();  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	MutableRenamer  renamer  =  nameStack.peek();  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
216	[BUG]  [BUGGY]  Node  renamer  =  newName.getNext();  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  newName.getNext();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  newName.getNext();	  Node    renamer    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
217	[BUG]  [BUGGY]  Renamer  renamer  =  n.push(newName);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.push(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.push(newName);	  Renamer    renamer    =    nameUsage.push(newName);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
218	[BUG]  [BUGGY]  Renamer  renamer  =  names.peek();  [CE]  cannot  find  symbol  names  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  names.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  names.peek();	  Renamer    renamer    =    declarations.peek();    	non-compiled	[CE]  cannot  find  symbol  names	46	None	replace
219	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.findName(newName,  n);  [CE]  cannot  find  symbol  nameUsage  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameUsage.findName(newName,  n);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.findName(newName,  n);	  Renamer    renamer    =    nameUsage.findName(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	37	None	replace
220	[BUG]  [BUGGY]  Renamer  renamer  =  getReferenceName(n,  newName.getString());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  getReferenceName(n,  newName.getString());  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  getReferenceName(n,  newName.getString());	  Renamer    renamer    =    getReferenceName(n.getString());    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
221	[BUG]  [BUGGY]  Renamer  renamer  =  n.parse(newName);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.parse(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.parse(newName);	  Renamer    renamer    =    n.peek();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
222	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  =  n.peek();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  =  n.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  renamer  =  n.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
223	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  =  renamer.pop();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  renamer  =  renamer.pop();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  renamer  =  renamer.pop();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
224	[BUG]  [BUGGY]  Renamer  renamer  =  this.nameUsage.parse(newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  this.nameUsage.parse(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  this.nameUsage.parse(newName);	  Renamer    renamer    =    nameUsage.parse(newName);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	43	None	replace
225	[BUG]  [BUGGY]  Renamer  renamer  =  nameRenamer.parse(newName);  [CE]  cannot  find  symbol  nameRenamer  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameRenamer.parse(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameRenamer.parse(newName);	  Renamer    renamer    =    rootRenamer.parse(newName);    	non-compiled	[CE]  cannot  find  symbol  nameRenamer	4	None	replace
226	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  t.getRawParent();  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  rootRenamer  =  t.getRawParent();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  rootRenamer  =  t.getRawParent();	  ContextualRenamer    rootRenamer    =    t.getCompiler();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
227	[BUG]  [BUGGY]  renamer  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  renamer  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	renamer  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Renamer    renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
228	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.push(newName);  [CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.push(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.push(newName);	  Renamer    renamer    =    nameStack.pop();    Renamer    renamer    =    nameStack.push();    	non-compiled	[CE]  method  push  in  interface  Deque<E>  cannot  be  applied  to  given  types;	23	None	replace
229	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  renamer  =  renamer.peek();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.pop();  renamer  =  renamer.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.pop();  renamer  =  renamer.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
230	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  this.renamer  =  renamer.peek();  [CE]  cannot  find  symbol  renamer  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  this.renamer  =  renamer.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  this.renamer  =  renamer.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol  renamer	53	None	replace
231	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  renamer  =  n.peek();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.pop();  renamer  =  n.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.pop();  renamer  =  n.peek();	  Renamer    renamer    =    nameStack.pop();    renamer    renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
232	[BUG]  [BUGGY]  ContextualRenamer  renamer  =  parent.peek();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  ContextualRenamer  renamer  =  parent.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  renamer  =  parent.peek();	  Renamer    renamer    =    nameStack.pop();    ContextualRenamer    renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
233	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  contextualRenamer  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  contextualRenamer  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  contextualRenamer  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    ContextualRenamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
234	[BUG]  [BUGGY]  n  =  referenceStack.peek();  [CE]  cannot  find  symbol  referenceStack  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n  =  referenceStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n  =  referenceStack.peek();	  renamer    =    referenceStack.peek();    	non-compiled	[CE]  cannot  find  symbol  referenceStack	33	None	replace
235	[BUG]  [BUGGY]  renamer  =  name.peek();  [CE]  cannot  find  symbol  renamer  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  renamer  =  name.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	renamer  =  name.peek();	  renamer    =    newName.peek();    	non-compiled	[CE]  cannot  find  symbol  renamer	8	None	replace
236	[BUG]  [BUGGY]  n.removeProp(Node.IS_PREFIX);  [CE]  cannot  find  symbol  IS_PREFIX  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n.removeProp(Node.IS_PREFIX);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n.removeProp(Node.IS_PREFIX);	  n.removeProp(Node.IS_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_PREFIX	13	None	replace
237	[BUG]  [BUGGY]  n.removeProp(Node.IS_VAR_NAME);  [CE]  cannot  find  symbol  IS_VAR_NAME  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  n.removeProp(Node.IS_VAR_NAME);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n.removeProp(Node.IS_VAR_NAME);	  n.removeProp(Node.IS_NAME);    	non-compiled	[CE]  cannot  find  symbol  IS_VAR_NAME	13	None	replace
238	[BUG]  [BUGGY]  Renamer  renamer  =  n.replace(parent,  rootRenamer);  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  n.replace(parent,  rootRenamer);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.replace(parent,  rootRenamer);	  Renamer    renamer    =    rootRenamer.replace(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
239	[BUG]  [BUGGY]  Node  renamer  =  nameStack.peek();  Renamer  renamer  =  nameStack.peek();  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Node  renamer  =  nameStack.peek();  Renamer  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  nameStack.peek();  Renamer  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Renamer    renamer    =    nameStack.pop();    	non-compiled	[CE]  incompatible  types	20	None	replace
240	[BUG]  [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  parent);  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  parent);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.replaceChild(n,  parent);	  Renamer    renamer    =    rootRenamer.replaceChild(n,    parent);    	non-compiled	[CE]  incompatible  types	36	None	replace
241	[BUG]  [BUGGY]  Renamer  renamer  =  namesStack.peek()  /  1;  [CE]  cannot  find  symbol  namesStack  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  namesStack.peek()  /  1;  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  namesStack.peek()  /  1;	  Renamer    renamer    =    nameStack.peek()    *    1;    	non-compiled	[CE]  cannot  find  symbol  namesStack	44	None	replace
242	[BUG]  [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  newName,  t);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  newName,  t);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.replaceChild(n,  newName,  t);	  Renamer    renamer    =    parent.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	42	None	replace
243	[BUG]  [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  newName,  null);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  newName,  null);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.replaceChild(n,  newName,  null);	  Renamer    renamer    =    parent.replaceChild(n,    newName);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	42	None	replace
244	[BUG]  [BUGGY]  NullPointer  renamer  =  nameStack.peek();  Node  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  NullPointer  renamer  =  nameStack.peek();  Node  renamer  =  nameStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	NullPointer  renamer  =  nameStack.peek();  Node  renamer  =  nameStack.peek();	  Renamer    renamer    =    nameStack.pop();    Node    renamer    =    nameStack.pop();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
245	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	add	Renamer  renamer  =  nameStack.peek();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  Renamer    renamer    =    nameStack.pop();    Node    renamer    =    nameStack.pop();    	compilable	timeout	25	1	replace
246	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek();  Preconditions.checkState(n.getType()  ==  Token.NAME);  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  nameStack.peek();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  Renamer    renamer    =    nameStack.pop();    Node    renamer    =    nameStack.pop();    	compilable	timeout	25	1	replace
247	[BUG]  [BUGGY]  Renamer  renamer  =  this.nameUsage.remove(newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  this.nameUsage.remove(newName);  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  this.nameUsage.remove(newName);	  Renamer    renamer    =    this.nameUsage.peek();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	6	None	replace
248	[BUG]  [BUGGY]  Renamer  renamer  =  statementStack.peek();  [CE]  cannot  find  symbol  statementStack  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {      [BUGGY]  Renamer  renamer  =  statementStack.peek();  [BUGGY]      if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  statementStack.peek();	  Renamer    renamer    =    nameMap.peek();    	non-compiled	[CE]  cannot  find  symbol  statementStack	28	None	replace
