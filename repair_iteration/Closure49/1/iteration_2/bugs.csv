bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Renamer  renamer  =  n.peek();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  n.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  n.peek();	  Renamer    renamer    =    parent.peek();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
2	[BUG]  [BUGGY]  Renamer  renamer  =  name.peek();  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  name.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  name.peek();	  Renamer    renamer    =    parent.peek();    	non-compiled	[CE]  cannot  find  symbol  name	4	None	replace
3	[BUG]  [BUGGY]  Renamer  renamer  =  node.peek();  [CE]  cannot  find  symbol  node  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  node.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  node.peek();	  Renamer    renamer    =    parent.peek();    	non-compiled	[CE]  cannot  find  symbol  node	4	None	replace
4	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.parse(newName);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  rootRenamer.parse(newName);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.parse(newName);	  Renamer    renamer    =    rootRenamer.peek();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
5	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.replaceChild(n,  newName);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  rootRenamer.replaceChild(n,  newName);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.replaceChild(n,  newName);	  Renamer    renamer    =    rootRenamer.peek();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
6	[BUG]  [BUGGY]  Renamer  renamer  =  this.nameUsage.peek();  [CE]  cannot  find  symbol  nameUsage  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  this.nameUsage.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  this.nameUsage.peek();	  Renamer    renamer    =    nameUsage.peek();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	5	None	replace
7	[BUG]  [BUGGY]  renamer  =  rootRenamer.peek();  [CE]  cannot  find  symbol  renamer  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  renamer  =  rootRenamer.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	renamer  =  rootRenamer.peek();	  renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol  renamer	11	None	replace
8	[BUG]  [BUGGY]  renamer  =  newName.peek();  [CE]  cannot  find  symbol  renamer  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  renamer  =  newName.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	renamer  =  newName.peek();	  renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol  renamer	11	None	replace
9	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  renamer  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);	      	non-compiled	[CE]  cannot  find  symbol  renamer	7	None	replace
10	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  parent.getFirstChild();	      	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	7	None	replace
11	[BUG]  [BUGGY]  Node  rootRenamer  =  n.getFirstChild();  [CE]  cannot  find  symbol  renamer  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Node  rootRenamer  =  n.getFirstChild();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  rootRenamer  =  n.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol  renamer	7	None	replace
12	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Node  n  =  parent.getParent();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  n  =  parent.getParent();	      	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	7	None	replace
13	[BUG]  [BUGGY]  n.removeProp(Node.IS_NAME);  [CE]  cannot  find  symbol  IS_NAME  [FE]                            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  n.removeProp(Node.IS_NAME);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	n.removeProp(Node.IS_NAME);	      	non-compiled	[CE]  cannot  find  symbol  IS_NAME	7	None	replace
14	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  t.getCompiler();  [CE]  incompatible  types  [FE]                              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  ContextualRenamer  rootRenamer  =  t.getCompiler();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	ContextualRenamer  rootRenamer  =  t.getCompiler();	      	non-compiled	[CE]  incompatible  types	7	None	replace
15	[BUG]  [BUGGY]  Node  renamer  =  parent.getParent();  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Node  renamer  =  parent.getParent();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  parent.getParent();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
16	[BUG]  [BUGGY]  Renamer  renamer  =  newNameStack.peek()  +  1;  [CE]  cannot  find  symbol  newNameStack  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  newNameStack.peek()  +  1;  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newNameStack.peek()  +  1;	  Renamer    renamer    =    nameStack.peek()    +    1;    	non-compiled	[CE]  cannot  find  symbol  newNameStack	10	None	replace
17	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.peek()  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  rootRenamer.peek()  +  1;  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.peek()  +  1;	  Renamer    renamer    =    nameStack.peek()    +    1;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
18	[BUG]  [BUGGY]  Renamer  renamer  =  parent.peek()  +  1;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  parent.peek()  +  1;  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.peek()  +  1;	  Renamer    renamer    =    nameStack.peek()    +    1;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
19	[BUG]  [BUGGY]  Renamer  renamer  =  newName.peek()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  newName.peek()  +  1;  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.peek()  +  1;	  Renamer    renamer    =    nameStack.peek()    +    1;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
20	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  Renamer  renamer  =  nameStack.pop();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameStack.pop();  Renamer  renamer  =  nameStack.pop();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer    renamer    =    nameStack.pop();    Renamer  renamer  =  nameStack.pop();	  timeout    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	8	None	add
21	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  Renamer  renamer  =  nameStack.peek();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameStack.pop();  Renamer  renamer  =  nameStack.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer    renamer    =    nameStack.pop();    Renamer  renamer  =  nameStack.peek();	  timeout    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	8	None	add
22	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  ContextualRenamer  renamer  =  nameStack.pop();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameStack.pop();  ContextualRenamer  renamer  =  nameStack.pop();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer    renamer    =    nameStack.pop();    ContextualRenamer  renamer  =  nameStack.pop();	  timeout    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	8	None	add
23	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  Renamer  renamer  =  nameStack.push();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameStack.pop();  Renamer  renamer  =  nameStack.push();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer    renamer    =    nameStack.pop();    Renamer  renamer  =  nameStack.push();	  timeout    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	8	None	add
24	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  ContextualRenamer  renamer  =  nameStack.peek();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameStack.pop();  ContextualRenamer  renamer  =  nameStack.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer    renamer    =    nameStack.pop();    ContextualRenamer  renamer  =  nameStack.peek();	  timeout    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	8	None	add
25	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  Node  renamer  =  nameStack.pop();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameStack.pop();  Node  renamer  =  nameStack.pop();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer    renamer    =    nameStack.pop();    Node  renamer  =  nameStack.pop();	  timeout    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	8	None	add
26	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  Node  renamer  =  nameStack.peek();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameStack.pop();  Node  renamer  =  nameStack.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer    renamer    =    nameStack.pop();    Node  renamer  =  nameStack.peek();	  timeout    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	8	None	add
27	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  renamer  =  nameStack.pop();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameStack.pop();  renamer  =  nameStack.pop();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer    renamer    =    nameStack.pop();    renamer  =  nameStack.pop();	  timeout    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	8	None	add
28	[BUG]  [BUGGY]  Renamer  renamer  =  nameMap.peek();  [CE]  cannot  find  symbol  nameMap  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameMap.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameMap.peek();	  Renamer    renamer    =    referenceStack.peek();    	non-compiled	[CE]  cannot  find  symbol  nameMap	3	None	replace
29	[BUG]  [BUGGY]  Renamer  renamer  =  nameRenamer.peek();  [CE]  cannot  find  symbol  nameRenamer  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameRenamer.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameRenamer.peek();	  Renamer    renamer    =    rootRenamer.peek();    	non-compiled	[CE]  cannot  find  symbol  nameRenamer	1	None	replace
30	[BUG]  [BUGGY]  Renamer  renamer  =  referenceStack.peek()  +  1;  [CE]  cannot  find  symbol  referenceStack  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  referenceStack.peek()  +  1;  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  referenceStack.peek()  +  1;	  Renamer    renamer    =    nameStack.peek()    +    1;    	non-compiled	[CE]  cannot  find  symbol  referenceStack	10	None	replace
31	[BUG]  [BUGGY]  Renamer  renamer  =  namesStack.peek();  [CE]  cannot  find  symbol  namesStack  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  namesStack.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  namesStack.peek();	  Renamer    renamer    =    nameStack.peek()    +    1;    	non-compiled	[CE]  cannot  find  symbol  namesStack	10	None	replace
32	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.pop();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  rootRenamer.pop();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.pop();	  Renamer    renamer    =    nameStack.pop();    timeout    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
33	[BUG]  [BUGGY]  renamer  =  referenceStack.peek();  [CE]  cannot  find  symbol  renamer  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  renamer  =  referenceStack.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	renamer  =  referenceStack.peek();	  renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol  renamer	11	None	replace
34	[BUG]  [BUGGY]  Renamer  renamer  =  getReferenceName(n.getString());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  getReferenceName(n.getString());  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  getReferenceName(n.getString());	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
35	[BUG]  [BUGGY]  Renamer  renamer  =  newName.replace(n,  parent);  [CE]  no  suitable  method  found  for  replace(Node,Node)  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  newName.replace(n,  parent);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.replace(n,  parent);	      	non-compiled	[CE]  no  suitable  method  found  for  replace(Node,Node)	7	None	replace
36	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.replaceChild(n,  parent);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  rootRenamer.replaceChild(n,  parent);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.replaceChild(n,  parent);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
37	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.findName(newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameUsage.findName(newName);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.findName(newName);	      	non-compiled	[CE]  cannot  find  symbol  nameUsage	7	None	replace
38	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.replace(n,  parent);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  rootRenamer.replace(n,  parent);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.replace(n,  parent);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
39	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.replace(n,  newName);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  rootRenamer.replace(n,  newName);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.replace(n,  newName);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
40	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.pop();  [CE]  cannot  find  symbol  nameUsage  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameUsage.pop();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.pop();	  Renamer    renamer    =    nameUsage.peek();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	5	None	replace
41	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.push(newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameUsage.push(newName);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.push(newName);	  Renamer    renamer    =    nameUsage.peek();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	5	None	replace
42	[BUG]  [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  newName);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  parent.replaceChild(n,  newName);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.replaceChild(n,  newName);	  Renamer    renamer    =    parent.peek();    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	4	None	replace
43	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.parse(newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameUsage.parse(newName);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.parse(newName);	  Renamer    renamer    =    nameUsage.peek();    	non-compiled	[CE]  cannot  find  symbol  nameUsage	5	None	replace
44	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek()  *  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameStack.peek()  *  1;  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek()  *  1;	  Renamer    renamer    =    nameStack.peek()    +    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	10	None	replace
45	[BUG]  [BUGGY]  renamer  =  newNameStack.peek();  [CE]  cannot  find  symbol  renamer  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  renamer  =  newNameStack.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	renamer  =  newNameStack.peek();	  renamer    =    nameStack.peek();    	non-compiled	[CE]  cannot  find  symbol  renamer	11	None	replace
46	[BUG]  [BUGGY]  Renamer  renamer  =  declarations.peek();  [CE]  cannot  find  symbol  declarations  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  declarations.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  declarations.peek();	  Renamer    renamer    =    referenceStack.peek();    	non-compiled	[CE]  cannot  find  symbol  declarations	3	None	replace
47	[BUG]  [BUGGY]  Renamer  renamer  =  newName.removeFirstChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  newName.removeFirstChild();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.removeFirstChild();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
48	[BUG]  [BUGGY]  Renamer  renamer  =  newName.replaceChild(n,  parent);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  newName.replaceChild(n,  parent);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.replaceChild(n,  parent);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
49	[BUG]  [BUGGY]  Node  renamer  =  newName.getFirstChild();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Node  renamer  =  newName.getFirstChild();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Node  renamer  =  newName.getFirstChild();	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
50	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.remove(newName);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  rootRenamer.remove(newName);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.remove(newName);	  Renamer    renamer    =    rootRenamer.peek();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
51	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  rootRenamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.removeProp(Node.IS_CONSTANT_NAME);	  Renamer    renamer    =    nameStack.pop();    timeout    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
52	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  renamer  renamer  =  nameStack.pop();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameStack.pop();  renamer  renamer  =  nameStack.pop();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer    renamer    =    nameStack.pop();    renamer  renamer  =  nameStack.pop();	  timeout    	non-compiled	[CE]  cannot  find  symbol	8	None	add
53	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  renamer  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameStack.pop();  renamer  renamer  =  nameStack.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer    renamer    =    nameStack.pop();    renamer  renamer  =  nameStack.peek();	  timeout    	non-compiled	[CE]  cannot  find  symbol	8	None	add
54	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  renamer  =  nameStack.peek();  [CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {    [BUGGY]  Renamer  renamer  =  nameStack.pop();  renamer  =  nameStack.peek();  [BUGGY]    if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer    renamer    =    nameStack.pop();    renamer  =  nameStack.peek();	  timeout    	non-compiled	[CE]  variable  renamer  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	8	None	add
