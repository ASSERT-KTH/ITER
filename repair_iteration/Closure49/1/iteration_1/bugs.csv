bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Renamer  renamer  =  rootRenamer.peek();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  [BUGGY]  Renamer  renamer  =  rootRenamer.peek();  [BUGGY]  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  rootRenamer.peek();	Renamer  renamer  =  nameStack.peek();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  Renamer  renamer  =  newNameStack.peek();  [CE]  cannot  find  symbol  newNameStack  [FE]      AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  [BUGGY]  Renamer  renamer  =  newNameStack.peek();  [BUGGY]  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newNameStack.peek();	Renamer  renamer  =  nameStack.peek();  	non-compiled	[CE]  cannot  find  symbol  newNameStack	1	None	replace
3	[BUG]  [BUGGY]  Renamer  renamer  =  referenceStack.peek();  [CE]  cannot  find  symbol  referenceStack  [FE]        AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  [BUGGY]  Renamer  renamer  =  referenceStack.peek();  [BUGGY]  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  referenceStack.peek();	Renamer  renamer  =  nameStack.peek();  	non-compiled	[CE]  cannot  find  symbol  referenceStack	1	None	replace
4	[BUG]  [BUGGY]  Renamer  renamer  =  parent.peek();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  [BUGGY]  Renamer  renamer  =  parent.peek();  [BUGGY]  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  parent.peek();	Renamer  renamer  =  nameStack.peek();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
5	[BUG]  [BUGGY]  Renamer  renamer  =  nameUsage.peek();  [CE]  cannot  find  symbol  nameUsage  [FE]            AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  [BUGGY]  Renamer  renamer  =  nameUsage.peek();  [BUGGY]  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameUsage.peek();	Renamer  renamer  =  nameStack.peek();  	non-compiled	[CE]  cannot  find  symbol  nameUsage	1	None	replace
6	[BUG]  [BUGGY]  Renamer  renamer  =  newName.peek();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  [BUGGY]  Renamer  renamer  =  newName.peek();  [BUGGY]  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  newName.peek();	Renamer  renamer  =  nameStack.peek();  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
7	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  renamer  [FE]                AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  [BUGGY]    [BUGGY]  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	  	Renamer  renamer  =  nameStack.peek();  	non-compiled	[CE]  cannot  find  symbol  renamer	1	None	replace
8	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  [BUGGY]  Renamer  renamer  =  nameStack.pop();  [BUGGY]  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	add	Renamer  renamer  =  nameStack.pop();	Renamer  renamer  =  nameStack.peek();  	compilable	timeout	1	1	replace
9	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.pop();  timeout  [FE]    AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  [BUGGY]  Renamer  renamer  =  nameStack.pop();  [BUGGY]  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.pop();	Renamer  renamer  =  nameStack.peek();  	compilable	timeout	1	1	replace
10	[BUG]  [BUGGY]  Renamer  renamer  =  nameStack.peek()  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]      AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  [BUGGY]  Renamer  renamer  =  nameStack.peek()  +  1;  [BUGGY]  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	Renamer  renamer  =  nameStack.peek()  +  1;	Renamer  renamer  =  nameStack.peek();  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	1	None	replace
11	[BUG]  [BUGGY]  renamer  =  nameStack.peek();  [CE]  cannot  find  symbol  renamer  [FE]        AssertionFailedError  [CONTEXT]  public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  [BUGGY]  renamer  =  nameStack.peek();  [BUGGY]  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	161	161	66	replace	renamer  =  nameStack.peek();	Renamer  renamer  =  nameStack.peek();  	non-compiled	[CE]  cannot  find  symbol  renamer	1	None	replace
