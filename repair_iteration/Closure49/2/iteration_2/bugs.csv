bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeProp(Node.IS_CONSTANT_NAME);	      	non-compiled	[CE]  orphaned  case	12	None	replace
2	[BUG]  [BUGGY]  Node  nameUsage  =  n.getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  Node  nameUsage  =  n.getLastChild();  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  nameUsage  =  n.getLastChild();	      	non-compiled	[CE]  orphaned  case	12	None	replace
3	[BUG]  [BUGGY]  renamer.setString(newName);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  renamer.setString(newName);  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.setString(newName);	      	non-compiled	[CE]  orphaned  case	12	None	replace
4	[BUG]  [BUGGY]  Node  nameUsage  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  Node  nameUsage  =  n.getFirstChild();  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  nameUsage  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	12	None	replace
5	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getConstructor();  [CE]  orphaned  case  [FE]                              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  ContextualRenamer  t  =  n.getConstructor();  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	ContextualRenamer  t  =  n.getConstructor();	      	non-compiled	[CE]  orphaned  case	12	None	replace
6	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_UNKNOWN);  [CE]  orphaned  case  [FE]                                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  renamer.removeProp(Node.IS_UNKNOWN);  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeProp(Node.IS_UNKNOWN);	      	non-compiled	[CE]  orphaned  case	12	None	replace
7	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_NAME);  [CE]  orphaned  case  [FE]                                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  renamer.removeProp(Node.IS_NAME);  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeProp(Node.IS_NAME);	      	non-compiled	[CE]  orphaned  case	12	None	replace
8	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	non-compiled	[CE]  cannot  find  symbol  referencedNames	2	None	replace
9	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	compilable	timeout	2	1	replace
10	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	compilable	timeout	2	1	replace
11	[BUG]  [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
12	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	compilable	timeout	2	1	replace
13	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  timeout  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	compilable	timeout	2	1	replace
14	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	compilable	timeout	2	1	replace
15	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  timeout  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	compilable	timeout	2	1	replace
16	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	compilable	timeout	2	1	replace
17	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  timeout  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	compilable	timeout	2	1	replace
18	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	compilable	timeout	2	1	replace
19	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  timeout  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	compilable	timeout	2	1	replace
20	[BUG]  [BUGGY]  if  (!renamedNames.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renamedNames  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamedNames.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamedNames.stripConstIfReplaced())  {	  if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	13	None	replace
21	[BUG]  [BUGGY]  if  (!newName.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!newName.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.stripConstIfReplaced())  {	  if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
22	[BUG]  [BUGGY]  if  (!name.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  name  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!name.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!name.stripConstIfReplaced())  {	  if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  name	13	None	replace
23	[BUG]  [BUGGY]  if  (!renameConstness.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renameConstness  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renameConstness.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstness.stripConstIfReplaced())  {	  if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renameConstness	13	None	replace
24	[BUG]  [BUGGY]  if  (!n.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!n.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!n.stripConstIfReplaced())  {	  if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
25	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	8	1	replace
26	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	8	1	replace
27	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	8	1	replace
28	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	8	1	replace
29	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (n.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
30	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (newName.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
31	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
32	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&!renamer.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	4	None	replace
33	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	4	None	replace
34	[BUG]  [BUGGY]  if  (nameUsage.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (nameUsage.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameUsage.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	4	None	replace
35	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	4	None	replace
36	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (n.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
37	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	4	None	replace
38	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  if  (!renamer.stripConstIfReplaced())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  if  (!renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced())    {    if  (!renamer.stripConstIfReplaced())  {	  timeout    	non-compiled	[CE]  orphaned  case	1	None	add
39	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  If  (!renamer.stripConstIfReplaced())  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  If  (!renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced())    {    If  (!renamer.stripConstIfReplaced())  {	  timeout    	non-compiled	[CE]  ';'  expected	1	None	add
40	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  if  (!relativeIdSupplier.stripConstIfReplaced())  {  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  if  (!relativeIdSupplier.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced())    {    if  (!relativeIdSupplier.stripConstIfReplaced())  {	  timeout    	non-compiled	[CE]  orphaned  case	1	None	add
41	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  if  (!replacement.stripConstIfReplaced())  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  if  (!replacement.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced())    {    if  (!replacement.stripConstIfReplaced())  {	  timeout    	non-compiled	[CE]  orphaned  case	1	None	add
42	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  if  (!ramer.stripConstIfReplaced())  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  if  (!ramer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced())    {    if  (!ramer.stripConstIfReplaced())  {	  timeout    	non-compiled	[CE]  orphaned  case	1	None	add
43	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	7	None	add
44	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  If  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  If  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    If  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  ';'  expected	7	None	add
45	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	7	None	add
46	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (replacementStack.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	7	None	add
47	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (r.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	7	None	add
48	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n))  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
49	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(renamer))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced(renamer))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(renamer))  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
50	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
51	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer!=  null)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer!=  null)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  renamer!=  null)  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
52	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName.equals(renamer.getString()))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName.equals(renamer.getString()))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName.equals(renamer.getString()))  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
53	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
54	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
55	[BUG]  [BUGGY]  if  (!global  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  global  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!global  &&  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  global	3	None	replace
56	[BUG]  [BUGGY]  if  (!replaceConstness  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstness  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstness  &&  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstness  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstness	3	None	replace
57	[BUG]  [BUGGY]  if  (!referencedNames.remove(newName)&&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!referencedNames.remove(newName)&&  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.remove(newName)&&  renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	3	None	replace
58	[BUG]  [BUGGY]  if  (!replacementConstness  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replacementConstness  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replacementConstness  &&  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementConstness  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacementConstness	3	None	replace
59	[BUG]  [BUGGY]  if  (!removeConstant  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstant  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstant  &&  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstant  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstant	3	None	replace
60	[BUG]  [BUGGY]  if  (!removeConstancy  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstancy  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstancy  &&  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstancy  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstancy	3	None	replace
61	[BUG]  [BUGGY]  if  (!replaceConstants  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstants  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstants  &&  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstants  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstants	3	None	replace
62	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	compilable	timeout	11	1	replace
63	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  timeout  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	compilable	timeout	11	1	replace
64	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
65	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (n.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
66	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	compilable	timeout	11	1	replace
67	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  timeout  [FE]                          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	compilable	timeout	11	1	replace
68	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	16	None	replace
69	[BUG]  [BUGGY]  if  (nameUsage.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (nameUsage.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameUsage.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	16	None	replace
70	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	16	None	replace
71	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (n.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
72	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!nameUsage.containsKey(newName))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!nameUsage.containsKey(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&!nameUsage.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	16	None	replace
73	[BUG]  [BUGGY]  if  (name.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (name.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (name.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  name	16	None	replace
74	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
75	[BUG]  [BUGGY]  if  (n.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (n.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
76	[BUG]  [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  incomparable  types:  Renamer  and  int  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  incomparable  types:  Renamer  and  int	14	None	replace
77	[BUG]  [BUGGY]  if  (renamedNames.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renamedNames  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamedNames.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	14	None	replace
78	[BUG]  [BUGGY]  if  (referenceStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referenceStack  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (referenceStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referenceStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referenceStack	14	None	replace
79	[BUG]  [BUGGY]  if  (newName.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (newName.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
80	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
81	[BUG]  [BUGGY]  if  (referenceStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  referenceStack  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (referenceStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referenceStack.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  referenceStack	15	None	replace
82	[BUG]  [BUGGY]  if  (n.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (n.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
83	[BUG]  [BUGGY]  if  (renamedNames.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  renamedNames  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamedNames.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	15	None	replace
84	[BUG]  [BUGGY]  if  (relativeIdSupplier.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  relativeIdSupplier  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (relativeIdSupplier.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (relativeIdSupplier.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  relativeIdSupplier	15	None	replace
85	[BUG]  [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  incomparable  types:  Renamer  and  int  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  incomparable  types:  Renamer  and  int	15	None	replace
86	[BUG]  [BUGGY]  if  (renamingStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  renamingStack  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamingStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamingStack.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  renamingStack	15	None	replace
87	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	6	1	replace
88	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	6	1	replace
89	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
90	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
91	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	6	1	replace
92	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	6	1	replace
93	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {  [CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;	6	None	replace
94	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	10	None	add
95	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	10	None	add
96	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  ';'  expected	10	None	add
97	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	10	None	add
98	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	10	None	add
99	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	5	None	add
100	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  If  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  If  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    If  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  ';'  expected	5	None	add
101	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	5	None	add
102	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (replacementStack.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	5	None	add
103	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	5	None	add
104	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	17	None	add
105	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( ".prototype   "))  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( ".prototype   "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( ".prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	17	None	add
106	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  If  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  If  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    If  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {	  timeout    	non-compiled	[CE]  	17	None	add
107	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( ",prototype   "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( ",prototype   "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( ",prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	17	None	add
108	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  parent))  {	  if    (renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	19	None	replace
109	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  newName))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(parent,  newName))  {	  if    (renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	19	None	replace
110	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n))  {	  if    (renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	19	None	replace
111	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(newName,  parent))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced(newName,  parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(newName,  parent))  {	  if    (renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	19	None	replace
112	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced(n,  parent))  {	  if    (renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	19	None	replace
113	[BUG]  [BUGGY]  if  (stripConstIfReplaced(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (stripConstIfReplaced(n,  parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced(n,  parent))  {	  if    (renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
114	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	compilable	timeout	18	1	replace
115	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  timeout  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	compilable	timeout	18	1	replace
116	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  renamer.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (n.stripConstIfReplaced()  &&  renamer.getString().equals( "prototype "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  renamer.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
117	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	compilable	timeout	18	1	replace
118	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  timeout  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	compilable	timeout	18	1	replace
119	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	compilable	timeout	18	1	replace
120	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  timeout  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	compilable	timeout	18	1	replace
121	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.equals( "prototype   "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  &&  newName.equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	compilable	timeout	18	1	replace
122	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.equals( "prototype   "))  {  timeout  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.equals( "prototype   "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  newName.equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	compilable	timeout	18	1	replace
123	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  name.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  name.getString().equals( "prototype   "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  name.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol  name	18	None	replace
124	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  if  (!rerenamer.stripConstIfReplaced())  {  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  if  (!rerenamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced())    {    if  (!rerenamer.stripConstIfReplaced())  {	  timeout    	non-compiled	[CE]  orphaned  case	1	None	add
125	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  if  (!renamer.stripconstIfReplaced())  {  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced())  {  if  (!renamer.stripconstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced())    {    if  (!renamer.stripconstIfReplaced())  {	  timeout    	non-compiled	[CE]  orphaned  case	1	None	add
126	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripconstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripconstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripconstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	5	None	add
127	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	5	None	add
128	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	5	None	add
129	[BUG]  [BUGGY]  if  (!removeConstness  &&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstness  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstness  &&!renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&!renamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	non-compiled	[CE]  cannot  find  symbol  removeConstness	2	None	replace
130	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (renamer.stripconstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	10	None	add
131	[BUG]  [BUGGY]  if  (references.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  references  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (references.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (references.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  references	4	None	replace
132	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (newName.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
133	[BUG]  [BUGGY]  if  (newName.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (newName.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
134	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	7	None	add
135	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripconstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripconstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripconstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	7	None	add
136	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	7	None	add
137	[BUG]  [BUGGY]  if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol  replacementStack	6	None	replace
138	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
139	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
140	[BUG]  [BUGGY]  if  (references.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  references  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (references.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (references.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  references	16	None	replace
141	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (newName.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
142	[BUG]  [BUGGY]  if  (!removeConstance  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstance  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstance  &&  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstance  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstance	3	None	replace
143	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(parent,  rootRenamer))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced(parent,  rootRenamer))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(parent,  rootRenamer))  {	  if    (renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	19	None	replace
144	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(parent,  newName))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced(parent,  newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(parent,  newName))  {	  if    (renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	19	None	replace
145	[BUG]  [BUGGY]  if  (renamingStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renamingStack  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamingStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamingStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renamingStack	14	None	replace
146	[BUG]  [BUGGY]  if  (replacementStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  replacementStack  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (replacementStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol  replacementStack	11	None	replace
147	[BUG]  [BUGGY]  if  (parent.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (parent.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
148	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (newName.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
149	[BUG]  [BUGGY]  if  (!removeConstness.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstness  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstness.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness.stripConstIfReplaced())  {	  if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	13	None	replace
150	[BUG]  [BUGGY]  if  (!renameConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renameConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced())  {	  if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
151	[BUG]  [BUGGY]  if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol  replacementStack	8	None	replace
152	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	8	1	replace
153	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  timeout  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	8	1	replace
154	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	8	1	replace
155	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  timeout  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	8	1	replace
156	[BUG]  [BUGGY]  if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacement  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol  replacement	8	None	replace
157	[BUG]  [BUGGY]  renamer.replaceChild(n,  parent);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  renamer.replaceChild(n,  parent);  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.replaceChild(n,  parent);	      	non-compiled	[CE]  orphaned  case	12	None	replace
158	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  Node  name  =  n.getFirstChild();  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  name  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	12	None	replace
159	[BUG]  [BUGGY]  renamer.removeChild(parent);  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  renamer.removeChild(parent);  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeChild(parent);	      	non-compiled	[CE]  orphaned  case	12	None	replace
160	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_NEW_PROP);  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  renamer.removeProp(Node.IS_NEW_PROP);  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeProp(Node.IS_NEW_PROP);	      	non-compiled	[CE]  orphaned  case	12	None	replace
161	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName!=  null)  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
162	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer  ==  null)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer  ==  null)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  renamer  ==  null)  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
163	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
164	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(parent))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced(parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(parent))  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	2	None	replace
165	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	compilable	timeout	2	1	replace
166	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {  timeout  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	compilable	timeout	2	1	replace
167	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(n))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstIfReplaced(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(n))  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	2	None	replace
168	[BUG]  [BUGGY]  if  (!renamer.stripConstness())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!renamer.stripConstness())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness())  {	  if    (!renamer.stripConstIfReplaced())    {    timeout    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
169	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol  removeConstness	6	None	replace
170	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.peek()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.peek()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (replacementStack.peek()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	7	None	add
171	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  removeConstness  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol  removeConstness	11	None	replace
172	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced(n,  parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  parent))  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
173	[BUG]  [BUGGY]  if  (!removeConstness  &&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstness  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstness  &&!replaceConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&!replaceConstIfReplaced())  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	9	None	replace
174	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(parent))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced(parent))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(parent))  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
175	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n.getString()))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced(n.getString()))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n.getString()))  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
176	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(newName))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!replaceConstIfReplaced(newName))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(newName))  {	  if    (!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
177	[BUG]  [BUGGY]  if  (referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	4	None	replace
178	[BUG]  [BUGGY]  if  (renameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  renameStack  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  renameStack	15	None	replace
179	[BUG]  [BUGGY]  if  (!removeConstANT  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstANT  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstANT  &&  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstANT  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstANT	3	None	replace
180	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  removeConstness  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	3	None	replace
181	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME);	  if    (!removeConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
182	[BUG]  [BUGGY]  n.setString(newName);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  n.setString(newName);  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.setString(newName);	      	non-compiled	[CE]  orphaned  case	12	None	replace
183	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n),  parent)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced(n),  parent)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n),  parent)  {	  if    (renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
184	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
185	[BUG]  [BUGGY]  if  (relativeIdSupplier.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  relativeIdSupplier  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (relativeIdSupplier.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (relativeIdSupplier.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  relativeIdSupplier	14	None	replace
186	[BUG]  [BUGGY]  if  (renameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renameStack  [FE]            AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renameStack	14	None	replace
187	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (n.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
188	[BUG]  [BUGGY]  if  (removeConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (removeConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
189	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (ramer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (ramer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (ramer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	5	None	add
190	[BUG]  [BUGGY]  if  (referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]              AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {	  if    (renamer.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	16	None	replace
191	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (ramer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();    [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (ramer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (ramer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	10	None	add
