bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (replaceConstIfReplaced(n))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replaceConstIfReplaced(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replaceConstIfReplaced(n))  {	  if    (!replaceConstIfReplaced(parent))    {    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
2	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(renamer,  parent))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(renamer,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(renamer,  parent))  {	  if    (!replaceConstIfReplaced(parent))    {    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
3	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(n,  parent))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(n,  parent))  {	  if    (!renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	164	None	replace
4	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(newName,  parent))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(newName,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(newName,  parent))  {	  if    (!renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	164	None	replace
5	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(newName))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(newName))  {	  if    (!renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	164	None	replace
6	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(n),  parent)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(n),  parent)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(n),  parent)  {	  if    (!renamer.stripConstIfReplaced(parent))    {    	non-compiled	[CE]  ')'  expected	164	None	replace
7	[BUG]  [BUGGY]  if  (NodeUtil.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (NodeUtil.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (NodeUtil.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (n.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
8	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (n.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
9	[BUG]  [BUGGY]  if  (!NodeUtil.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!NodeUtil.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!NodeUtil.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (n.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
10	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(newName))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(newName))  {	  if    (n.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
11	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (n.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	29	None	replace
12	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(newName))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(newName))  {	  if    (newName.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
13	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (newName.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	90	None	replace
14	[BUG]  [BUGGY]  if  (replacementStack.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (newName.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	90	None	replace
15	[BUG]  [BUGGY]  if  (name.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (name.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (name.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (newName.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  name	90	None	replace
16	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {	  if    (newName.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
17	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(n))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(n))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
18	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(renamer))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(renamer))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
19	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(newName))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(newName))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
20	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  ||  NodeUtil.isFunction(parent))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  ||  NodeUtil.isFunction(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  ||  NodeUtil.isFunction(parent))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
21	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunction(n,  parent))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
22	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
23	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isName(n))  {  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isName(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isName(n))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
24	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	98	None	replace
25	[BUG]  [BUGGY]  if(newName.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(newName.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(newName.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	98	None	replace
26	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	98	None	replace
27	[BUG]  [BUGGY]  timeout  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	compilable	timeout	98	1	replace
28	[BUG]  [BUGGY]  if(!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  timeout  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	compilable	timeout	98	1	replace
29	[BUG]  [BUGGY]  if  (!rootRenamer  &&  renamer.stripConstIfReplaced())  {  [CE]  bad  operand  type  Renamer  for  unary  operator  '!'  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer  &&  renamer.stripConstIfReplaced())  {	  if    (!global    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  bad  operand  type  Renamer  for  unary  operator  '!'	55	None	replace
30	[BUG]  [BUGGY]  if  (!referencedNames.isEmpty()  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.isEmpty()  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.isEmpty()  &&  renamer.stripConstIfReplaced())  {	  if    (!global    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	55	None	replace
31	[BUG]  [BUGGY]  if  (!referencedNames.contains(newName)&&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.contains(newName)&&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.contains(newName)&&  renamer.stripConstIfReplaced())  {	  if    (!global    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	55	None	replace
32	[BUG]  [BUGGY]  if  (!referencedNames  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames  &&  renamer.stripConstIfReplaced())  {	  if    (!global    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	55	None	replace
33	[BUG]  [BUGGY]  if  (!renameConstness  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renameConstness  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstness  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstness  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstance    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renameConstness	142	None	replace
34	[BUG]  [BUGGY]  if(!rootRenamer.stripConstIfReplaced())  {  if  (!rootRenamer.stripConstIfReplaced())  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!rootRenamer.stripConstIfReplaced())  {  if  (!rootRenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!rootRenamer.stripConstIfReplaced())  {  if  (!rootRenamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  orphaned  case	38	None	replace
35	[BUG]  [BUGGY]  if(!newName.isEmpty())  {  if  (!renamer.stripConstIfReplaced())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!newName.isEmpty())  {  if  (!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!newName.isEmpty())  {  if  (!renamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  orphaned  case	38	None	replace
36	[BUG]  [BUGGY]  if(!rootRenamer.stripConstness())  {  if  (!rootRenamer.stripConstness())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!rootRenamer.stripConstness())  {  if  (!rootRenamer.stripConstness())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!rootRenamer.stripConstness())  {  if  (!rootRenamer.stripConstness())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  orphaned  case	38	None	replace
37	[BUG]  [BUGGY]  if(!rootRenamer.stripConst())  {  if  (!rootRenamer.stripConstIfReplaced())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!rootRenamer.stripConst())  {  if  (!rootRenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!rootRenamer.stripConst())  {  if  (!rootRenamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  orphaned  case	38	None	replace
38	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!rootRenamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripConstIfReplaced())    {    	compilable	timeout	38	1	replace
39	[BUG]  [BUGGY]  if  (!rootRenamer.stripConstIfReplaced())  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripConstIfReplaced())    {    	compilable	timeout	38	1	replace
40	[BUG]  [BUGGY]  if(!rootRenamer.stripConst())  {  if  (!rootRenamer.stripConst())  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!rootRenamer.stripConst())  {  if  (!rootRenamer.stripConst())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!rootRenamer.stripConst())  {  if  (!rootRenamer.stripConst())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  orphaned  case	38	None	replace
41	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(newName,  renamer))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(newName,  renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(newName,  renamer))  {	  if    (!replaceConstIfReplaced(newName))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
42	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  newName))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  newName))  {	  if    (!replaceConstIfReplaced(newName))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
43	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(renamer.getString()))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(renamer.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(renamer.getString()))  {	  if    (!replaceConstIfReplaced(newName))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
44	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(newName,  null))  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(newName,  null))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(newName,  null))  {	  if    (!replaceConstIfReplaced(newName))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
45	[BUG]  [BUGGY]  if  (!nameUsage.remove(newName)&&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!nameUsage.remove(newName)&&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!nameUsage.remove(newName)&&  renamer.stripConstIfReplaced())  {	  if    (!referencedNames.remove(newName)&&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	57	None	replace
46	[BUG]  [BUGGY]  if  (!rootRenamer.remove(newName)&&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.remove(newName)&&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.remove(newName)&&  renamer.stripConstIfReplaced())  {	  if    (!referencedNames.remove(newName)&&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
47	[BUG]  [BUGGY]  if  (!referencedNames.get(newName)&&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.get(newName)&&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.get(newName)&&  renamer.stripConstIfReplaced())  {	  if    (!referencedNames.remove(newName)&&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	57	None	replace
48	[BUG]  [BUGGY]  if  (!referencedNames.remove(newName)&&  rootRenamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.remove(newName)&&  rootRenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.remove(newName)&&  rootRenamer.stripConstIfReplaced())  {	  if    (!referencedNames.remove(newName)&&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	57	None	replace
49	[BUG]  [BUGGY]  if  (!referencedNames.remove(newName)&&  newName.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.remove(newName)&&  newName.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.remove(newName)&&  newName.stripConstIfReplaced())  {	  if    (!referencedNames.remove(newName)&&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	57	None	replace
50	[BUG]  [BUGGY]  if  (names.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  names  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (names.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (names.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (references.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  names	140	None	replace
51	[BUG]  [BUGGY]  if  (nameStack.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (references.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
52	[BUG]  [BUGGY]  if  (referenceStack.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  referenceStack  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referenceStack.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referenceStack.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (references.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referenceStack	140	None	replace
53	[BUG]  [BUGGY]  if  (ReferencedNames.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  ReferencedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (ReferencedNames.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (ReferencedNames.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (n.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  ReferencedNames	71	None	replace
54	[BUG]  [BUGGY]  if  (referencedNames.stripIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (n.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	71	None	replace
55	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  ||!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced()  ||!referencedNames.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  ||!referencedNames.containsKey(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	70	None	replace
56	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  n))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(parent,  n))  {	  if    (!renamer.stripConstIfReplaced(n))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	167	None	replace
57	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(newName,  n))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(newName,  n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(newName,  n))  {	  if    (!renamer.stripConstIfReplaced(n))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	167	None	replace
58	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(n,  rootRenamer))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(n,  rootRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(n,  rootRenamer))  {	  if    (!renamer.stripConstIfReplaced(n))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	167	None	replace
59	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(n,  newName))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(n,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(n,  newName))  {	  if    (!renamer.stripConstIfReplaced(n))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	167	None	replace
60	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(name,  n))  {  [CE]  cannot  find  symbol  name  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(name,  n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(name,  n))  {	  if    (!renamer.stripConstIfReplaced(n))    {    	non-compiled	[CE]  cannot  find  symbol  name	167	None	replace
61	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype       "))    {    	compilable	timeout	104	1	replace
62	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  timeout  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype       "))    {    	compilable	timeout	104	1	replace
63	[BUG]  [BUGGY]  Node  name  =  n.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  name  =  n.getLastChild();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  name  =  n.getLastChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	158	None	replace
64	[BUG]  [BUGGY]  Node  name  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  name  =  parent.getFirstChild();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  name  =  parent.getFirstChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	158	None	replace
65	[BUG]  [BUGGY]  Node  name  =  renamer.getFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  name  =  renamer.getFirstChild();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  name  =  renamer.getFirstChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	158	None	replace
66	[BUG]  [BUGGY]  Node  name  =  renamer.getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  name  =  renamer.getLastChild();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  name  =  renamer.getLastChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	158	None	replace
67	[BUG]  [BUGGY]  Node  name  =  n.getNext();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  name  =  n.getNext();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  name  =  n.getNext();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	158	None	replace
68	[BUG]  [BUGGY]  Node  name  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  name  =  n.removeFirstChild();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  name  =  n.removeFirstChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	158	None	replace
69	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  &&  newName.equals( "prototype   "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  &&  newName.equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    if  (renamer.stripConstIfReplaced()  &&  newName.equals( "prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	121	None	add
70	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  &&  newName.equals( ".prototype   "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  &&  newName.equals( ".prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    if  (renamer.stripConstIfReplaced()  &&  newName.equals( ".prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	121	None	add
71	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.equals(   "prototype     "))  {  If  (renamer.stripConstIfReplaced()  &&  newName.equals( "prototype   "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.equals(   "prototype     "))  {  If  (renamer.stripConstIfReplaced()  &&  newName.equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    If  (renamer.stripConstIfReplaced()  &&  newName.equals( "prototype   "))  {	  timeout    	non-compiled	[CE]  	121	None	add
72	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  &&  newName.equals( ",prototype   "))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  &&  newName.equals( ",prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    if  (renamer.stripConstIfReplaced()  &&  newName.equals( ",prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	121	None	add
73	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	190	None	replace
74	[BUG]  [BUGGY]  if  (nameStack.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.containsKey(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	190	None	replace
75	[BUG]  [BUGGY]  if  (name.referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  package  name  does  not  exist  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (name.referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (name.referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  package  name  does  not  exist	190	None	replace
76	[BUG]  [BUGGY]  if  (nameUsage.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  nameUsage  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameUsage.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameUsage.containsKey(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	190	None	replace
77	[BUG]  [BUGGY]  if  (renamedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renamedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	190	None	replace
78	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	99	None	replace
79	[BUG]  [BUGGY]  if(referencedNames.contains(newName)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(referencedNames.contains(newName)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(referencedNames.contains(newName)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	99	None	replace
80	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.FUNCTION)  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	99	None	replace
81	[BUG]  [BUGGY]  if(!referencedNames.contains(newName)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!referencedNames.contains(newName)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!referencedNames.contains(newName)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	99	None	replace
82	[BUG]  [BUGGY]  if(referencedNames.contains(newName)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(referencedNames.contains(newName)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(referencedNames.contains(newName)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	99	None	replace
83	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	99	None	replace
84	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	152	None	add
85	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  If  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  If  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    If  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  ';'  expected	152	None	add
86	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	152	None	add
87	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (replacementStack.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (replacementStack.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (replacementStack.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	152	None	add
88	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (ramer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (ramer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (ramer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	152	None	add
89	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||!NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	153	1	replace
90	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.mayHaveSideEffects(n))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||!NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	153	1	replace
91	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(renamer))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(renamer))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
92	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  [CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)	153	None	replace
93	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
94	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
95	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  rootRenamer!=  null)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  rootRenamer!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  rootRenamer!=  null)  {	  if    (!replaceConstIfReplaced()    &&    renamer!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
96	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  ||  renamer!=  null)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  ||  renamer!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  ||  renamer!=  null)  {	  if    (!replaceConstIfReplaced()    &&    renamer!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
97	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  parent!=  null)  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  parent!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  parent!=  null)  {	  if    (!replaceConstIfReplaced()    &&    renamer!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
98	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  nameStack.peek()!=  null)  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  nameStack.peek()!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  nameStack.peek()!=  null)  {	  if    (!replaceConstIfReplaced()    &&    renamer!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
99	[BUG]  [BUGGY]  If  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    If    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype       "))    {    	non-compiled	[CE]  	106	None	replace
100	[BUG]  [BUGGY]  If  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    If    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype       "))    {    	non-compiled	[CE]  	106	None	replace
101	[BUG]  [BUGGY]  If  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    If    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype       "))    {    	non-compiled	[CE]  	106	None	replace
102	[BUG]  [BUGGY]  If  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    If    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype       "))    {    	non-compiled	[CE]  	106	None	replace
103	[BUG]  [BUGGY]  If  (renamer.stripConstant()  &&  n.getString().equals( "prototype "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (renamer.stripConstant()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (renamer.stripConstant()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    If    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype       "))    {    	non-compiled	[CE]  	106	None	replace
104	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  ||  renamer.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  ||  renamer.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  ||  renamer.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    ||    n.getString().equals(   "prototype       "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
105	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  newName.equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||  newName.equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    ||    n.getString().equals(   "prototype       "))    {    timeout    	compilable	timeout	115	1	replace
106	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  newName.equals( "prototype   "))  {  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  newName.equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  newName.equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    ||    n.getString().equals(   "prototype       "))    {    timeout    	compilable	timeout	115	1	replace
107	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {	  if    (!replaceConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
108	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {	  if    (!replaceConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
109	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  name.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  name.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  name.getType()  ==  Token.NAME)  {	  if    (!replaceConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
110	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (!replaceConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
111	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (!replaceConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
112	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  nameStack.peek()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  nameStack.peek()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  nameStack.peek()  ==  Token.NAME)  {	  if    (!replaceConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
113	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (n.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(renamer))    {    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
114	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(renamer))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(renamer))  {	  if    (n.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(renamer))    {    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
115	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {	  if    (n.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(renamer))    {    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
116	[BUG]  [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  renamedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(renamer))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	89	None	replace
117	[BUG]  [BUGGY]  if  (r.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  r  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (r.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (r.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  r	47	None	replace
118	[BUG]  [BUGGY]  if(r.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  r  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(r.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(r.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  r	47	None	replace
119	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	47	1	replace
120	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	47	1	replace
121	[BUG]  [BUGGY]  if(!referencedNames.contains(newName)&&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!referencedNames.contains(newName)&&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!referencedNames.contains(newName)&&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	47	None	replace
122	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
123	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {	  timeout    	non-compiled	[CE]  orphaned  case	12	None	add
124	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  If  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  If  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    If  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {	  timeout    	non-compiled	[CE]  ';'  expected	12	None	add
125	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  if  (!replacement.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  if  (!replacement.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    if  (!replacement.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {	  timeout    	non-compiled	[CE]  orphaned  case	12	None	add
126	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  if  (!ramer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  if  (!ramer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    if  (!ramer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {	  timeout    	non-compiled	[CE]  orphaned  case	12	None	add
127	[BUG]  [BUGGY]  if  (nameUsage.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameUsage.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameUsage.stripConstIfReplaced()  &&!renamer.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	37	None	replace
128	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	37	None	replace
129	[BUG]  [BUGGY]  if  (!nameUsage.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!nameUsage.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!nameUsage.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	37	None	replace
130	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&!nameUsage.contains(renamer))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&!nameUsage.contains(renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&!nameUsage.contains(renamer))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
131	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
132	[BUG]  [BUGGY]  if  (replacementStack.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	46	None	replace
133	[BUG]  [BUGGY]  if(replacementStack.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(replacementStack.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(replacementStack.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	46	None	replace
134	[BUG]  [BUGGY]  if(!replacementStack.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!replacementStack.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!replacementStack.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	46	None	replace
135	[BUG]  [BUGGY]  if  (replacementStack.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	46	None	replace
136	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    >=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	97	None	replace
137	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    >=    Token.NAME)    {    	compilable	timeout	97	1	replace
138	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    >=    Token.NAME)    {    	compilable	timeout	97	1	replace
139	[BUG]  [BUGGY]  if  (!removeConstants  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstants  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstants  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstants  &&  renamer.stripConstIfReplaced())  {	  if    (!replaceConstants    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstants	61	None	replace
140	[BUG]  [BUGGY]  if  (!replaceConstants  &&  rootRenamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstants  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstants  &&  rootRenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstants  &&  rootRenamer.stripConstIfReplaced())  {	  if    (!replaceConstants    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstants	61	None	replace
141	[BUG]  [BUGGY]  if  (!replaceConstants  &&  parent.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstants  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstants  &&  parent.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstants  &&  parent.stripConstIfReplaced())  {	  if    (!replaceConstants    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstants	61	None	replace
142	[BUG]  [BUGGY]  if  (!newName  &&  renamer.stripConstIfReplaced())  {  [CE]  bad  operand  type  String  for  unary  operator  '!'  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName  &&  renamer.stripConstIfReplaced())  {	  if    (!replaceConstants    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  bad  operand  type  String  for  unary  operator  '!'	61	None	replace
143	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  parent.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  parent.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  parent.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced()    &&    renamer.hasProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
144	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  ||  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  ||  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  ||  renamer.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced()    &&    renamer.hasProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
145	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  rootRenamer.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  rootRenamer.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  rootRenamer.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced()    &&    renamer.hasProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
146	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced()    &&    renamer.hasProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
147	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME,  newName))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME,  newName))  {	  if    (!replaceConstIfReplaced()    &&    renamer.hasProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
148	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  name.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  name.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  name.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced()    &&    renamer.hasProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
149	[BUG]  [BUGGY]  if  (referencedNames.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  referencedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (relativeIdSupplier.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	84	None	replace
150	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  n.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  n.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  n.stripConstIfReplaced())  {	  if    (n.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
151	[BUG]  [BUGGY]  if  (n.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced())  {	  if    (n.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
152	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  t.getCompiler().stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  t.getCompiler().stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  t.getCompiler().stripConstIfReplaced())  {	  if    (n.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
153	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  parent.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  parent.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  parent.stripConstIfReplaced())  {	  if    (n.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
154	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
155	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	compilable	timeout	94	1	replace
156	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	compilable	timeout	94	1	replace
157	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	compilable	timeout	94	1	replace
158	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	compilable	timeout	94	1	replace
159	[BUG]  [BUGGY]  if  (!global  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  global  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!global  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  global	169	None	replace
160	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	169	None	replace
161	[BUG]  [BUGGY]  if  (!removeConstancy  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  removeConstancy  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstancy  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstancy  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstancy	169	None	replace
162	[BUG]  [BUGGY]  if  (!removeConstancy  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  removeConstancy  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstancy  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstancy  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstancy	169	None	replace
163	[BUG]  [BUGGY]  if  (!replaceConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  replaceConstness  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstness	169	None	replace
164	[BUG]  [BUGGY]  if  (!replaceConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replaceConstness  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstness	169	None	replace
165	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {	  if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
166	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	compilable	timeout	17	1	replace
167	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	compilable	timeout	17	1	replace
168	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  rootRenamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  rootRenamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  rootRenamer.getType()  ==  Token.NAME)  {	  if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
169	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  name.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  name.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  name.getType()  ==  Token.NAME)  {	  if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol  name	17	None	replace
170	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName  ==  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  newName  ==  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
171	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName  ==  null)  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName  ==  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  newName  ==  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
172	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  ||  newName!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
173	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  newName!=  null)  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  ||  newName!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
174	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  nameUsage!=  null)  {  [CE]  cannot  find  symbol  nameUsage  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  nameUsage!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  nameUsage!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	15	None	replace
175	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  parent!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
176	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent!=  null)  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  parent!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
177	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName  >=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  newName  >=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	15	None	replace
178	[BUG]  [BUGGY]  if  (NodeUtil.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(newName))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (NodeUtil.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (NodeUtil.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(newName))  {	  if    (newName.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
179	[BUG]  [BUGGY]  If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
180	[BUG]  [BUGGY]  If  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
181	[BUG]  [BUGGY]  If  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
182	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	44	1	replace
183	[BUG]  [BUGGY]  if(!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	44	1	replace
184	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  renamer))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  renamer))  {	  if    (!replaceConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
185	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  parent,  newName))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  parent,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  parent,  newName))  {	  if    (!replaceConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
186	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  parent)&&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  parent)&&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  parent)&&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
187	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(newName,  parent))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(newName,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(newName,  parent))  {	  if    (!replaceConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
188	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  parent)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  parent)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  parent)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);	  if    (!replaceConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  ')'  expected	172	None	replace
189	[BUG]  [BUGGY]  if  (!renameConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
190	[BUG]  [BUGGY]  if  (!removeConstnessIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstnessIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstnessIfReplaced())  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
191	[BUG]  [BUGGY]  if  (!renameConstIfReplaced()  &&  renamer!=  null)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced()  &&  renamer!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced()  &&  renamer!=  null)  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
192	[BUG]  [BUGGY]  if  (!renameConstIfReplaced(n))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced(n))  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
193	[BUG]  [BUGGY]  if  (!renameConstIfReplaced(renamer))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced(renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced(renamer))  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
194	[BUG]  [BUGGY]  if  (!renameConstIfReplaced()  &&  newName.equals(renamer.getString()))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced()  &&  newName.equals(renamer.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced()  &&  newName.equals(renamer.getString()))  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
195	[BUG]  [BUGGY]  if  (!renameConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
196	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {	  if    (n.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	187	None	replace
197	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {	  if    (n.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	187	None	replace
198	[BUG]  [BUGGY]  if  (parent.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripconstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
199	[BUG]  [BUGGY]  if  (!referencedNames.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.stripConstIfReplaced())  {	  if    (!renamedNames.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	20	None	replace
200	[BUG]  [BUGGY]  if  (!nameUsage.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  nameUsage  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!nameUsage.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!nameUsage.stripConstIfReplaced())  {	  if    (!renamedNames.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	20	None	replace
201	[BUG]  [BUGGY]  if  (!replacedNames.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replacedNames  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacedNames.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacedNames.stripConstIfReplaced())  {	  if    (!renamedNames.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacedNames	20	None	replace
202	[BUG]  [BUGGY]  if  (!replacementNames.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replacementNames  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementNames.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementNames.stripConstIfReplaced())  {	  if    (!renamedNames.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacementNames	20	None	replace
203	[BUG]  [BUGGY]  if  (!global  &&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  global  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!global  &&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global  &&!renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  global	129	None	replace
204	[BUG]  [BUGGY]  if  (!replaceConstness  &&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstness  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstness  &&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstness  &&!renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstness	129	None	replace
205	[BUG]  [BUGGY]  if  (!replacementConstness  &&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replacementConstness  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementConstness  &&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementConstness  &&!renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacementConstness	129	None	replace
206	[BUG]  [BUGGY]  if  (!replaceConstant  &&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstant  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstant  &&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstant  &&!renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstant	129	None	replace
207	[BUG]  [BUGGY]  if  (!rootRenamer  &&!renamer.stripConstIfReplaced())  {  [CE]  bad  operand  type  Renamer  for  unary  operator  '!'  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer  &&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer  &&!renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  bad  operand  type  Renamer  for  unary  operator  '!'	129	None	replace
208	[BUG]  [BUGGY]  if  (!removeConstant  &&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstant  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstant  &&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstant  &&!renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstant	129	None	replace
209	[BUG]  [BUGGY]  if  (!referencedNames.size()  &&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.size()  &&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.size()  &&!renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	129	None	replace
210	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   ",prototype       "))    {    	non-compiled	[CE]  orphaned  case	107	None	replace
211	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(n.getType()  ==  Token.FUNCTION  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   ",prototype       "))    {    	compilable	timeout	107	1	replace
212	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.FUNCTION  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.FUNCTION  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   ",prototype       "))    {    	compilable	timeout	107	1	replace
213	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	91	None	add
214	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  If  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  If  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    If  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  ';'  expected	91	None	add
215	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	91	None	add
216	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (replacementStack.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (replacementStack.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    if  (replacementStack.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	91	None	add
217	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	101	None	replace
218	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.FUNCTION)  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	101	None	replace
219	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	101	None	replace
220	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	101	None	replace
221	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {	  if    (!removeConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
222	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(newName))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(newName))  {	  if    (!removeConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
223	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (!removeConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
224	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (!removeConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
225	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {	  if    (!removeConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
226	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {	  if    (!removeConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
227	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    timeout    	compilable	timeout	92	1	replace
228	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    timeout    	compilable	timeout	92	1	replace
229	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    timeout    	compilable	timeout	92	1	replace
230	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    timeout    	compilable	timeout	92	1	replace
231	[BUG]  [BUGGY]  if  (referencedNames.contains(newName)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.contains(newName)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.contains(newName)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    timeout    	non-compiled	[CE]  cannot  find  symbol  referencedNames	92	None	replace
232	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
233	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	16	None	add
234	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (!renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	16	None	add
235	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  If  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  If  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  ';'  expected	16	None	add
236	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	16	None	add
237	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!replacement.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!replacement.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (!replacement.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	16	None	add
238	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  parent.getString()))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  parent.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  parent.getString()))  {	  if    (!replaceConstIfReplaced(n.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
239	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n.getString(),  newName))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n.getString(),  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n.getString(),  newName))  {	  if    (!replaceConstIfReplaced(n.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
240	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  newName.getString()))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  newName.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  newName.getString()))  {	  if    (!replaceConstIfReplaced(n.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
241	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(newName.getString()))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(newName.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(newName.getString()))  {	  if    (!replaceConstIfReplaced(n.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
242	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  name.getString()))  {  [CE]  cannot  find  symbol  name  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  name.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  name.getString()))  {	  if    (!replaceConstIfReplaced(n.getString()))    {    	non-compiled	[CE]  cannot  find  symbol  name	175	None	replace
243	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  nameStack.peek()))  {  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  nameStack.peek()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  nameStack.peek()))  {	  if    (!replaceConstIfReplaced(n.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
244	[BUG]  [BUGGY]  if  (!replacementConstant  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replacementConstant  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementConstant  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementConstant  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstant    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacementConstant	59	None	replace
245	[BUG]  [BUGGY]  if  (!replaceConstant  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstant  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstant  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstant  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstant    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstant	59	None	replace
246	[BUG]  [BUGGY]  if  (!removeConstant  &&  renamer.stripConstantIfReplaced())  {  [CE]  cannot  find  symbol  removeConstant  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstant  &&  renamer.stripConstantIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstant  &&  renamer.stripConstantIfReplaced())  {	  if    (!removeConstant    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstant	59	None	replace
247	[BUG]  [BUGGY]  renamer.replaceChild(n,  newName);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.replaceChild(n,  newName);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.replaceChild(n,  newName);	  renamer.replaceChild(n,    parent);    	non-compiled	[CE]  orphaned  case	157	None	replace
248	[BUG]  [BUGGY]  renamer.replaceChild(n,  rootRenamer);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.replaceChild(n,  rootRenamer);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.replaceChild(n,  rootRenamer);	  renamer.replaceChild(n,    parent);    	non-compiled	[CE]  orphaned  case	157	None	replace
249	[BUG]  [BUGGY]  renamer.replaceChild(n,  parent,  newName);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.replaceChild(n,  parent,  newName);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.replaceChild(n,  parent,  newName);	  renamer.replaceChild(n,    parent);    	non-compiled	[CE]  orphaned  case	157	None	replace
250	[BUG]  [BUGGY]  renamer.replaceChild(n,  n);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.replaceChild(n,  n);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.replaceChild(n,  n);	  renamer.replaceChild(n,    parent);    	non-compiled	[CE]  orphaned  case	157	None	replace
251	[BUG]  [BUGGY]  if  (!replaceConstancy  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstancy  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstancy  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstancy  &&  renamer.stripConstIfReplaced())  {	  if    (!replaceConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstancy	56	None	replace
252	[BUG]  [BUGGY]  if  (!replaceConstANT  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstANT  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstANT  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstANT  &&  renamer.stripConstIfReplaced())  {	  if    (!replaceConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstANT	56	None	replace
253	[BUG]  [BUGGY]  if(!renamer.isConstant())  {  If  (!renamer.stripConstIfReplaced())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.isConstant())  {  If  (!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.isConstant())  {  If  (!renamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    If    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
254	[BUG]  [BUGGY]  if  (!rootRenamer.stripConstness())  {  If  (!rootRenamer.stripConstness())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.stripConstness())  {  If  (!rootRenamer.stripConstness())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.stripConstness())  {  If  (!rootRenamer.stripConstness())  {	  if    (!renamer.stripConstIfReplaced())    {    If    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
255	[BUG]  [BUGGY]  If  (!renamer.stripConstIfReplaced())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (!renamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    If    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
256	[BUG]  [BUGGY]  if  (!rootRenamer.stripConst())  {  If  (!rootRenamer.stripConstIfReplaced())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.stripConst())  {  If  (!rootRenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.stripConst())  {  If  (!rootRenamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    If    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
257	[BUG]  [BUGGY]  if(!renamer.stripConst())  {  If  (!renamer.stripConstIfReplaced())  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.stripConst())  {  If  (!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.stripConst())  {  If  (!renamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    If    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
258	[BUG]  [BUGGY]  if(!renamer.isConstant())  {  If  (!renamer.stripConstWhenReplaced())  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.isConstant())  {  If  (!renamer.stripConstWhenReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.isConstant())  {  If  (!renamer.stripConstWhenReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    If    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
259	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    n.getString().equals(   "prototype       "))    {    if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	114	None	add
260	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( ".prototype   "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( ".prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    n.getString().equals(   "prototype       "))    {    if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( ".prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	114	None	add
261	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals(   "prototype     "))  {  If  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals(   "prototype     "))  {  If  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    n.getString().equals(   "prototype       "))    {    If  (renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {	  timeout    	non-compiled	[CE]  	114	None	add
262	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( ",prototype   "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( ",prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    n.getString().equals(   "prototype       "))    {    if  (renamer.stripConstIfReplaced()  ||  n.getString().equals( ",prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	114	None	add
263	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    timeout    	compilable	timeout	122	1	replace
264	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    timeout    	compilable	timeout	122	1	replace
265	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&  renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&  renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&  renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
266	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
267	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&  renamer.equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&  renamer.equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&  renamer.equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
268	[BUG]  [BUGGY]  if  (ReferencedNames.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  ReferencedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (ReferencedNames.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (ReferencedNames.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (n.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  ReferencedNames	36	None	replace
269	[BUG]  [BUGGY]  if  (name.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (name.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (name.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (n.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  name	36	None	replace
270	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	25	None	add
271	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  ';'  expected	25	None	add
272	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	25	None	add
273	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!ramer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!ramer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (!ramer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	25	None	add
274	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!namer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!namer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (!namer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	25	None	add
275	[BUG]  [BUGGY]  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
276	[BUG]  [BUGGY]  If  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
277	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
278	[BUG]  [BUGGY]  If  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
279	[BUG]  [BUGGY]  if(!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
280	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	compilable	timeout	120	1	replace
281	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	compilable	timeout	120	1	replace
282	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	compilable	timeout	120	1	replace
283	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	compilable	timeout	120	1	replace
284	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  name.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  name.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  name.getString().equals( "prototype   "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol  name	120	None	replace
285	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	9	None	add
286	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  If  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  If  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    If  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  ';'  expected	9	None	add
287	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!replacement.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!replacement.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!replacement.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	9	None	add
288	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!ramer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!ramer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!ramer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	9	None	add
289	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	9	None	add
290	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n,  parent))  {	  if    (!removeConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	184	None	replace
291	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (!removeConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	184	None	replace
292	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(newName))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(newName))  {	  if    (!removeConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	184	None	replace
293	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if    (!removeConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	184	None	replace
294	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (!removeConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	184	None	replace
295	[BUG]  [BUGGY]  if  (parent.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {	  if    (newName.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
296	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  referencedNames  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (newName.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	148	None	replace
297	[BUG]  [BUGGY]  if  (replacement.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  replacement  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacement.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacement.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (newName.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  replacement	148	None	replace
298	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (newName.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
299	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(renamer,  rootRenamer))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(renamer,  rootRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(renamer,  rootRenamer))  {	  if    (!replaceConstIfReplaced(renamer))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
300	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(rootRenamer))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(rootRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(rootRenamer))  {	  if    (!replaceConstIfReplaced(renamer))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
301	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  newName.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  newName.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  newName.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
302	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||  n.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    timeout    	compilable	timeout	63	1	replace
303	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getType()  ==  Token.NAME)  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  n.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    timeout    	compilable	timeout	63	1	replace
304	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  rootRenamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  rootRenamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  rootRenamer.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
305	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	43	None	replace
306	[BUG]  [BUGGY]  if(!newName.isEmpty())  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!newName.isEmpty())  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!newName.isEmpty())  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	43	None	replace
307	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	43	None	replace
308	[BUG]  [BUGGY]  if  (names.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  names  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (names.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (names.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (references.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  names	131	None	replace
309	[BUG]  [BUGGY]  if  (nameStack.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (references.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
310	[BUG]  [BUGGY]  if  (referenceStack.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referenceStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referenceStack.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referenceStack.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (references.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referenceStack	131	None	replace
311	[BUG]  [BUGGY]  if  (!global  &&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  global  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!global  &&!replaceConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global  &&!replaceConstIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  global	173	None	replace
312	[BUG]  [BUGGY]  if  (!referencedNames.size()  &&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.size()  &&!replaceConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.size()  &&!replaceConstIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	173	None	replace
313	[BUG]  [BUGGY]  if  (!relativeConstants  &&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  relativeConstants  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!relativeConstants  &&!replaceConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!relativeConstants  &&!replaceConstIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  relativeConstants	173	None	replace
314	[BUG]  [BUGGY]  if  (!replaceConstancy  &&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstancy  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstancy  &&!replaceConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstancy  &&!replaceConstIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstancy	173	None	replace
315	[BUG]  [BUGGY]  if  (!removeConstants  &&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstants  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstants  &&!replaceConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstants  &&!replaceConstIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstants	173	None	replace
316	[BUG]  [BUGGY]  if  (!replaceConstantNumber  &&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstantNumber  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstantNumber  &&!replaceConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstantNumber  &&!replaceConstIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstantNumber	173	None	replace
317	[BUG]  [BUGGY]  if  (!replaceConstantNonConstants  &&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstantNonConstants  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstantNonConstants  &&!replaceConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstantNonConstants  &&!replaceConstIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstantNonConstants	173	None	replace
318	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_NEW_PROP,  newName);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.removeProp(Node.IS_NEW_PROP,  newName);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeProp(Node.IS_NEW_PROP,  newName);	  renamer.removeProp(Node.IS_NEW_PROP);    	non-compiled	[CE]  orphaned  case	160	None	replace
319	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
320	[BUG]  [BUGGY]  if  (n.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
321	[BUG]  [BUGGY]  if  (referenceStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  referenceStack  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referenceStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referenceStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  referenceStack	146	None	replace
322	[BUG]  [BUGGY]  if  (renamedNames.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  renamedNames  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	146	None	replace
323	[BUG]  [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  incomparable  types:  Renamer  and  int  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  incomparable  types:  Renamer  and  int	146	None	replace
324	[BUG]  [BUGGY]  if  (referencedNames.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  referencedNames  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	146	None	replace
325	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  newName.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    name.getString().equals(   "prototype       "))    {    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
326	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  nameUsage.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  nameUsage.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  nameUsage.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    name.getString().equals(   "prototype       "))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	123	None	replace
327	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  rootRenamer.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  rootRenamer.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  rootRenamer.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    name.getString().equals(   "prototype       "))    {    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
328	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  nameStack.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  nameStack.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  nameStack.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    name.getString().equals(   "prototype       "))    {    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
329	[BUG]  [BUGGY]  if(!replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	102	None	replace
330	[BUG]  [BUGGY]  if(replacementStack.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(replacementStack.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(replacementStack.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	102	None	replace
331	[BUG]  [BUGGY]  if  (replacementStack.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	102	None	replace
332	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	126	1	replace
333	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	126	1	replace
334	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	177	None	replace
335	[BUG]  [BUGGY]  if  (name.referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  package  name  does  not  exist  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (name.referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (name.referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  package  name  does  not  exist	177	None	replace
336	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.contains(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (nameStack.contains(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())    {    	compilable	timeout	177	1	replace
337	[BUG]  [BUGGY]  if  (nameStack.contains(newName)&&!renamer.stripConstIfReplaced())  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.contains(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.contains(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())    {    	compilable	timeout	177	1	replace
338	[BUG]  [BUGGY]  if  (nameUsage.contains(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  nameUsage  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameUsage.contains(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameUsage.contains(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	177	None	replace
339	[BUG]  [BUGGY]  if  (renamedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renamedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	177	None	replace
340	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (n.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
341	[BUG]  [BUGGY]  if  (parent.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (n.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
342	[BUG]  [BUGGY]  if  (t.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (t.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (t.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (n.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
343	[BUG]  [BUGGY]  renamer.removeChild(n);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.removeChild(n);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeChild(n);	  renamer.removeChild(parent);    	non-compiled	[CE]  orphaned  case	159	None	replace
344	[BUG]  [BUGGY]  renamer.removeChild(newName);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.removeChild(newName);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeChild(newName);	  renamer.removeChild(parent);    	non-compiled	[CE]  orphaned  case	159	None	replace
345	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  newName))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  newName))  {	  if    (renamer.stripConstIfReplaced(newName,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	111	None	replace
346	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(newName,  n,  parent))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(newName,  n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(newName,  n,  parent))  {	  if    (renamer.stripConstIfReplaced(newName,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	111	None	replace
347	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(newName,  n))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(newName,  n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(newName,  n))  {	  if    (renamer.stripConstIfReplaced(newName,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	111	None	replace
348	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(newName,  rootRenamer,  parent))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(newName,  rootRenamer,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(newName,  rootRenamer,  parent))  {	  if    (renamer.stripConstIfReplaced(newName,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	111	None	replace
349	[BUG]  [BUGGY]  if  (!global  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  global  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!global  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  global	171	None	replace
350	[BUG]  [BUGGY]  if  (!referencedNames.isEmpty()  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  referencedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.isEmpty()  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.isEmpty()  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	171	None	replace
351	[BUG]  [BUGGY]  if  (!replaceConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  replaceConstness  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstness	171	None	replace
352	[BUG]  [BUGGY]  if  (!replacementConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  replacementConstness  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  replacementConstness	171	None	replace
353	[BUG]  [BUGGY]  if  (!referencedNames.size()  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  referencedNames  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.size()  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.size()  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	171	None	replace
354	[BUG]  [BUGGY]  if  (!removeConstness  &&  parent.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  removeConstness  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  parent.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  parent.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	171	None	replace
355	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(parent,  n))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(parent,  n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(parent,  n))  {	  if    (renamer.stripConstIfReplaced(n))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	110	None	replace
356	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  rootRenamer))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  rootRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  rootRenamer))  {	  if    (renamer.stripConstIfReplaced(n))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	110	None	replace
357	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced(renamer))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced(renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced(renamer))  {	  if    (renamer.stripConstIfReplaced(n))    {    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
358	[BUG]  [BUGGY]  if  (!nameStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  bad  operand  type  Renamer  for  unary  operator  '!'  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!nameStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!nameStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  bad  operand  type  Renamer  for  unary  operator  '!'	137	None	replace
359	[BUG]  [BUGGY]  if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	137	None	replace
360	[BUG]  [BUGGY]  if  (!referenceStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  referenceStack  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referenceStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referenceStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  referenceStack	137	None	replace
361	[BUG]  [BUGGY]  if  (!renamedNames.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  renamedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamedNames.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamedNames.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	137	None	replace
362	[BUG]  [BUGGY]  if  (!rootRenamer.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
363	[BUG]  [BUGGY]  if  (!referenceStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  referenceStack  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referenceStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referenceStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  referenceStack	137	None	replace
364	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	10	1	replace
365	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	10	1	replace
366	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {  [CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;	10	None	replace
367	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	10	1	replace
368	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	10	1	replace
369	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isExpressionNode(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	10	1	replace
370	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isExpressionNode(n))  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isExpressionNode(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isExpressionNode(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	10	1	replace
371	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isAssignmentOp(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isAssignmentOp(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	10	1	replace
372	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isAssignmentOp(n))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isAssignmentOp(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isAssignmentOp(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	10	1	replace
373	[BUG]  [BUGGY]  if  (name.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (name.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (name.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (renamedNames.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  name	83	None	replace
374	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  newName))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  parent,  newName))  {	  if    (renamer.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	108	None	replace
375	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  nameUsage))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  nameUsage))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  parent,  nameUsage))  {	  if    (renamer.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	108	None	replace
376	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(t,  n,  parent))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(t,  n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(t,  n,  parent))  {	  if    (renamer.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	108	None	replace
377	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  nameStack))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  nameStack))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  parent,  nameStack))  {	  if    (renamer.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	108	None	replace
378	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  rootRenamer,  parent))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  rootRenamer,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  rootRenamer,  parent))  {	  if    (renamer.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	108	None	replace
379	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  rootRenamer))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  rootRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  parent,  rootRenamer))  {	  if    (renamer.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	108	None	replace
380	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
381	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(newName))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(newName))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
382	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
383	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
384	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
385	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
386	[BUG]  [BUGGY]  if  (!replacementConstants  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replacementConstants  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementConstants  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementConstants  &&  renamer.stripConstIfReplaced())  {	  if    (!replacementConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacementConstants	58	None	replace
387	[BUG]  [BUGGY]  if  (!replacementConstancy  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replacementConstancy  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementConstancy  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementConstancy  &&  renamer.stripConstIfReplaced())  {	  if    (!replacementConstness    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacementConstancy	58	None	replace
388	[BUG]  [BUGGY]  ContextualRenamer  t  =  renamer.getConstructor();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  ContextualRenamer  t  =  renamer.getConstructor();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	ContextualRenamer  t  =  renamer.getConstructor();	  ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  orphaned  case	5	None	replace
389	[BUG]  [BUGGY]  ContextualRenamer  t  =  parent.getConstructor();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  ContextualRenamer  t  =  parent.getConstructor();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	ContextualRenamer  t  =  parent.getConstructor();	  ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  orphaned  case	5	None	replace
390	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getReferencedNames();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  ContextualRenamer  t  =  n.getReferencedNames();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	ContextualRenamer  t  =  n.getReferencedNames();	  ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  orphaned  case	5	None	replace
391	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getReferenceName();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  ContextualRenamer  t  =  n.getReferenceName();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	ContextualRenamer  t  =  n.getReferenceName();	  ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  orphaned  case	5	None	replace
392	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getInitializingConstructor();  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  ContextualRenamer  t  =  n.getInitializingConstructor();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	ContextualRenamer  t  =  n.getInitializingConstructor();	  ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  orphaned  case	5	None	replace
393	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getNode();  [CE]  orphaned  case  [FE]                                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  ContextualRenamer  t  =  n.getNode();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	ContextualRenamer  t  =  n.getNode();	  ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  orphaned  case	5	None	replace
394	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
395	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(n))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
396	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunction(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunction(parent))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
397	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunction(parent))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunction(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunction(parent))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
398	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isName(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isName(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
399	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isName(n))  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isName(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isName(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
400	[BUG]  [BUGGY]  if  (!n.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!n.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!n.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
401	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()!=    Token.NAME)    {    	compilable	timeout	95	1	replace
402	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()!=    Token.NAME)    {    	compilable	timeout	95	1	replace
403	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()!=    Token.NAME)    {    	compilable	timeout	95	1	replace
404	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()!=    Token.NAME)    {    	compilable	timeout	95	1	replace
405	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    	compilable	timeout	127	1	replace
406	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    	compilable	timeout	127	1	replace
407	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    	compilable	timeout	127	1	replace
408	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    	compilable	timeout	127	1	replace
409	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(NodeUtil.isFunctionDeclaration(n)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    	compilable	timeout	127	1	replace
410	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(NodeUtil.isFunctionDeclaration(n)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    	compilable	timeout	127	1	replace
411	[BUG]  [BUGGY]  if(!referencedNames.contains(newName)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!referencedNames.contains(newName)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!referencedNames.contains(newName)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	127	None	replace
412	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(n,  parent,  newName))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(n,  parent,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(n,  parent,  newName))  {	  if    (renamer.stripConstIfReplaced(parent,    newName))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	144	None	replace
413	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n)&&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n)&&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n)&&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced(n))    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
414	[BUG]  [BUGGY]  if  (replaceConstIfReplaced(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replaceConstIfReplaced(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replaceConstIfReplaced(n,  parent))  {	  if    (!replaceConstIfReplaced(n))    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
415	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!newName.contains(referencedNames))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!newName.contains(referencedNames))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&!newName.contains(referencedNames))  {	  if    (newName.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	132	None	replace
416	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  rootRenamer  ==  null)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  rootRenamer  ==  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  rootRenamer  ==  null)  {	  if    (!replaceConstIfReplaced()    &&    renamer    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
417	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName  ==  null)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName  ==  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName  ==  null)  {	  if    (!replaceConstIfReplaced()    &&    renamer    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
418	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  ||  renamer  ==  null)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  ||  renamer  ==  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  ||  renamer  ==  null)  {	  if    (!replaceConstIfReplaced()    &&    renamer    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
419	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  parent  ==  null)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  parent  ==  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  parent  ==  null)  {	  if    (!replaceConstIfReplaced()    &&    renamer    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
420	[BUG]  [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.stripConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!newName.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
421	[BUG]  [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {	  if    (!newName.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
422	[BUG]  [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!newName.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
423	[BUG]  [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  renamer.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  renamer.isConstructor())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.stripConstIfReplaced()  &&  renamer.isConstructor())  {	  if    (!newName.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
424	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith(   "__   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "__   "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith(   "__   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "__   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "__   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	165	None	add
425	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith(   "__   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ".__   "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith(   "__   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ".__   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ".__   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	165	None	add
426	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith(   "__   "))  {  If  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "__   "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith(   "__   "))  {  If  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "__   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    If  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "__   "))  {	  timeout    	non-compiled	[CE]  	165	None	add
427	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith(   "__   "))  {  If  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ".__   "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith(   "__   "))  {  If  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ".__   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    If  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ".__   "))  {	  timeout    	non-compiled	[CE]  	165	None	add
428	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith(   "__   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ",__   "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith(   "__   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ",__   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ",__   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	165	None	add
429	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	119	None	add
430	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( ".prototype   "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( ".prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( ".prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	119	None	add
431	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  If  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  If  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    If  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {	  timeout    	non-compiled	[CE]  	119	None	add
432	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( ",prototype   "))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( ",prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( ",prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	119	None	add
433	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	27	None	add
434	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  If  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  If  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    If  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  ';'  expected	27	None	add
435	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  ||! "NodeUtil.isFunctionDeclaration(n))  {  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  ||! "NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripConstIfReplaced()  ||! "NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  unclosed  string  literal	27	None	add
436	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    if  (r.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	27	None	add
437	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	27	None	add
438	[BUG]  [BUGGY]  if  (name.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (name.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (name.stripConstIfReplaced()  &&!renamer.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  name	32	None	replace
439	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&!renamer.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
440	[BUG]  [BUGGY]  if  (nameStack.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.stripConstIfReplaced()  &&!renamer.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
441	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&!renamer.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
442	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  &&!referencedNames.contains(newName))  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
443	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  &&!referencedNames.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  &&!referencedNames.isEmpty())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  &&!referencedNames.isEmpty())  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
444	[BUG]  [BUGGY]  if  (!replaceConstness.stripConstness())  {  [CE]  cannot  find  symbol  replaceConstness  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstness.stripConstness())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstness.stripConstness())  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstness	168	None	replace
445	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  &&  n.getType()  ==  Token.FUNCTION)  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
446	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  &&  n.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  &&  n.getType()  ==  Token.NAME)  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
447	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  &&  parent.getType()  ==  Token.FUNCTION)  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
448	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeProp(Node.IS_CONSTANT_NAME,  newName);	  renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  orphaned  case	1	None	replace
449	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_PROP);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.removeProp(Node.IS_CONSTANT_PROP);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeProp(Node.IS_CONSTANT_PROP);	  renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  orphaned  case	1	None	replace
450	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	35	None	replace
451	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
452	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
453	[BUG]  [BUGGY]  if  (nameUsage.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameUsage.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameUsage.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	35	None	replace
454	[BUG]  [BUGGY]  if  (name.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (name.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (name.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  name	35	None	replace
455	[BUG]  [BUGGY]  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  r  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  r	103	None	replace
456	[BUG]  [BUGGY]  if(!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	103	None	replace
457	[BUG]  [BUGGY]  if(r.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  r  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(r.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(r.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  r	103	None	replace
458	[BUG]  [BUGGY]  if(!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	103	None	replace
459	[BUG]  [BUGGY]  if  (removeConstIfReplaced()  &&  renamer.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstIfReplaced()  &&  renamer.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstIfReplaced()  &&  renamer.getString().equals( "prototype   "))  {	  if    (removeConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
460	[BUG]  [BUGGY]  if  (removeConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {	  if    (removeConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
461	[BUG]  [BUGGY]  if  (removeConstIfReplaced()  &&  newName.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstIfReplaced()  &&  newName.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstIfReplaced()  &&  newName.getString().equals( "prototype   "))  {	  if    (removeConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
462	[BUG]  [BUGGY]  if  (removeConstIfReplaced()  &&  name.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstIfReplaced()  &&  name.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstIfReplaced()  &&  name.getString().equals( "prototype   "))  {	  if    (removeConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
463	[BUG]  [BUGGY]  if  (removeConstIfReplaced()  &&  newName.equals(n.getString()))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstIfReplaced()  &&  newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstIfReplaced()  &&  newName.equals(n.getString()))  {	  if    (removeConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
464	[BUG]  [BUGGY]  if  (!global  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  global  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!global  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  global	180	None	replace
465	[BUG]  [BUGGY]  if  (!replaceConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  replaceConstness  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstness	180	None	replace
466	[BUG]  [BUGGY]  if  (!referencedNames.contains(newName)&&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.contains(newName)&&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.contains(newName)&&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	180	None	replace
467	[BUG]  [BUGGY]  if  (!referencedNames.isEmpty()  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.isEmpty()  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.isEmpty()  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	180	None	replace
468	[BUG]  [BUGGY]  if  (!removeConstants  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  removeConstants  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstants  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstants  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstants	180	None	replace
469	[BUG]  [BUGGY]  if  (!renameConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  renameConstness  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  renameConstness	180	None	replace
470	[BUG]  [BUGGY]  if  (!rootRenamer.stripConstness())  {  if  (!replacement.stripConstness())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.stripConstness())  {  if  (!replacement.stripConstness())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.stripConstness())  {  if  (!replacement.stripConstness())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  orphaned  case	41	None	replace
471	[BUG]  [BUGGY]  if(!replacement.stripConstIfReplaced()  ||!replacement.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replacement  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!replacement.stripConstIfReplaced()  ||!replacement.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!replacement.stripConstIfReplaced()  ||!replacement.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacement	41	None	replace
472	[BUG]  [BUGGY]  if  (!replacement.isConstant())  {  [CE]  cannot  find  symbol  replacement  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacement.isConstant())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacement.isConstant())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacement	41	None	replace
473	[BUG]  [BUGGY]  if  (!replacement.stripConstant())  {  [CE]  cannot  find  symbol  replacement  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacement.stripConstant())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacement.stripConstant())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacement	41	None	replace
474	[BUG]  [BUGGY]  Node  nameUsage  =  renamer.getLastChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  nameUsage  =  renamer.getLastChild();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  nameUsage  =  renamer.getLastChild();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
475	[BUG]  [BUGGY]  Node  nameUsage  =  parent.getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  nameUsage  =  parent.getLastChild();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  nameUsage  =  parent.getLastChild();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
476	[BUG]  [BUGGY]  Node  newName  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  newName  =  n.getFirstChild();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  newName  =  n.getFirstChild();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
477	[BUG]  [BUGGY]  Node  nameUsage  =  renamer.getFirstChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  nameUsage  =  renamer.getFirstChild();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  nameUsage  =  renamer.getFirstChild();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
478	[BUG]  [BUGGY]  Node  nameUsage  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  nameUsage  =  parent.getFirstChild();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  nameUsage  =  parent.getFirstChild();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
479	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	66	None	add
480	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    if  (renamer.stripConstIfReplaced()  &&  n.getType()!=  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	66	None	add
481	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    If  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  ';'  expected	66	None	add
482	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getType()  >=  Token.NAME)  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getType()  >=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    if  (renamer.stripConstIfReplaced()  &&  n.getType()  >=  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	66	None	add
483	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    if  (!renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	66	None	add
484	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!newName.containsKey(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!newName.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&!newName.containsKey(newName))  {	  if    (newName.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	141	None	replace
485	[BUG]  [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)||!rootRenamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)||!rootRenamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)||!rootRenamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
486	[BUG]  [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)||!n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)||!n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)||!n.removeProp(Node.IS_CONSTANT_NAME);	  if    (!renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
487	[BUG]  [BUGGY]  if  (!removeConstness.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	11	None	replace
488	[BUG]  [BUGGY]  if  (!replacement.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  replacement  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacement.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacement.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  replacement	11	None	replace
489	[BUG]  [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)||!nameStack.peek().removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)||!nameStack.peek().removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)||!nameStack.peek().removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
490	[BUG]  [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME,  newName))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.removeProp(Node.IS_CONSTANT_NAME,  newName))  {	  if    (!renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
491	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	28	1	replace
492	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	28	1	replace
493	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
494	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	28	1	replace
495	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	28	1	replace
496	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	154	None	add
497	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  ';'  expected	154	None	add
498	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	154	None	add
499	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!ramer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!ramer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (!ramer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	154	None	add
500	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!namer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!namer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (!namer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	154	None	add
501	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    parent.getString().equals(   "prototype       "))    {    if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	117	None	add
502	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( ".prototype   "))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( ".prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    parent.getString().equals(   "prototype       "))    {    if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( ".prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	117	None	add
503	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals(   "prototype     "))  {  If  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals(   "prototype     "))  {  If  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    parent.getString().equals(   "prototype       "))    {    If  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( "prototype   "))  {	  timeout    	non-compiled	[CE]  	117	None	add
504	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( ",prototype   "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals(   "prototype     "))  {  if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( ",prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    parent.getString().equals(   "prototype       "))    {    if  (renamer.stripConstIfReplaced()  &&  parent.getString().equals( ",prototype   "))  {	  timeout    	non-compiled	[CE]  orphaned  case	117	None	add
505	[BUG]  [BUGGY]  if(!relativeIdSupplier.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  relativeIdSupplier  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!relativeIdSupplier.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!relativeIdSupplier.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!relativeIdSupplier.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  relativeIdSupplier	40	None	replace
506	[BUG]  [BUGGY]  if(!relativeIdSupplier.isConstant())  {  [CE]  cannot  find  symbol  relativeIdSupplier  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!relativeIdSupplier.isConstant())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!relativeIdSupplier.isConstant())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!relativeIdSupplier.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  relativeIdSupplier	40	None	replace
507	[BUG]  [BUGGY]  if(!relativeIdSupplier.stripConstant())  {  [CE]  cannot  find  symbol  relativeIdSupplier  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!relativeIdSupplier.stripConstant())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!relativeIdSupplier.stripConstant())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!relativeIdSupplier.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  relativeIdSupplier	40	None	replace
508	[BUG]  [BUGGY]  if  (!relativeIdSupplier.isConstructor())  {  [CE]  cannot  find  symbol  relativeIdSupplier  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!relativeIdSupplier.isConstructor())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!relativeIdSupplier.isConstructor())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!relativeIdSupplier.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  relativeIdSupplier	40	None	replace
509	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  renamer.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  renamer.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  renamer.getString().equals( "prototype "))  {	  if    (n.stripConstIfReplaced()    &&    renamer.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
510	[BUG]  [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&  renamer.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  renamedNames  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&  renamer.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.stripConstIfReplaced()  &&  renamer.getString().equals( "prototype   "))  {	  if    (n.stripConstIfReplaced()    &&    renamer.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	116	None	replace
511	[BUG]  [BUGGY]  if  (name.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (name.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (name.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  name	68	None	replace
512	[BUG]  [BUGGY]  if  (nameUsage.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameUsage.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameUsage.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	68	None	replace
513	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
514	[BUG]  [BUGGY]  if  (nameStack.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
515	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
516	[BUG]  [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced())  {  [CE]  incomparable  types:  Renamer  and  int  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced())  {	  if    (nameStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  incomparable  types:  Renamer  and  int	76	None	replace
517	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek().stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek().stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek().stripConstIfReplaced())  {	  if    (nameStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
518	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	134	None	replace
519	[BUG]  [BUGGY]  if(replacementStack.peek()  ||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(replacementStack.peek()  ||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(replacementStack.peek()  ||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	134	None	replace
520	[BUG]  [BUGGY]  if(!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	134	None	replace
521	[BUG]  [BUGGY]  if(replacementStack.peek()  ||  renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(replacementStack.peek()  ||  renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(replacementStack.peek()  ||  renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	134	None	replace
522	[BUG]  [BUGGY]  if  (renamer!=  null  &&  renamer.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer!=  null  &&  renamer.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer!=  null  &&  renamer.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (renamer.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
523	[BUG]  [BUGGY]  if  (renamer.peek()!=  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()!=  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()!=  Node.IS_CONSTANT_NAME)  {	  if    (renamer.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
524	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    newName.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
525	[BUG]  [BUGGY]  if  (stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    newName.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
526	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  referencedNames  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    newName.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	64	None	replace
527	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    newName.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
528	[BUG]  [BUGGY]  if  (name.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  name  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (name.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (name.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    newName.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  name	64	None	replace
529	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  name.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  name  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  name.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  name.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    newName.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  name	64	None	replace
530	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_PROP);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.removeProp(Node.IS_PROP);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeProp(Node.IS_PROP);	  renamer.removeProp(Node.IS_NAME);    	non-compiled	[CE]  orphaned  case	7	None	replace
531	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_CONSTRUCTOR_NAME);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.removeProp(Node.IS_CONSTRUCTOR_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeProp(Node.IS_CONSTRUCTOR_NAME);	  renamer.removeProp(Node.IS_NAME);    	non-compiled	[CE]  orphaned  case	7	None	replace
532	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    ||    NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
533	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    ||    NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
534	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n,  parent))  {	  if    (!replaceConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
535	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(newName))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(newName))  {	  if    (!replaceConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
536	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replaceConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
537	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (!replaceConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
538	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(renamer))  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(renamer))  {	  if    (!replaceConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
539	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  ||  newName!=  null)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  ||  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  ||  newName!=  null)  {	  if    (!replaceConstIfReplaced()    &&    newName!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
540	[BUG]  [BUGGY]  if  (replaceConstIfReplaced()  &&  newName!=  null)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replaceConstIfReplaced()  &&  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replaceConstIfReplaced()  &&  newName!=  null)  {	  if    (!replaceConstIfReplaced()    &&    newName!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
541	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  referencedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {	  if    (parent.stripConstIfReplaced()    &&    renamer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	147	None	replace
542	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (parent.stripConstIfReplaced()    &&    renamer.getType()    ==    Token.NAME)    {    	compilable	timeout	147	1	replace
543	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (parent.stripConstIfReplaced()    &&    renamer.getType()    ==    Token.NAME)    {    	compilable	timeout	147	1	replace
544	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_UNKNOWN,  newName);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.removeProp(Node.IS_UNKNOWN,  newName);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeProp(Node.IS_UNKNOWN,  newName);	  renamer.removeProp(Node.IS_UNKNOWN);    	non-compiled	[CE]  orphaned  case	6	None	replace
545	[BUG]  [BUGGY]  if  (stripConstIfReplaced(n,  renamer))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (stripConstIfReplaced(n,  renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced(n,  renamer))  {	  if    (stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
546	[BUG]  [BUGGY]  if  (stripConstIfReplaced(n,  parent,  newName))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (stripConstIfReplaced(n,  parent,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced(n,  parent,  newName))  {	  if    (stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
547	[BUG]  [BUGGY]  if  (stripConstIfReplaced(n,  newName))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (stripConstIfReplaced(n,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced(n,  newName))  {	  if    (stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
548	[BUG]  [BUGGY]  if  (stripConstIfReplaced(n,  parent)&&  renamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (stripConstIfReplaced(n,  parent)&&  renamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced(n,  parent)&&  renamer.removeProp(Node.IS_CONSTANT_NAME);	  if    (stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  ')'  expected	113	None	replace
549	[BUG]  [BUGGY]  if  (stripConstIfReplaced(newName,  parent))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (stripConstIfReplaced(newName,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced(newName,  parent))  {	  if    (stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
550	[BUG]  [BUGGY]  if  (!stripConstIfReplaced(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!stripConstIfReplaced(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!stripConstIfReplaced(n,  parent))  {	  if    (stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
551	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
552	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  newName.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  newName.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  newName.stripConstIfReplaced())  {	  if    (newName.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
553	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.stripConstIfReplaced())  {	  if    (newName.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
554	[BUG]  [BUGGY]  if  (renamedNames.contains(newName)||  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  renamedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.contains(newName)||  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.contains(newName)||  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (ramer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	191	None	replace
555	[BUG]  [BUGGY]  if  (referencedNames.contains(newName)||  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  referencedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.contains(newName)||  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.contains(newName)||  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (ramer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	191	None	replace
556	[BUG]  [BUGGY]  if  (renamedNames.contains(newName)&&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  renamedNames  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.contains(newName)&&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.contains(newName)&&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (ramer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	191	None	replace
557	[BUG]  [BUGGY]  if  (referencedNames.contains(newName)&&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  referencedNames  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.contains(newName)&&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.contains(newName)&&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (ramer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	191	None	replace
558	[BUG]  [BUGGY]  if  (!referencedNames.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (!renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	8	None	replace
559	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  ||!referencedNames.contains(newName))  {	  if    (!renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	8	None	replace
560	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {	  if    (!renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	8	None	replace
561	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(n,  parent,  rootRenamer))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(n,  parent,  rootRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(n,  parent,  rootRenamer))  {	  if    (renamer.stripConstIfReplaced(parent,    rootRenamer))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	143	None	replace
562	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  rootRenamer))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  rootRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(parent,  rootRenamer))  {	  if    (renamer.stripConstIfReplaced(parent,    rootRenamer))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	143	None	replace
563	[BUG]  [BUGGY]  if(!rootRenamer.stripConstIfReplaced())  {  if  (!rootRenamer.stripconstIfReplaced())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!rootRenamer.stripConstIfReplaced())  {  if  (!rootRenamer.stripconstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!rootRenamer.stripConstIfReplaced())  {  if  (!rootRenamer.stripconstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripconstIfReplaced())    {    	non-compiled	[CE]  orphaned  case	125	None	replace
564	[BUG]  [BUGGY]  if(newName!=  null)  {  if  (!renamer.stripConstIfReplaced())  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(newName!=  null)  {  if  (!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(newName!=  null)  {  if  (!renamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripconstIfReplaced())    {    	non-compiled	[CE]  orphaned  case	125	None	replace
565	[BUG]  [BUGGY]  if(!n.stripConstIfReplaced())  {  if  (!renamer.stripconstIfReplaced())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!n.stripConstIfReplaced())  {  if  (!renamer.stripconstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!n.stripConstIfReplaced())  {  if  (!renamer.stripconstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripconstIfReplaced())    {    	non-compiled	[CE]  orphaned  case	125	None	replace
566	[BUG]  [BUGGY]  if  (!rootRenamer.stripConstIfReplaced()  ||!rootRenamer.stripconstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.stripConstIfReplaced()  ||!rootRenamer.stripconstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.stripConstIfReplaced()  ||!rootRenamer.stripconstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripconstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
567	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  [CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n,  parent))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(Node,Node)	155	None	replace
568	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
569	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.mayHaveSideEffects(n))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
570	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
571	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
572	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(newName))  {  [CE]  no  suitable  method  found  for  mayHaveSideEffects(String)  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(newName))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	non-compiled	[CE]  no  suitable  method  found  for  mayHaveSideEffects(String)	155	None	replace
573	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
574	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
575	[BUG]  [BUGGY]  if  (referenceStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referenceStack  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referenceStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referenceStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced())  {	  if    (referenceStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referenceStack	78	None	replace
576	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(name,  newName))  {  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(name,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(name,  newName))  {	  if    (!renamer.stripConstIfReplaced(parent,    newName))    {    	non-compiled	[CE]  cannot  find  symbol  name	109	None	replace
577	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getString().endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  parent.getString().endsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
578	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getString().endsWith( "__ "))  {  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getString().endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  parent.getString().endsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
579	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  n.getString().endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  ||  n.getString().endsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
580	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  n.getString().endsWith( "__ "))  {  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||  n.getString().endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  ||  n.getString().endsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
581	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
582	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "__ "))  {  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
583	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  name.getString().endsWith( "__ "))  {  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  name.getString().endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  name.getString().endsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol  name	166	None	replace
584	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().startsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  n.getString().startsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
585	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().startsWith( "__ "))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().startsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  n.getString().startsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
586	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName.endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  newName.endsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
587	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName.endsWith( "__ "))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName.endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  newName.endsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
588	[BUG]  [BUGGY]  if  (!n.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!n.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!n.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
589	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced())  {	  if    (renamer.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
590	[BUG]  [BUGGY]  if  (referencedNames.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (relativeIdSupplier.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	185	None	replace
591	[BUG]  [BUGGY]  if  (name.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (name.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (name.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (relativeIdSupplier.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  name	185	None	replace
592	[BUG]  [BUGGY]  renamer.setString(getReplacementName(n.getString()));  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.setString(getReplacementName(n.getString()));  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.setString(getReplacementName(n.getString()));	  renamer.setString(newName);    	non-compiled	[CE]  orphaned  case	3	None	replace
593	[BUG]  [BUGGY]  renamer.setString(idPrefix);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.setString(idPrefix);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.setString(idPrefix);	  renamer.setString(newName);    	non-compiled	[CE]  orphaned  case	3	None	replace
594	[BUG]  [BUGGY]  if  (!rootRenamer.stripConstness())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.stripConstness())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.stripConstness())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!ramer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
595	[BUG]  [BUGGY]  if  (!rootRenamer.stripConst())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.stripConst())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.stripConst())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!ramer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
596	[BUG]  [BUGGY]  if  (!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.contains(newName))  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!ramer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	42	None	replace
597	[BUG]  [BUGGY]  if  (!rootRenamer.stripConstant())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.stripConstant())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.stripConstant())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!ramer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
598	[BUG]  [BUGGY]  if  (!rootRenamer.isConstant())  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.isConstant())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.isConstant())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!ramer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
599	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	87	None	add
600	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  If  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  If  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    NodeUtil.isFunctionDeclaration(n))    {    If  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  ';'  expected	87	None	add
601	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    NodeUtil.isFunctionDeclaration(n))    {    if  (!renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	87	None	add
602	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    NodeUtil.isFunctionDeclaration(n))    {    if  (replacementStack.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	87	None	add
603	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    NodeUtil.isFunctionDeclaration(n))    {    if  (r.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	87	None	add
604	[BUG]  [BUGGY]  if(!replacementStack.peek()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!replacementStack.peek()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!replacementStack.peek()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.peek()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	170	None	replace
605	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.peek()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	170	None	replace
606	[BUG]  [BUGGY]  if  (replacementStack.peek()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  ||!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.peek()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	170	None	replace
607	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.peek()  &&!NodeUtil.  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.peek()  &&!NodeUtil.  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (replacementStack.peek()  &&!NodeUtil.	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.peek()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ')'  expected	170	None	replace
608	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  ||!newName.equals(n.getString()))  {	  if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    timeout    	compilable	timeout	13	1	replace
609	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||!newName.equals(n.getString()))  {  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  ||!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  ||!newName.equals(n.getString()))  {	  if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    timeout    	compilable	timeout	13	1	replace
610	[BUG]  [BUGGY]  if  (!replacement.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [CE]  cannot  find  symbol  replacement  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacement.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacement.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {	  if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    timeout    	non-compiled	[CE]  cannot  find  symbol  replacement	13	None	replace
611	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&!newName.equals(n.getString()))  {	  if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    timeout    	compilable	timeout	13	1	replace
612	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&!newName.equals(n.getString()))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&!newName.equals(n.getString()))  {	  if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    timeout    	compilable	timeout	13	1	replace
613	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString())||  newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString())||  newName.equals(n.getString()))  {	  if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    timeout    	compilable	timeout	13	1	replace
614	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString())||  newName.equals(n.getString()))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString())||  newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString())||  newName.equals(n.getString()))  {	  if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    timeout    	compilable	timeout	13	1	replace
615	[BUG]  [BUGGY]  if  (!n.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!n.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!n.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {	  if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
616	[BUG]  [BUGGY]  if  (!replaceConstants.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstants  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstants.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstants.stripConstIfReplaced())  {	  if    (!renameConstness.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstants	23	None	replace
617	[BUG]  [BUGGY]  if  (!renameConstants.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renameConstants  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstants.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstants.stripConstIfReplaced())  {	  if    (!renameConstness.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renameConstants	23	None	replace
618	[BUG]  [BUGGY]  if  (!replaceConst.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConst  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConst.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConst.stripConstIfReplaced())  {	  if    (!renameConstness.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConst	23	None	replace
619	[BUG]  [BUGGY]  if  (!renameConst.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renameConst  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConst.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConst.stripConstIfReplaced())  {	  if    (!renameConstness.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renameConst	23	None	replace
620	[BUG]  [BUGGY]  if  (!renameConstant.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renameConstant  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstant.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstant.stripConstIfReplaced())  {	  if    (!renameConstness.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renameConstant	23	None	replace
621	[BUG]  [BUGGY]  if  (!renamedNames.contains(newName))  {  [CE]  cannot  find  symbol  renamedNames  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamedNames.contains(newName))  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!rerenamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	124	None	replace
622	[BUG]  [BUGGY]  if(!renamedNames.contains(newName)||!rerenamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renamedNames  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamedNames.contains(newName)||!rerenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamedNames.contains(newName)||!rerenamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!rerenamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	124	None	replace
623	[BUG]  [BUGGY]  if(!renamedNames.contains(newName)&&!rerenamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renamedNames  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamedNames.contains(newName)&&!rerenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamedNames.contains(newName)&&!rerenamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!rerenamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	124	None	replace
624	[BUG]  [BUGGY]  if(!rootRenamer.stripConstIfReplaced())  {  if  (!rerenamer.stripConstIfReplaced())  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!rootRenamer.stripConstIfReplaced())  {  if  (!rerenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!rootRenamer.stripConstIfReplaced())  {  if  (!rerenamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!rerenamer.stripConstIfReplaced())    {    	non-compiled	[CE]  orphaned  case	124	None	replace
625	[BUG]  [BUGGY]  if  (!relativeConstants.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  relativeConstants  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!relativeConstants.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!relativeConstants.stripConstIfReplaced())  {	  if    (!removeConstness.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  relativeConstants	149	None	replace
626	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  renamer);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  renamer);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  renamer);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	182	None	replace
627	[BUG]  [BUGGY]  n.removeProp(Node.IS_NEW_PROP);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  n.removeProp(Node.IS_NEW_PROP);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.removeProp(Node.IS_NEW_PROP);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	182	None	replace
628	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.removeProp(Node.IS_UNKNOWN_PROP);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	182	None	replace
629	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  n.removeProp(Node.IS_UNKNOWN);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.removeProp(Node.IS_UNKNOWN);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	182	None	replace
630	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.FUNCTION)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	135	None	replace
631	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripconstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripconstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripconstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	135	None	replace
632	[BUG]  [BUGGY]  Node  nameUsage  =  n.getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  nameUsage  =  n.getNext();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  nameUsage  =  n.getNext();	  Node    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
633	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  newName))  {  [CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  newName))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n,    parent))    {    	non-compiled	[CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;	93	None	replace
634	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n,  parent))  {  [CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n,  parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n,    parent))    {    	non-compiled	[CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;	93	None	replace
635	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer,  parent))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer,  parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
636	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  nameStack))  {  [CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  nameStack))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  nameStack))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n,    parent))    {    	non-compiled	[CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;	93	None	replace
637	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  nameUsage))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  nameUsage))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  nameUsage))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	93	None	replace
638	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  nameNode))  {  [CE]  cannot  find  symbol  nameNode  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  nameNode))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  nameNode))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  nameNode	93	None	replace
639	[BUG]  [BUGGY]  if  (!nameStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  bad  operand  type  Renamer  for  unary  operator  '!'  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!nameStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!nameStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  bad  operand  type  Renamer  for  unary  operator  '!'	151	None	replace
640	[BUG]  [BUGGY]  if  (!renamedNames.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  renamedNames  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamedNames.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamedNames.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	151	None	replace
641	[BUG]  [BUGGY]  if  (!referenceStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  referenceStack  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referenceStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referenceStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  referenceStack	151	None	replace
642	[BUG]  [BUGGY]  if  (!rootRenamer.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
643	[BUG]  [BUGGY]  if  (!relativeIdSupplier.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  relativeIdSupplier  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!relativeIdSupplier.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!relativeIdSupplier.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  relativeIdSupplier	151	None	replace
644	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced(n,  newName))  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	112	None	replace
645	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  renamer))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced(n,  renamer))  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	112	None	replace
646	[BUG]  [BUGGY]  if  (nameUsage.stripConstIfReplaced(n,  parent))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameUsage.stripConstIfReplaced(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameUsage.stripConstIfReplaced(n,  parent))  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	112	None	replace
647	[BUG]  [BUGGY]  if  (renamedNames.stripConstIfReplaced(n,  newName))  {  [CE]  cannot  find  symbol  renamedNames  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.stripConstIfReplaced(n,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.stripConstIfReplaced(n,  newName))  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	112	None	replace
648	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent,  newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced(n,  parent,  newName))  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	112	None	replace
649	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent)||  referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent)||  referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced(n,  parent)||  referencedNames.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	112	None	replace
650	[BUG]  [BUGGY]  if(!removeConstness  ||  renamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  ||  renamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  ||  renamer.removeProp(Node.IS_CONSTANT_NAME);	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  ')'  expected	181	None	replace
651	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName);	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  ')'  expected	181	None	replace
652	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME));  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME));	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  orphaned  case	181	None	replace
653	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName));  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName));	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  orphaned  case	181	None	replace
654	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
655	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.FUNCTION)  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
656	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
657	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
658	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	18	None	add
659	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  If  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  If  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    If  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {	  timeout    	non-compiled	[CE]  ';'  expected	18	None	add
660	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  if  (!replacement.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  if  (!replacement.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    if  (!replacement.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	18	None	add
661	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  if  (!ramer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  if  (!ramer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    if  (!ramer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	18	None	add
662	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  orphaned  case	136	None	replace
663	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  orphaned  case	136	None	replace
664	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(parent))    {    	compilable	timeout	136	1	replace
665	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(parent))    {    	compilable	timeout	136	1	replace
666	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(parent))    {    	compilable	timeout	136	1	replace
667	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(parent))    {    	compilable	timeout	136	1	replace
668	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {	  timeout    	non-compiled	[CE]  orphaned  case	14	None	add
669	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  If  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  If  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    If  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {	  timeout    	non-compiled	[CE]  ';'  expected	14	None	add
670	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  if  (!renamer.stripConstIfReplaced()  &&  newName  ==  null)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  if  (!renamer.stripConstIfReplaced()  &&  newName  ==  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    if  (!renamer.stripConstIfReplaced()  &&  newName  ==  null)  {	  timeout    	non-compiled	[CE]  orphaned  case	14	None	add
671	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  if  (!renamer.stripConstIfReplaced()  &&  newName  >=  null)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  if  (!renamer.stripConstIfReplaced()  &&  newName  >=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    if  (!renamer.stripConstIfReplaced()  &&  newName  >=  null)  {	  timeout    	non-compiled	[CE]  orphaned  case	14	None	add
672	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  if  (!renamer.stripConstIfReplaced()  &&  newName  >>  null)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  if  (!renamer.stripConstIfReplaced()  &&  newName  >>  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    if  (!renamer.stripConstIfReplaced()  &&  newName  >>  null)  {	  timeout    	non-compiled	[CE]  orphaned  case	14	None	add
673	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  if  (!ramer.stripConstIfReplaced()  &&  newName!=  null)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  if  (!ramer.stripConstIfReplaced()  &&  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    if  (!ramer.stripConstIfReplaced()  &&  newName!=  null)  {	  timeout    	non-compiled	[CE]  orphaned  case	14	None	add
674	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||  parent.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getString().equals(   "prototype       "))    {    timeout    	compilable	timeout	118	1	replace
675	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getString().equals( "prototype   "))  {  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  parent.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getString().equals(   "prototype       "))    {    timeout    	compilable	timeout	118	1	replace
676	[BUG]  [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  incomparable  types:  Renamer  and  int  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (nameStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  incomparable  types:  Renamer  and  int	85	None	replace
677	[BUG]  [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()!=  Node.IS_CONSTANT_NAME)  {  [CE]  incomparable  types:  Renamer  and  int  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()!=  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()!=  Node.IS_CONSTANT_NAME)  {	  if    (nameStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  incomparable  types:  Renamer  and  int	85	None	replace
678	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName.equals(n.getString()))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName.equals(n.getString()))  {	  if    (!replaceConstIfReplaced()    &&    newName.equals(renamer.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
679	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  name.equals(renamer.getString()))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  name.equals(renamer.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  name.equals(renamer.getString()))  {	  if    (!replaceConstIfReplaced()    &&    newName.equals(renamer.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
680	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  parent.equals(renamer.getString()))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  parent.equals(renamer.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  parent.equals(renamer.getString()))  {	  if    (!replaceConstIfReplaced()    &&    newName.equals(renamer.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
681	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  rootRenamer.equals(renamer.getString()))  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  rootRenamer.equals(renamer.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  rootRenamer.equals(renamer.getString()))  {	  if    (!replaceConstIfReplaced()    &&    newName.equals(renamer.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
682	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.getString().equals(newName.getString()))  {  [CE]  cannot  find  symbol  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.getString().equals(newName.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.getString().equals(newName.getString()))  {	  if    (!replaceConstIfReplaced()    &&    newName.equals(renamer.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
683	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  ||  newName.equals(renamer.getString()))  {  [CE]  cannot  find  symbol  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  ||  newName.equals(renamer.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  ||  newName.equals(renamer.getString()))  {	  if    (!replaceConstIfReplaced()    &&    newName.equals(renamer.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
684	[BUG]  [BUGGY]  If  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	100	None	replace
685	[BUG]  [BUGGY]  If  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	100	None	replace
686	[BUG]  [BUGGY]  If  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	100	None	replace
687	[BUG]  [BUGGY]  if(!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  If  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  If  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  If  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	100	None	replace
688	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  ||!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced()  ||!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  ||!referencedNames.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	33	None	replace
689	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  nodeUtil  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    nodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  nodeUtil	128	None	replace
690	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    nodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	128	None	replace
691	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  nodeUtil  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)&&  renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(NodeUtil.isFunctionDeclaration(n)&&  renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    nodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  nodeUtil	128	None	replace
692	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	62	None	add
693	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    if  (renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	62	None	add
694	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    If  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  ';'  expected	62	None	add
695	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  >=  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  >=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    if  (renamer.stripConstIfReplaced()  ||  parent.getType()  >=  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	62	None	add
696	[BUG]  [BUGGY]  if  (!renamedNames.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  renamedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamedNames.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamedNames.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacement.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	156	None	replace
697	[BUG]  [BUGGY]  if  (!name.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  name  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!name.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!name.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacement.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  name	156	None	replace
698	[BUG]  [BUGGY]  if  (!nameUsage.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!nameUsage.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!nameUsage.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacement.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	156	None	replace
699	[BUG]  [BUGGY]  if  (!newName.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacement.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
700	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!nameUsage.containsKey(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced()  &&!nameUsage.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced()  &&!nameUsage.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	72	None	replace
701	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&!nameUsage.containsKey(newName))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&!nameUsage.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&!nameUsage.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
702	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&!nameUsage.containsKey(newName))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&!nameUsage.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&!nameUsage.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
703	[BUG]  [BUGGY]  if  (!nameUsage.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!nameUsage.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!nameUsage.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	72	None	replace
704	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n),  rootRenamer)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n),  rootRenamer)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n),  rootRenamer)  {	  if    (renamer.stripConstIfReplaced(n),    parent)    {    	non-compiled	[CE]  ')'  expected	183	None	replace
705	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n),  newName)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n),  newName)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n),  newName)  {	  if    (renamer.stripConstIfReplaced(n),    parent)    {    	non-compiled	[CE]  ')'  expected	183	None	replace
706	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent)||  newName!=  null)  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent)||  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  parent)||  newName!=  null)  {	  if    (renamer.stripConstIfReplaced(n),    parent)    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	183	None	replace
707	[BUG]  [BUGGY]  if(replacementStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(replacementStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(replacementStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  orphaned  case	136	None	replace
708	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	136	None	replace
709	[BUG]  [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  orphaned  case	136	None	replace
710	[BUG]  [BUGGY]  if  (ramer.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  ramer  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (ramer.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (ramer.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (relativeIdSupplier.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol  ramer	84	None	replace
711	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(newName,  rootRenamer))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(newName,  rootRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(newName,  rootRenamer))  {	  if    (renamer.stripConstIfReplaced(newName,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	111	None	replace
712	[BUG]  [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [CE]  cannot  find  symbol  renamedNames  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	68	None	replace
713	[BUG]  [BUGGY]  if  (replacementStack.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	68	None	replace
714	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&!renamer.containsKey(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
715	[BUG]  [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)||  global)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)||  global)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)||  global)  {	  if    (!renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
716	[BUG]  [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME),  global)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME),  global)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.removeProp(Node.IS_CONSTANT_NAME),  global)  {	  if    (!renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
717	[BUG]  [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)&&  n.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)&&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)&&  n.getType()  ==  Token.FUNCTION)  {	  if    (!renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
718	[BUG]  [BUGGY]  if  (stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(renamer))    {    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
719	[BUG]  [BUGGY]  if  (!replacement.isConst())  {  [CE]  cannot  find  symbol  replacement  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacement.isConst())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacement.isConst())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacement	41	None	replace
720	[BUG]  [BUGGY]  if  (!replacement.isConstructor())  {  [CE]  cannot  find  symbol  replacement  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacement.isConstructor())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacement.isConstructor())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacement	41	None	replace
721	[BUG]  [BUGGY]  if  (references.stripConstIfReplaced()  &&!references.contains(newName))  {  [CE]  cannot  find  symbol  references  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (references.stripConstIfReplaced()  &&!references.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (references.stripConstIfReplaced()  &&!references.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  references	33	None	replace
722	[BUG]  [BUGGY]  if  (!renameConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
723	[BUG]  [BUGGY]  if  (!renameConstIfReplaced()  &&  newName!=  null)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced()  &&  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced()  &&  newName!=  null)  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
724	[BUG]  [BUGGY]  if  (!renameConstIfReplaced()  &&  renamer  ==  null)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced()  &&  renamer  ==  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced()  &&  renamer  ==  null)  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
725	[BUG]  [BUGGY]  if  (!renameConstIfReplaced()  &&  parent!=  null)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced()  &&  parent!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced()  &&  parent!=  null)  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
726	[BUG]  [BUGGY]  if(relativeIdSupplier!=  null)  {  [CE]  cannot  find  symbol  relativeIdSupplier  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(relativeIdSupplier!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(relativeIdSupplier!=  null)  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!relativeIdSupplier.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  relativeIdSupplier	40	None	replace
727	[BUG]  [BUGGY]  if(!relativeIdSupplier.isConst())  {  [CE]  cannot  find  symbol  relativeIdSupplier  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!relativeIdSupplier.isConst())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!relativeIdSupplier.isConst())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!relativeIdSupplier.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  relativeIdSupplier	40	None	replace
728	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(. "prototype   "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(   "prototype   "))  {  if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(. "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    if  (!renamer.stripConstIfReplaced()  &&  n.getString().equals(. "prototype   "))  {	  timeout    	non-compiled	[CE]  illegal  start  of  expression	119	None	add
729	[BUG]  [BUGGY]  if(!replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	102	None	replace
730	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	169	None	replace
731	[BUG]  [BUGGY]  if  (!removeConstant  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  removeConstant  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstant  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstant  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstant	169	None	replace
732	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  newName.getString().equals( "prototype   "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
733	[BUG]  [BUGGY]  if  (!renamingStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  renamingStack  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamingStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamingStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  renamingStack	137	None	replace
734	[BUG]  [BUGGY]  Node  nameUsage  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  nameUsage  =  n.removeFirstChild();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  nameUsage  =  n.removeFirstChild();	  Node    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
735	[BUG]  [BUGGY]  Node  nameUsage  =  n.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  nameUsage  =  n.getFirstChild().getNext();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  nameUsage  =  n.getFirstChild().getNext();	  Node    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
736	[BUG]  [BUGGY]  if  (renamer!=  null  &&  renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer!=  null  &&  renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer!=  null  &&  renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (renamer.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
737	[BUG]  [BUGGY]  if  (renamer!=  null  ||  renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer!=  null  ||  renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer!=  null  ||  renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (renamer.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
738	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  rootRenamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  rootRenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  rootRenamer.stripConstIfReplaced())  {	  if    (renamer.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
739	[BUG]  [BUGGY]  if  (!global  &&  renamer.replaceChild(n,  parent))  {  [CE]  cannot  find  symbol  global  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!global  &&  renamer.replaceChild(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global  &&  renamer.replaceChild(n,  parent))  {	  if    (!global    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  global	55	None	replace
740	[BUG]  [BUGGY]  if  (!global  &&  renamer.removeConstIfReplaced())  {  [CE]  cannot  find  symbol  global  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!global  &&  renamer.removeConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global  &&  renamer.removeConstIfReplaced())  {	  if    (!global    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  global	55	None	replace
741	[BUG]  [BUGGY]  if  (!global  &&  renamer.isConstIfReplaced())  {  [CE]  cannot  find  symbol  global  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!global  &&  renamer.isConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global  &&  renamer.isConstIfReplaced())  {	  if    (!global    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  global	55	None	replace
742	[BUG]  [BUGGY]  if  (rootRenamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (rootRenamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (rootRenamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (renameStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
743	[BUG]  [BUGGY]  if  (!replaceAllConstants  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceAllConstants  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceAllConstants  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceAllConstants  &&  renamer.stripConstIfReplaced())  {	  if    (!replaceConstants    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceAllConstants	61	None	replace
744	[BUG]  [BUGGY]  if  (!nameUsage  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  nameUsage  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!nameUsage  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!nameUsage  &&  renamer.stripConstIfReplaced())  {	  if    (!replaceConstants    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	61	None	replace
745	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.FUNCTION)  {	  if    (!removeConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
746	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.NAME)  {	  if    (!removeConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
747	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.removeProp(Node.IS_FUNCTION_NAME);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	182	None	replace
748	[BUG]  [BUGGY]  n.removeProp(Node.IS_NAME);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  n.removeProp(Node.IS_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.removeProp(Node.IS_NAME);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	182	None	replace
749	[BUG]  [BUGGY]  n.removeProp(Node.IS_NEW_NAME);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  n.removeProp(Node.IS_NEW_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.removeProp(Node.IS_NEW_NAME);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	182	None	replace
750	[BUG]  [BUGGY]  if  (parent.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (relativeIdSupplier.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
751	[BUG]  [BUGGY]  if(replacementStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(replacementStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(replacementStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	135	None	replace
752	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	135	None	replace
753	[BUG]  [BUGGY]  if(!replacementStack.peek())  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!replacementStack.peek())  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!replacementStack.peek())  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	135	None	replace
754	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    if  (renamer.stripconstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	66	None	add
755	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  if  (replacementStack.peek()  &&  n.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  if  (replacementStack.peek()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    if  (replacementStack.peek()  &&  n.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	66	None	add
756	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (renamer.stripconstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (renamer.stripconstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (renamer.stripconstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	152	None	add
757	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (replacementStack.peek()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (replacementStack.peek()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (replacementStack.peek()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	152	None	add
758	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	152	None	add
759	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	98	None	replace
760	[BUG]  [BUGGY]  if  (parent!=  null)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent!=  null)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent!=  null)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	98	None	replace
761	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	98	None	replace
762	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  if  (!renamer.stripConstIfReplaced()  &&! "newName.equals(n.getString()))  {  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  if  (!renamer.stripConstIfReplaced()  &&! "newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    if  (!renamer.stripConstIfReplaced()  &&! "newName.equals(n.getString()))  {	  timeout    	non-compiled	[CE]  unclosed  string  literal	12	None	add
763	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!rootRenamer.containsKey(newName))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!rootRenamer.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&!rootRenamer.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
764	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&!nameUsage.containsKey(newName))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&!nameUsage.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&!nameUsage.containsKey(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	72	None	replace
765	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent.getType()  ==  Token.NAME)  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
766	[BUG]  [BUGGY]  if  (replacement.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  replacement  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacement.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacement.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    newName.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  replacement	64	None	replace
767	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  null))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  null))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  parent,  null))  {	  if    (renamer.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	108	None	replace
768	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  name))  {  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  name))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  parent,  name))  {	  if    (renamer.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  name	108	None	replace
769	[BUG]  [BUGGY]  if  (!rootRenamer.replaceChild(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.replaceChild(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.replaceChild(n,  parent))  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!ramer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
770	[BUG]  [BUGGY]  if  (!rootRenamer.isConst())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.isConst())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.isConst())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!ramer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
771	[BUG]  [BUGGY]  renamer.removeProp(Node.IS_NAME,  newName);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.removeProp(Node.IS_NAME,  newName);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.removeProp(Node.IS_NAME,  newName);	  renamer.removeProp(Node.IS_NAME);    	non-compiled	[CE]  orphaned  case	7	None	replace
772	[BUG]  [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [CE]  cannot  find  symbol  renamedNames  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.stripConstIfReplaced()  &&!renamer.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	32	None	replace
773	[BUG]  [BUGGY]  if  (replacementStack.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.stripConstIfReplaced()  &&!renamer.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	32	None	replace
774	[BUG]  [BUGGY]  if  (replacement.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [CE]  cannot  find  symbol  replacement  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacement.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacement.stripConstIfReplaced()  &&!renamer.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  replacement	32	None	replace
775	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!renamer.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&!renamer.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
776	[BUG]  [BUGGY]  if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  replacement  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol  replacement	155	None	replace
777	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(parent))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
778	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(parent))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(parent))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
779	[BUG]  [BUGGY]  if  (!global  &&  renamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!global  &&  renamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global  &&  renamer.removeProp(Node.IS_CONSTANT_NAME);	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  ')'  expected	181	None	replace
780	[BUG]  [BUGGY]  if  (!removeConstness  &&  rootRenamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  rootRenamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  rootRenamer.removeProp(Node.IS_CONSTANT_NAME);	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  ')'  expected	181	None	replace
781	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.hasProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.hasProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.hasProp(Node.IS_CONSTANT_NAME);	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  ')'  expected	181	None	replace
782	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.containsKey(newName))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.containsKey(newName))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  removeConstness	181	None	replace
783	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.hasProp(Node.IS_CONSTANT_PROP));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.hasProp(Node.IS_CONSTANT_PROP));  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.hasProp(Node.IS_CONSTANT_PROP));	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  orphaned  case	181	None	replace
784	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  removeConstness  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  cannot  find  symbol  removeConstness	181	None	replace
785	[BUG]  [BUGGY]  if  (!newName.isEmpty())  {  If  (!renamer.stripConstIfReplaced())  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.isEmpty())  {  If  (!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.isEmpty())  {  If  (!renamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    If    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
786	[BUG]  [BUGGY]  if  (!rootRenamer.stripConstIfReplaced())  {  If  (!renamer.stripConstIfReplaced())  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.stripConstIfReplaced())  {  If  (!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.stripConstIfReplaced())  {  If  (!renamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    If    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
787	[BUG]  [BUGGY]  if  (!rootRenamer.stripConstIfReplaced())  {  If  (!rootRenamer.stripConstIfReplaced())  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer.stripConstIfReplaced())  {  If  (!rootRenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer.stripConstIfReplaced())  {  If  (!rootRenamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    If    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
788	[BUG]  [BUGGY]  if  (!newName.isEmpty())  {  If  (!renamer.stripConstWhenReplaced())  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.isEmpty())  {  If  (!renamer.stripConstWhenReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.isEmpty())  {  If  (!renamer.stripConstWhenReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    If    (!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  ';'  expected	39	None	replace
789	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  n!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
790	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n!=  null)  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  n!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
791	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  name!=  null)  {  [CE]  cannot  find  symbol  name  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  name!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  name!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	non-compiled	[CE]  cannot  find  symbol  name	15	None	replace
792	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n  ==  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  n  ==  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
793	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n  ==  null)  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n  ==  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  n  ==  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
794	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripconstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripconstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!renamer.stripconstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	9	None	add
795	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	9	None	add
796	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!renamedNames.contains(newName))  {  [CE]  cannot  find  symbol  renamedNames  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!renamedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!renamedNames.contains(newName))  {	  if    (!renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	8	None	replace
797	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!rootRenamer.contains(newName))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!rootRenamer.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!rootRenamer.contains(newName))  {	  if    (!renamer.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
798	[BUG]  [BUGGY]  if  (renamer  ==  null  &&  renamer.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer  ==  null  &&  renamer.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer  ==  null  &&  renamer.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (renamer.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
799	[BUG]  [BUGGY]  if  (renamer!=  null  ||  renamer.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer!=  null  ||  renamer.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer!=  null  ||  renamer.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (renamer.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
800	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.isEmpty())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!newName.isEmpty())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripconstIfReplaced())    {    	compilable	timeout	125	1	replace
801	[BUG]  [BUGGY]  if  (!newName.isEmpty())  {  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.isEmpty())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.isEmpty())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripconstIfReplaced())    {    	compilable	timeout	125	1	replace
802	[BUG]  [BUGGY]  if(!renamer.isConstant())  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.isConstant())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.isConstant())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripconstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
803	[BUG]  [BUGGY]  if  (nameStack.peek()!=  Node.IS_CONSTANT_NAME)  {  [CE]  incomparable  types:  Renamer  and  int  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.peek()!=  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.peek()!=  Node.IS_CONSTANT_NAME)  {	  if    (nameStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  incomparable  types:  Renamer  and  int	85	None	replace
804	[BUG]  [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameUsage.equals(n.getString()))  {  [CE]  incomparable  types:  Renamer  and  int  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameUsage.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (nameStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameUsage.equals(n.getString()))  {	  if    (nameStack.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  incomparable  types:  Renamer  and  int	85	None	replace
805	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (renamer.stripconstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (renamer.stripconstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    if  (renamer.stripconstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	91	None	add
806	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    if  (renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	91	None	add
807	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  parent)&&  renamer!=  null)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  parent)&&  renamer!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  parent)&&  renamer!=  null)  {	  if    (!replaceConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
808	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  parent,  renamer))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  parent,  renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  parent,  renamer))  {	  if    (!replaceConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
809	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  parent)&&  newName!=  null)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  parent)&&  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  parent)&&  newName!=  null)  {	  if    (!replaceConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
810	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	134	None	replace
811	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  newName,  null))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  newName,  null))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(parent,  newName,  null))  {	  if    (!renamer.stripConstIfReplaced(parent,    newName))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	109	None	replace
812	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  newName,  nameUsage))  {  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  newName,  nameUsage))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(parent,  newName,  nameUsage))  {	  if    (!renamer.stripConstIfReplaced(parent,    newName))    {    	non-compiled	[CE]  cannot  find  symbol  nameUsage	109	None	replace
813	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripconstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripconstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (!renamer.stripconstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	16	None	add
814	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (ramer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (ramer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (ramer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (ramer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	191	None	replace
815	[BUG]  [BUGGY]  if  (removeConstness  &&  parent.getType()  ==  Token.NAME)  {  if  (ramer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstness  &&  parent.getType()  ==  Token.NAME)  {  if  (ramer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstness  &&  parent.getType()  ==  Token.NAME)  {  if  (ramer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (ramer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	191	None	replace
816	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (ramer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	191	None	replace
817	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (r.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (r.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (r.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (ramer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	191	None	replace
818	[BUG]  [BUGGY]  if  (removeConstness  &&  parent.getType()  ==  Token.NAME)  {  if  (r.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstness  &&  parent.getType()  ==  Token.NAME)  {  if  (r.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstness  &&  parent.getType()  ==  Token.NAME)  {  if  (r.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (ramer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	191	None	replace
819	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (ramer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (ramer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (ramer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (ramer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	191	None	replace
820	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  ||  n.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  ||  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  ||  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    ||    n.getString().equals(   "prototype       "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
821	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  ||  n.getString().equals( "prototype   "))  {	  if    (renamer.stripConstIfReplaced()    ||    n.getString().equals(   "prototype       "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
822	[BUG]  [BUGGY]  if  (!removeConstancy  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  removeConstancy  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstancy  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstancy  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstancy	180	None	replace
823	[BUG]  [BUGGY]  if  (!rootRenamer  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  bad  operand  type  Renamer  for  unary  operator  '!'  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rootRenamer  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rootRenamer  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  bad  operand  type  Renamer  for  unary  operator  '!'	180	None	replace
824	[BUG]  [BUGGY]  if  (!removeConstness  &&  rootRenamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  rootRenamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  rootRenamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	180	None	replace
825	[BUG]  [BUGGY]  if  (renamingStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  rootRenamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renamingStack  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamingStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  rootRenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamingStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  rootRenamer.stripConstIfReplaced())  {	  if    (renamingStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renamingStack	145	None	replace
826	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {	  if    (!replaceConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
827	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   ",prototype       "))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	107	None	replace
828	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.FUNCTION)  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   ",prototype       "))    {    	non-compiled	[CE]  orphaned  case	107	None	replace
829	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( ",prototype "))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( ",prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( ",prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   ",prototype       "))    {    	non-compiled	[CE]  orphaned  case	107	None	replace
830	[BUG]  [BUGGY]  if  (renamer.referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	177	None	replace
831	[BUG]  [BUGGY]  if  (removeConstness.contains(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstness  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstness.contains(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstness.contains(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	177	None	replace
832	[BUG]  [BUGGY]  if  (replacementNames.contains(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replacementNames  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementNames.contains(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementNames.contains(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.contains(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacementNames	177	None	replace
833	[BUG]  [BUGGY]  if  (!replacementNames.remove(newName)&&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replacementNames  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementNames.remove(newName)&&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementNames.remove(newName)&&  renamer.stripConstIfReplaced())  {	  if    (!referencedNames.remove(newName)&&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacementNames	57	None	replace
834	[BUG]  [BUGGY]  if  (!referencedNames.remove(newName)&&  renamer.isConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.remove(newName)&&  renamer.isConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.remove(newName)&&  renamer.isConstIfReplaced())  {	  if    (!referencedNames.remove(newName)&&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	57	None	replace
835	[BUG]  [BUGGY]  if  (!removeConstness.remove(newName)&&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstness  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness.remove(newName)&&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness.remove(newName)&&  renamer.stripConstIfReplaced())  {	  if    (!referencedNames.remove(newName)&&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	57	None	replace
836	[BUG]  [BUGGY]  if  (!newName.isStripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.isStripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.isStripConstIfReplaced())  {	  if    (!newName.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
837	[BUG]  [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  renamer!=  null)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  renamer!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.stripConstIfReplaced()  &&  renamer!=  null)  {	  if    (!newName.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
838	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "_ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "_ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
839	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "_ "))  {  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "_ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( "_ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
840	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ".__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ".__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
841	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ".__ "))  {  timeout  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ".__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  n.getString().endsWith( ".__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    n.getString().endsWith(   "__   "))    {    timeout    	compilable	timeout	166	1	replace
842	[BUG]  [BUGGY]  if  (stripConstIfReplaced(n,  parent)&&  renamer!=  null)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (stripConstIfReplaced(n,  parent)&&  renamer!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced(n,  parent)&&  renamer!=  null)  {	  if    (stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
843	[BUG]  [BUGGY]  if  (removeConstIfReplaced(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstIfReplaced(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstIfReplaced(n,  parent))  {	  if    (stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
844	[BUG]  [BUGGY]  if  (stripConstIfReplaced(n,  parent),  global)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (stripConstIfReplaced(n,  parent),  global)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced(n,  parent),  global)  {	  if    (stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  ')'  expected	113	None	replace
845	[BUG]  [BUGGY]  if  (!replacementConstANT  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replacementConstANT  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementConstANT  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementConstANT  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstANT    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacementConstANT	179	None	replace
846	[BUG]  [BUGGY]  if  (!removeConstant  &&  renamer.isConstructor())  {  [CE]  cannot  find  symbol  removeConstant  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstant  &&  renamer.isConstructor())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstant  &&  renamer.isConstructor())  {	  if    (!removeConstant    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstant	59	None	replace
847	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&!NodeUtil.isConstantDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&!NodeUtil.isConstantDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&!NodeUtil.isConstantDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.peek()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	170	None	replace
848	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&!NodeUtil.isConstructor(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&!NodeUtil.isConstructor(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&!NodeUtil.isConstructor(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.peek()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	170	None	replace
849	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    >=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	97	None	replace
850	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    >=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	97	None	replace
851	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    >=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	97	None	replace
852	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    >=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	97	None	replace
853	[BUG]  [BUGGY]  if  (parent.getType()!=  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()!=  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()!=  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    >=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	97	None	replace
854	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    >=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	97	None	replace
855	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  parent!=  null  &&  parent.getType()  ==  Token.NAME)  {	  if    (!replaceConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
856	[BUG]  [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  renamedNames  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (references.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	131	None	replace
857	[BUG]  [BUGGY]  if  (!removeConstancy  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  removeConstancy  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstancy  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstancy  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  removeConstancy	171	None	replace
858	[BUG]  [BUGGY]  if  (!removeConstant  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  removeConstant  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstant  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstant  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  removeConstant	171	None	replace
859	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  removeConstness  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	171	None	replace
860	[BUG]  [BUGGY]  if  (!removeConst(n)&&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConst(n)&&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConst(n)&&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
861	[BUG]  [BUGGY]  if  (!replacementConstants  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  replacementConstants  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementConstants  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementConstants  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  replacementConstants	171	None	replace
862	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent,  n))  {  [CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent,  n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent,  n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n,    parent))    {    	non-compiled	[CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;	93	None	replace
863	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  rootRenamer))  {  [CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  rootRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  rootRenamer))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n,    parent))    {    	non-compiled	[CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;	93	None	replace
864	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName!=  null  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (newName!=  null  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    timeout    	compilable	timeout	92	1	replace
865	[BUG]  [BUGGY]  if  (newName!=  null  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName!=  null  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName!=  null  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    timeout    	compilable	timeout	92	1	replace
866	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName!=  null  &&  renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (newName!=  null  &&  renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    timeout    	compilable	timeout	122	1	replace
867	[BUG]  [BUGGY]  if  (newName!=  null  &&  renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName!=  null  &&  renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName!=  null  &&  renamer.stripConstIfReplaced()  &&  newName.equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    timeout    	compilable	timeout	122	1	replace
868	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&  renamer.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&  renamer.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&  renamer.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
869	[BUG]  [BUGGY]  if  (!rerenamer.isConstant())  {  [CE]  cannot  find  symbol  rerenamer  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rerenamer.isConstant())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rerenamer.isConstant())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!rerenamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  rerenamer	124	None	replace
870	[BUG]  [BUGGY]  if  (!rerenamer.isConstructor())  {  [CE]  cannot  find  symbol  rerenamer  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rerenamer.isConstructor())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rerenamer.isConstructor())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!rerenamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  rerenamer	124	None	replace
871	[BUG]  [BUGGY]  if(!rerenamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  rerenamer  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!rerenamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!rerenamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!rerenamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  rerenamer	124	None	replace
872	[BUG]  [BUGGY]  if  (!rerenamer.isConst())  {  [CE]  cannot  find  symbol  rerenamer  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!rerenamer.isConst())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!rerenamer.isConst())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!rerenamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  rerenamer	124	None	replace
873	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  name!=  null)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  name!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  name!=  null)  {	  if    (!replaceConstIfReplaced()    &&    newName!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
874	[BUG]  [BUGGY]  if  (replacementStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced(n),  parent)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced(n),  parent)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced(n),  parent)  {	  if    (renamer.stripConstIfReplaced(n),    parent)    {    	non-compiled	[CE]  ')'  expected	183	None	replace
875	[BUG]  [BUGGY]  if  (replacementStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced(n),  parent)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced(n),  parent)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced(n),  parent)  {	  if    (renamer.stripConstIfReplaced(n),    parent)    {    	non-compiled	[CE]  ')'  expected	183	None	replace
876	[BUG]  [BUGGY]  if  (!replacement.stripConstIfReplaced(n),  parent)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacement.stripConstIfReplaced(n),  parent)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacement.stripConstIfReplaced(n),  parent)  {	  if    (renamer.stripConstIfReplaced(n),    parent)    {    	non-compiled	[CE]  ')'  expected	183	None	replace
877	[BUG]  [BUGGY]  if  (!removeConstIfReplaced(n),  parent)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced(n),  parent)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced(n),  parent)  {	  if    (renamer.stripConstIfReplaced(n),    parent)    {    	non-compiled	[CE]  ')'  expected	183	None	replace
878	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripconstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripconstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripconstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	87	None	add
879	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	87	None	add
880	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    nodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	128	None	replace
881	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  &&!referencedNames.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  &&!referencedNames.containsKey(newName))  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
882	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  ||  global)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  ||  global)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  ||  global)  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
883	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  &&!newName.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  &&!newName.isEmpty())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  &&!newName.isEmpty())  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
884	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  &&  nameStack.peek()!=  null)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  &&  nameStack.peek()!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  &&  nameStack.peek()!=  null)  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
885	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  replacementStack  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {	  if    (parent.stripConstIfReplaced()    &&    renamer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	147	None	replace
886	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  renamer.getType()  ==  Token.NAME)  {	  if    (parent.stripConstIfReplaced()    &&    renamer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
887	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {	  if    (parent.stripConstIfReplaced()    &&    renamer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
888	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (r.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	47	None	replace
889	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.getString().equals(newName))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.getString().equals(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.getString().equals(newName))  {	  if    (!replaceConstIfReplaced()    &&    newName.equals(renamer.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
890	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.getString().equals(name.getString()))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.getString().equals(name.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.getString().equals(name.getString()))  {	  if    (!replaceConstIfReplaced()    &&    newName.equals(renamer.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
891	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null(renamer.getString()))  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null(renamer.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName!=  null(renamer.getString()))  {	  if    (!replaceConstIfReplaced()    &&    newName.equals(renamer.getString()))    {    	non-compiled	[CE]  ')'  expected	52	None	replace
892	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.getString().equals(replacementName.getString()))  {  [CE]  cannot  find  symbol  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.getString().equals(replacementName.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.getString().equals(replacementName.getString()))  {	  if    (!replaceConstIfReplaced()    &&    newName.equals(renamer.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
893	[BUG]  [BUGGY]  if  (renamer.referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	190	None	replace
894	[BUG]  [BUGGY]  if  (removeConstness.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstness  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstness.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstness.containsKey(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	190	None	replace
895	[BUG]  [BUGGY]  if  (renamingNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renamingNames  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamingNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamingNames.containsKey(newName)&&!renamer.stripConstIfReplaced())  {	  if    (referencedNames.containsKey(newName)&&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renamingNames	190	None	replace
896	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(parent,  renamer))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(parent,  renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(parent,  renamer))  {	  if    (!replaceConstIfReplaced(parent))    {    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
897	[BUG]  [BUGGY]  If  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	100	None	replace
898	[BUG]  [BUGGY]  if  (!replacementStack.peek().containsKey(newName)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementStack.peek().containsKey(newName)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementStack.peek().containsKey(newName)&&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	100	None	replace
899	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	100	None	replace
900	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
901	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
902	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
903	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(n))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
904	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(parent))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
905	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(parent))  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isGetProp(parent))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
906	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  newName!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
907	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  newName!=  null)  {  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  newName!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
908	[BUG]  [BUGGY]  if  (replacementStack.stripConstIfReplaced(n,  parent))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.stripConstIfReplaced(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.stripConstIfReplaced(n,  parent))  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	112	None	replace
909	[BUG]  [BUGGY]  if  (replacement.stripConstIfReplaced(n,  parent))  {  [CE]  cannot  find  symbol  replacement  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacement.stripConstIfReplaced(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacement.stripConstIfReplaced(n,  parent))  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  replacement	112	None	replace
910	[BUG]  [BUGGY]  if  (renamedNames.stripConstIfReplaced(n,  parent))  {  [CE]  cannot  find  symbol  renamedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.stripConstIfReplaced(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.stripConstIfReplaced(n,  parent))  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	112	None	replace
911	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent)&&  newName!=  null)  {  [CE]  cannot  find  symbol  referencedNames  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent)&&  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced(n,  parent)&&  newName!=  null)  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	112	None	replace
912	[BUG]  [BUGGY]  if  (replacementNames.stripConstIfReplaced(n,  parent))  {  [CE]  cannot  find  symbol  replacementNames  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementNames.stripConstIfReplaced(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementNames.stripConstIfReplaced(n,  parent))  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  replacementNames	112	None	replace
913	[BUG]  [BUGGY]  Node  nameUsage  =  n.getLastChild().getString();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  nameUsage  =  n.getLastChild().getString();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  nameUsage  =  n.getLastChild().getString();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
914	[BUG]  [BUGGY]  Node  newNameUsage  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  newNameUsage  =  n.getFirstChild();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  newNameUsage  =  n.getFirstChild();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	2	None	replace
915	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!renamer.stripconstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!renamer.stripconstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (!renamer.stripconstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	154	None	add
916	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	154	None	add
917	[BUG]  [BUGGY]  if  (!removeConstant  &&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstant  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstant  &&!replaceConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstant  &&!replaceConstIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstant	173	None	replace
918	[BUG]  [BUGGY]  if  (!removeConstancy  &&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstancy  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstancy  &&!replaceConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstancy  &&!replaceConstIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstancy	173	None	replace
919	[BUG]  [BUGGY]  if  (!replaceConstReplacement  &&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  replaceConstReplacement  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstReplacement  &&!replaceConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstReplacement  &&!replaceConstIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replaceConstReplacement	173	None	replace
920	[BUG]  [BUGGY]  if  (!removeConstANT  &&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstANT  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstANT  &&!replaceConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstANT  &&!replaceConstIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstANT	173	None	replace
921	[BUG]  [BUGGY]  if  (!replaceConst(n)&&!replaceConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConst(n)&&!replaceConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConst(n)&&!replaceConstIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
922	[BUG]  [BUGGY]  if  (newName.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (newName.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (newName.stripConstIfReplaced()  &&!nameUsage.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
923	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&!nameUsage.contains(newName))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&!nameUsage.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&!nameUsage.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	37	None	replace
924	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(parent,  newName,  null))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(parent,  newName,  null))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(parent,  newName,  null))  {	  if    (renamer.stripConstIfReplaced(parent,    newName))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	144	None	replace
925	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripconstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripconstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (!renamer.stripconstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	25	None	add
926	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	25	None	add
927	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
928	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  If  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  If  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  If  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
929	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
930	[BUG]  [BUGGY]  if  (!replacementStack.peek().containsKey(newName)&&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  replacementStack  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementStack.peek().containsKey(newName)&&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementStack.peek().containsKey(newName)&&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	96	None	replace
931	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstantIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstantIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  If  (renamer.stripConstantIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
932	[BUG]  [BUGGY]  if  (parent.getType()!=  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()!=  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()!=  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()!=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
933	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()!=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
934	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  removeConstness  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	95	None	replace
935	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()!=    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	95	None	replace
936	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(newName)&&  renamer!=  null)  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(newName)&&  renamer!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(newName)&&  renamer!=  null)  {	  if    (!replaceConstIfReplaced(newName))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
937	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(newName,  renamer.getString()))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(newName,  renamer.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(newName,  renamer.getString()))  {	  if    (!replaceConstIfReplaced(newName))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
938	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
939	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	94	None	replace
940	[BUG]  [BUGGY]  if  (!renamingStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  renamingStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamingStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamingStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  renamingStack	151	None	replace
941	[BUG]  [BUGGY]  if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	151	None	replace
942	[BUG]  [BUGGY]  if  (!removeConstancy.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstancy  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstancy.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstancy.stripConstIfReplaced())  {	  if    (!renameConstness.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstancy	23	None	replace
943	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&  n.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  replacementStack  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&  n.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&  n.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (n.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	65	None	replace
944	[BUG]  [BUGGY]  if  (replacementStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  replacementStack  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol  replacementStack	67	None	replace
945	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    timeout    	compilable	timeout	67	1	replace
946	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    timeout    	compilable	timeout	67	1	replace
947	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    if  (renamer.stripconstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	62	None	add
948	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    if  (!renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	62	None	add
949	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  if  (!renamer.stripconstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  if  (!renamer.stripconstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    if  (!renamer.stripconstIfReplaced()  &&  NodeUtil.isFunction(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	18	None	add
950	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( ".prototype "))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( ".prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  n.getString().equals( ".prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   ".prototype       "))    {    	non-compiled	[CE]  orphaned  case	105	None	replace
951	[BUG]  [BUGGY]  renamer.setProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.setProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.setProp(Node.IS_CONSTANT_NAME,  newName);	  renamer.setString(newName);    	non-compiled	[CE]  orphaned  case	3	None	replace
952	[BUG]  [BUGGY]  renamer.setProp(Node.IS_CONSTANT_NAME);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.setProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.setProp(Node.IS_CONSTANT_NAME);	  renamer.setString(newName);    	non-compiled	[CE]  orphaned  case	3	None	replace
953	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getOwner();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  ContextualRenamer  t  =  n.getOwner();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	ContextualRenamer  t  =  n.getOwner();	  ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  orphaned  case	5	None	replace
954	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer!=  null  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer!=  null  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  renamer!=  null  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced()    &&    renamer.hasProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
955	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer.containsProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer.containsProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  renamer.containsProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced()    &&    renamer.hasProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
956	[BUG]  [BUGGY]  if(!replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	46	None	replace
957	[BUG]  [BUGGY]  if(replacementStack.isConstant()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(replacementStack.isConstant()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(replacementStack.isConstant()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	46	None	replace
958	[BUG]  [BUGGY]  if(!replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	46	None	replace
959	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(n),  rootRenamer)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(n),  rootRenamer)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(n),  rootRenamer)  {	  if    (!renamer.stripConstIfReplaced(n))    {    	non-compiled	[CE]  ')'  expected	167	None	replace
960	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (newName.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
961	[BUG]  [BUGGY]  if  (!renamingNames.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  renamingNames  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamingNames.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamingNames.stripConstIfReplaced())  {	  if    (!renamedNames.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  renamingNames	20	None	replace
962	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced())  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced())  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced())  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	103	None	replace
963	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ')'  expected	103	None	replace
964	[BUG]  [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced())  {  if  (r.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced())  {  if  (r.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.getType()  ==  Token.NAME  &&  renamer.stripConstIfReplaced())  {  if  (r.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (r.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	103	None	replace
965	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(name,  n))  {  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(name,  n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(name,  n))  {	  if    (renamer.stripConstIfReplaced(n))    {    	non-compiled	[CE]  cannot  find  symbol  name	110	None	replace
966	[BUG]  [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  renamedNames  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.stripConstIfReplaced()  &&!referencedNames.containsKey(newName))  {	  if    (references.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	140	None	replace
967	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(parent,  n,  rootRenamer))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(parent,  n,  rootRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(parent,  n,  rootRenamer))  {	  if    (renamer.stripConstIfReplaced(parent,    rootRenamer))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	143	None	replace
968	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(rootRenamer,  parent))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(rootRenamer,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(rootRenamer,  parent))  {	  if    (renamer.stripConstIfReplaced(parent,    rootRenamer))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	143	None	replace
969	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.contains(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!newName.contains(n.getString()))  {	  if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    timeout    	compilable	timeout	13	1	replace
970	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.contains(n.getString()))  {  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.contains(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!newName.contains(n.getString()))  {	  if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    timeout    	compilable	timeout	13	1	replace
971	[BUG]  [BUGGY]  if  (renamingStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  renamingStack  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamingStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamingStack.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  renamingStack	146	None	replace
972	[BUG]  [BUGGY]  if  (parent.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.peek()  ==  Node.IS_CONSTANT_NAME  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
973	[BUG]  [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  renamedNames  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamedNames.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamedNames.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  renamedNames	35	None	replace
974	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()!=  Node.IS_CONSTANT_NAME)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()!=  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()!=  Node.IS_CONSTANT_NAME)  {	  if    (nameStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
975	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [CE]  incomparable  types:  boolean  and  int  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ==  Node.IS_CONSTANT_NAME  ||  nameStack.peek()  ==  Node.IS_CONSTANT_NAME)  {	  if    (nameStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  incomparable  types:  boolean  and  int	76	None	replace
976	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  renamer.getString().equals( ".prototype "))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  renamer.getString().equals( ".prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  renamer.getString().equals( ".prototype "))  {	  if    (n.stripConstIfReplaced()    &&    renamer.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
977	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  renamer.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  renamer.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  renamer.getString().equals( "prototype   "))  {	  if    (n.stripConstIfReplaced()    &&    renamer.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
978	[BUG]  [BUGGY]  if  (replacement.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacement  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacement.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacement.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (newName.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacement	90	None	replace
979	[BUG]  [BUGGY]  if  (NodeUtil.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (NodeUtil.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (NodeUtil.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (newName.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
980	[BUG]  [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (newName.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
981	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n)&&  renamer!=  null)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n)&&  renamer!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n)&&  renamer!=  null)  {	  if    (!replaceConstIfReplaced(n))    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
982	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	126	None	replace
983	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isName(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isName(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	26	1	replace
984	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isName(n))  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isName(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isName(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	26	1	replace
985	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	26	1	replace
986	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	26	1	replace
987	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (n.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
988	[BUG]  [BUGGY]  if  (!removeConstancy  &&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstancy  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstancy  &&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstancy  &&!renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstancy	129	None	replace
989	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  orphaned  case	45	None	replace
990	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	138	None	replace
991	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  Node  name  =  n.getFirstChild().getNext();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	Node  name  =  n.getFirstChild().getNext();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	158	None	replace
992	[BUG]  [BUGGY]  if  (references.stripConstIfReplaced()  &&!references.containsKey(newName))  {  [CE]  cannot  find  symbol  references  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (references.stripConstIfReplaced()  &&!references.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (references.stripConstIfReplaced()  &&!references.containsKey(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  references	70	None	replace
993	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	153	1	replace
994	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	153	1	replace
995	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	153	1	replace
996	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	153	1	replace
997	[BUG]  [BUGGY]  if  (replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacement  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (newName.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacement	30	None	replace
998	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  orphaned  case	127	None	replace
999	[BUG]  [BUGGY]  if  (!removeConstant.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstant  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstant.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstant.stripConstIfReplaced())  {	  if    (!removeConstness.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstant	149	None	replace
1000	[BUG]  [BUGGY]  if  (!global.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  global  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!global.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global.stripConstIfReplaced())  {	  if    (!removeConstness.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  global	149	None	replace
1001	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripconstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	130	None	replace
1002	[BUG]  [BUGGY]  if  (parent!=  null  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent!=  null  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent!=  null  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripconstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	130	None	replace
1003	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripconstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	130	None	replace
1004	[BUG]  [BUGGY]  if  (parent!=  null  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent!=  null  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent!=  null  ||  parent.getType()  ==  Token.NAME)  {  if  (renamer.stripconstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripconstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  orphaned  case	130	None	replace
1005	[BUG]  [BUGGY]  if  (replacement.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  replacement  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacement.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacement.stripConstIfReplaced()  &&  n.getString().equals( "prototype   "))  {	  if    (n.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol  replacement	187	None	replace
1006	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  name.getString().equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&  name.getString().equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  name.getString().equals( "prototype   "))  {	  if    (n.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	187	None	replace
1007	[BUG]  [BUGGY]  if  (stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (n.stripConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	187	None	replace
1008	[BUG]  [BUGGY]  if  (!parent.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!parent.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!parent.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacement.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1009	[BUG]  [BUGGY]  if  (!referencedNames.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (!replacement.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	156	None	replace
1010	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced())  {  If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced())  {  If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConstIfReplaced())  {  If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
1011	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	44	None	replace
1012	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced())  {  If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced())  {  If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConstIfReplaced())  {  If  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	44	None	replace
1013	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripconstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  if  (renamer.stripconstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    if  (renamer.stripconstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	27	None	add
1014	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	10	1	replace
1015	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)||  parent!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	10	1	replace
1016	[BUG]  [BUGGY]  if  (referencedNames.containsKey(newName)&&!n.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.containsKey(newName)&&!n.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.containsKey(newName)&&!n.stripConstIfReplaced())  {	  if    (n.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	71	None	replace
1017	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  rootRenamer))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  rootRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  rootRenamer))  {	  if    (!replaceConstIfReplaced(renamer))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
1018	[BUG]  [BUGGY]  renamer.replaceChild(n,  nameStack);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.replaceChild(n,  nameStack);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.replaceChild(n,  nameStack);	  renamer.replaceChild(n,    parent);    	non-compiled	[CE]  orphaned  case	157	None	replace
1019	[BUG]  [BUGGY]  if  (replacementIfReplaced()  &&  n.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (removeConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
1020	[BUG]  [BUGGY]  if  (replaceConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replaceConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replaceConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (removeConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
1021	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  renamer.getString()))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  renamer.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  renamer.getString()))  {	  if    (!replaceConstIfReplaced(n.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
1022	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n.getString(),  renamer))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n.getString(),  renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n.getString(),  renamer))  {	  if    (!replaceConstIfReplaced(n.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
1023	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(parent.getString()))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(parent.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(parent.getString()))  {	  if    (!replaceConstIfReplaced(n.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
1024	[BUG]  [BUGGY]  if  (parent.stripConstIfReplaced()  ||  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.stripConstIfReplaced()  ||  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.stripConstIfReplaced()  ||  renamer.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
1025	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!rootRenamer.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&!rootRenamer.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&!rootRenamer.contains(newName))  {	  if    (renamer.stripConstIfReplaced()    &&!nameUsage.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
1026	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(newName,  n,  parent))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(newName,  n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(newName,  n,  parent))  {	  if    (renamer.stripConstIfReplaced(newName,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	111	None	replace
1027	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamedNames.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamedNames.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamedNames.stripConstIfReplaced())  {	  if    (newName.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1028	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  ramer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  ramer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  ramer.stripConstIfReplaced())  {	  if    (newName.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1029	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  removeConstness  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol  removeConstness	67	None	replace
1030	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    n.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1031	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced())  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  if  (!renamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripconstIfReplaced())    {    	non-compiled	[CE]  orphaned  case	125	None	replace
1032	[BUG]  [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.removeProp(Node.IS_CONSTANT_NAME);	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripconstIfReplaced())    {    	non-compiled	[CE]  ')'  expected	125	None	replace
1033	[BUG]  [BUGGY]  if(!renamer.stripConstIfReplaced()  ||!namer.stripconstIfReplaced())  {  [CE]  cannot  find  symbol  namer  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.stripConstIfReplaced()  ||!namer.stripconstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.stripConstIfReplaced()  ||!namer.stripconstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripconstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  namer	125	None	replace
1034	[BUG]  [BUGGY]  if(!renamer.stripConstancy())  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.stripConstancy())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.stripConstancy())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!renamer.stripconstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1035	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&  n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&  n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&  n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(renamer))  {	  if    (n.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(renamer))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	89	None	replace
1036	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent))  {	  if    (n.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(renamer))    {    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
1037	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  this))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  this))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  parent,  this))  {	  if    (renamer.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	108	None	replace
1038	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  false))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  false))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  parent,  false))  {	  if    (renamer.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	108	None	replace
1039	[BUG]  [BUGGY]  if  (referencedNames.contains(newName)&&!nameUsage.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.contains(newName)&&!nameUsage.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.contains(newName)&&!nameUsage.stripConstIfReplaced()  &&!referencedNames.contains(newName))  {	  if    (nameUsage.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	34	None	replace
1040	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n,  parent)&&  renamer.isConst())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n,  parent)&&  renamer.isConst())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n,  parent)&&  renamer.isConst())  {	  if    (!replaceConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
1041	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  n.getType()  ==  Token.VAR)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  n.getType()  ==  Token.VAR)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  n.getType()  ==  Token.VAR)  {	  if    (renamer.peek()    ==    Node.IS_CONSTANT_NAME)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1042	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  removeConstness  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	171	None	replace
1043	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  null))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  null))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(parent,  null))  {	  if    (!renamer.stripConstIfReplaced(n))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	167	None	replace
1044	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced(n),  parent)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced(n),  parent)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced(n),  parent)  {	  if    (renamer.stripConstIfReplaced(n),    parent)    {    	non-compiled	[CE]  ')'  expected	183	None	replace
1045	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n),  n.removeFirstChild())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n),  n.removeFirstChild())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n),  n.removeFirstChild())  {	  if    (renamer.stripConstIfReplaced(n),    parent)    {    	non-compiled	[CE]  ')'  expected	183	None	replace
1046	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n)&&  renamer  ==  null)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n)&&  renamer  ==  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n)&&  renamer  ==  null)  {	  if    (!replaceConstIfReplaced()    &&    renamer    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1047	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  n!=  null)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  n!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  n!=  null)  {	  if    (!replaceConstIfReplaced()    &&    renamer    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1048	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(parent))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
1049	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(parent))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(parent))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
1050	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
1051	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(n))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
1052	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||!NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
1053	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||!NodeUtil.mayHaveSideEffects(n))  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n)||!NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    timeout    	compilable	timeout	155	1	replace
1054	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  &&  parent.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  &&  parent.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  &&  parent.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (replacementStack.peek()    ==    Node.IS_CONSTANT_NAME    &&    renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1055	[BUG]  [BUGGY]  if  (!isConstness  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  isConstness  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!isConstness  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!isConstness  &&  renamer.stripConstIfReplaced())  {	  if    (!global    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  isConstness	55	None	replace
1056	[BUG]  [BUGGY]  if  (!global  &&  renamer.removeConstness())  {  [CE]  cannot  find  symbol  global  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!global  &&  renamer.removeConstness())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global  &&  renamer.removeConstness())  {	  if    (!global    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  global	55	None	replace
1057	[BUG]  [BUGGY]  if  (!regional  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  regional  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!regional  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!regional  &&  renamer.stripConstIfReplaced())  {	  if    (!global    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  regional	55	None	replace
1058	[BUG]  [BUGGY]  if(!removeConstness  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	45	None	replace
1059	[BUG]  [BUGGY]  if(!renamer.stripConst()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!renamer.stripConst()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!renamer.stripConst()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
1060	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	45	1	replace
1061	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	45	1	replace
1062	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	45	1	replace
1063	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	45	1	replace
1064	[BUG]  [BUGGY]  if  (!removeConstANT.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstANT  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstANT.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstANT.stripConstIfReplaced())  {	  if    (!removeConstness.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstANT	149	None	replace
1065	[BUG]  [BUGGY]  if  (!removeConstance.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstance  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstance.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstance.stripConstIfReplaced())  {	  if    (!removeConstness.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstance	149	None	replace
1066	[BUG]  [BUGGY]  if  (!removeConstness.stripConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness.stripConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness.stripConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {	  if    (!removeConstness.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	149	None	replace
1067	[BUG]  [BUGGY]  if  (referencedNames.contains(newName)&&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.contains(newName)&&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.contains(newName)&&!referencedNames.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	33	None	replace
1068	[BUG]  [BUGGY]  if  (replacement.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  replacement  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacement.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacement.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (relativeIdSupplier.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacement	185	None	replace
1069	[BUG]  [BUGGY]  if  (removeConstness.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstness  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstness.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstness.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (relativeIdSupplier.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	185	None	replace
1070	[BUG]  [BUGGY]  if  (removeConstness  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  removeConstness  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstness  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstness  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (ramer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	191	None	replace
1071	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [CE]  incomparable  types:  boolean  and  int  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ==  Node.IS_CONSTANT_NAME  ||  renamer.stripConstIfReplaced())  {	  if    (nameStack.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  incomparable  types:  boolean  and  int	76	None	replace
1072	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	126	1	replace
1073	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	126	1	replace
1074	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isVarDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isVarDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	28	1	replace
1075	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isVarDeclaration(n))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isVarDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isVarDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	28	1	replace
1076	[BUG]  [BUGGY]  if(replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(replacementStack.isEmpty()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	102	None	replace
1077	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced()    &&    newName!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1078	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.NAME)  {	  if    (!replaceConstIfReplaced()    &&    newName!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1079	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.isConstructor())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName!=  null  &&  renamer.isConstructor())  {	  if    (!replaceConstIfReplaced()    &&    newName!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1080	[BUG]  [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.peek()  ==  Node.IS_CONSTANT_NAME  ||  renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (renamer.peek()    ==    Node.IS_CONSTANT_NAME    ||    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
1081	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!rerenamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!rerenamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (!rerenamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	16	None	add
1082	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!ramer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  if  (!ramer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if  (!ramer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  timeout    	non-compiled	[CE]  orphaned  case	16	None	add
1083	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&  n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&  n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&  n.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (n.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	138	None	replace
1084	[BUG]  [BUGGY]  if(relativeIdSupplier!=  null  &&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  relativeIdSupplier  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(relativeIdSupplier!=  null  &&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(relativeIdSupplier!=  null  &&!renamer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!relativeIdSupplier.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  relativeIdSupplier	40	None	replace
1085	[BUG]  [BUGGY]  if  (!relativeIdSupplier.stripConstWhenReplaced())  {  [CE]  cannot  find  symbol  relativeIdSupplier  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!relativeIdSupplier.stripConstWhenReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!relativeIdSupplier.stripConstWhenReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!relativeIdSupplier.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  relativeIdSupplier	40	None	replace
1086	[BUG]  [BUGGY]  if(!relativeIdSupplier.stripConst())  {  [CE]  cannot  find  symbol  relativeIdSupplier  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!relativeIdSupplier.stripConst())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!relativeIdSupplier.stripConst())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!relativeIdSupplier.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  relativeIdSupplier	40	None	replace
1087	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced()  ||  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    ||    NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  cannot  find  symbol  removeConstness	88	None	replace
1088	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isVarDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    ||    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	88	1	replace
1089	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isVarDeclaration(n))  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isVarDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  NodeUtil.isVarDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    ||    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	88	1	replace
1090	[BUG]  [BUGGY]  If  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	100	None	replace
1091	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME)  {  If  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ';'  expected	100	None	replace
1092	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    timeout    	compilable	timeout	63	1	replace
1093	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  ||  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    ||    parent.getType()    ==    Token.NAME)    {    timeout    	compilable	timeout	63	1	replace
1094	[BUG]  [BUGGY]  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  ||!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(n.getType()  ==  Token.NAME  ||!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	compilable	timeout	98	1	replace
1095	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  timeout  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  ||!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  ||!renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	compilable	timeout	98	1	replace
1096	[BUG]  [BUGGY]  if  (replacementStack.peek()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacementStack.peek()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacementStack.peek()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.peek()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	170	None	replace
1097	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(parent,  n.getString()))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(parent,  n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(parent,  n.getString()))  {	  if    (!replaceConstIfReplaced(n.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
1098	[BUG]  [BUGGY]  if  (renamer.referencedNames.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.referencedNames.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.referencedNames.stripConstIfReplaced()  &&!renamer.referencedNames.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	35	None	replace
1099	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getImmediateParentNode();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  ContextualRenamer  t  =  n.getImmediateParentNode();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	ContextualRenamer  t  =  n.getImmediateParentNode();	  ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  orphaned  case	5	None	replace
1100	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getInitializingContextualRenamer();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  ContextualRenamer  t  =  n.getInitializingContextualRenamer();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	ContextualRenamer  t  =  n.getInitializingContextualRenamer();	  ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  orphaned  case	5	None	replace
1101	[BUG]  [BUGGY]  ContextualRenamer  t  =  n.getDeclaration();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  ContextualRenamer  t  =  n.getDeclaration();  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	ContextualRenamer  t  =  n.getDeclaration();	  ContextualRenamer    t    =    n.getConstructor();    	non-compiled	[CE]  orphaned  case	5	None	replace
1102	[BUG]  [BUGGY]  if  (referencedNames.containsKey(newName)&&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.containsKey(newName)&&!referencedNames.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.containsKey(newName)&&!referencedNames.containsKey(newName))  {	  if    (name.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	73	None	replace
1103	[BUG]  [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)&&  n.getString().equals(newName))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)&&  n.getString().equals(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)&&  n.getString().equals(newName))  {	  if    (!renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
1104	[BUG]  [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)&&  n.getString().endsWith( "__ "))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)&&  n.getString().endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)&&  n.getString().endsWith( "__ "))  {	  if    (!renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
1105	[BUG]  [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.removeProp(Node.IS_CONSTANT_NAME)&&  n.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if    (!renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
1106	[BUG]  [BUGGY]  if  (replacement.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  replacement  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (replacement.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (replacement.stripConstIfReplaced()  &&  renamer.getType()  ==  Token.NAME)  {	  if    (parent.stripConstIfReplaced()    &&    renamer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  replacement	147	None	replace
1107	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)||  renamer.getProp(Node.IS_CONSTANT_NAME)!=  null)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)||  renamer.getProp(Node.IS_CONSTANT_NAME)!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)||  renamer.getProp(Node.IS_CONSTANT_NAME)!=  null)  {	  if    (!removeConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	184	None	replace
1108	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)&&  renamer.getProp(Node.IS_CONSTANT_NAME)!=  null)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)&&  renamer.getProp(Node.IS_CONSTANT_NAME)!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)&&  renamer.getProp(Node.IS_CONSTANT_NAME)!=  null)  {	  if    (!removeConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	184	None	replace
1109	[BUG]  [BUGGY]  if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n,  parent))  {  [CE]  cannot  find  symbol  replacement  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n,  parent))  {	  if    (!replacement.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacement	156	None	replace
1110	[BUG]  [BUGGY]  if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  replacement  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacement.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (!replacement.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacement	156	None	replace
1111	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.getProp(Node.IS_CONSTANT_NAME)).stripConstIfReplaced())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.getProp(Node.IS_CONSTANT_NAME)).stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.getProp(Node.IS_CONSTANT_NAME)).stripConstIfReplaced())  {	  if    (!removeConstancy    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
1112	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstWhenReplaced())  {  [CE]  cannot  find  symbol  removeConstness  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.stripConstWhenReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstWhenReplaced())  {	  if    (!removeConstancy    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	60	None	replace
1113	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.getProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.getProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.getProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstancy    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	60	None	replace
1114	[BUG]  [BUGGY]  if  (!regionMatcher  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  regionMatcher  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!regionMatcher  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!regionMatcher  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstancy    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  regionMatcher	60	None	replace
1115	[BUG]  [BUGGY]  if  (!removeConstness  &&!n.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstness  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&!n.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&!n.stripConstIfReplaced())  {	  if    (!n.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	24	None	replace
1116	[BUG]  [BUGGY]  If  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    If    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype       "))    {    	non-compiled	[CE]  	106	None	replace
1117	[BUG]  [BUGGY]  If  (removeConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (removeConstIfReplaced()  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (removeConstIfReplaced()  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    If    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   "prototype       "))    {    	non-compiled	[CE]  	106	None	replace
1118	[BUG]  [BUGGY]  if  (!removeConstancy  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  removeConstancy  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstancy  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstancy  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {	  if    (!removeConstness    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstancy	169	None	replace
1119	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  this.name))  {  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  this.name))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  this.name))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  name	93	None	replace
1120	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  n))  {  [CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n,    parent))    {    	non-compiled	[CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;	93	None	replace
1121	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  name))  {  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  name))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n,  parent,  name))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  name	93	None	replace
1122	[BUG]  [BUGGY]  if(removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(removeConstness  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (ramer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	189	None	replace
1123	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConst()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConst()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConst()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	135	None	replace
1124	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isVarDeclaration(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isVarDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isVarDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	135	None	replace
1125	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isAssignmentOp(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isAssignmentOp(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isAssignmentOp(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripconstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	135	None	replace
1126	[BUG]  [BUGGY]  if  (!removeConstance  &&!replaceConstancyIfReplaced())  {  [CE]  cannot  find  symbol  removeConstance  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstance  &&!replaceConstancyIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstance  &&!replaceConstancyIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstance	173	None	replace
1127	[BUG]  [BUGGY]  if  (!removeConstancy  &&!replaceConstancyIfReplaced())  {  [CE]  cannot  find  symbol  removeConstancy  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstancy  &&!replaceConstancyIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstancy  &&!replaceConstancyIfReplaced())  {	  if    (!removeConstness    &&!replaceConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstancy	173	None	replace
1128	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(n)&&!newName.equals(n.getString()))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(n)&&!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(n)&&!newName.equals(n.getString()))  {	  if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    timeout    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	13	None	replace
1129	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(newName)&&!newName.equals(n.getString()))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(newName)&&!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(newName)&&!newName.equals(n.getString()))  {	  if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    timeout    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	13	None	replace
1130	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName!=  null  &&  renamer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  newName!=  null  &&  renamer.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&  newName!=  null  &&  renamer.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    newName.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
1131	[BUG]  [BUGGY]  if  (n.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (n.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (n.stripConstIfReplaced()  &&  newName.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    newName.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
1132	[BUG]  [BUGGY]  if  (name.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  name  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (name.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (name.stripConstIfReplaced()  &&  n.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    newName.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  name	64	None	replace
1133	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME)||  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME)||  n.hasChildren())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  renamer.hasProp(Node.IS_CONSTANT_NAME)||  n.hasChildren())  {	  if    (!replaceConstIfReplaced()    &&    renamer.hasProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
1134	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  n.hasProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  n.hasProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  n.hasProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced()    &&    renamer.hasProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
1135	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer.getProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer.getProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  renamer.getProp(Node.IS_CONSTANT_NAME))  {	  if    (!replaceConstIfReplaced()    &&    renamer.hasProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
1136	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isVarDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isVarDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&!NodeUtil.isVarDeclaration(n))  {	  if    (!replaceConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
1137	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);	  if    (!replaceConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  ')'  expected	31	None	replace
1138	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	101	1	replace
1139	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	101	1	replace
1140	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(n.getType()  ==  Token.NAME  &&!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	101	1	replace
1141	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	101	1	replace
1142	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	101	1	replace
1143	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(NodeUtil.isFunctionDeclaration(n)||!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	101	1	replace
1144	[BUG]  [BUGGY]  if  (referencedNames.containsKey(newName)&&  n.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.containsKey(newName)&&  n.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.containsKey(newName)&&  n.stripConstIfReplaced())  {	  if    (n.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	71	None	replace
1145	[BUG]  [BUGGY]  if  (referencedNames.size()  >  0  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.size()  >  0  &&!referencedNames.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.size()  >  0  &&!referencedNames.containsKey(newName))  {	  if    (n.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	71	None	replace
1146	[BUG]  [BUGGY]  if  (referencedNames.isEmpty()  &&!referencedNames.containsKey(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.isEmpty()  &&!referencedNames.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.isEmpty()  &&!referencedNames.containsKey(newName))  {	  if    (n.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	71	None	replace
1147	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(n)&&  parent.getType()  ==  Token.NAME)  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(n)&&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(n)&&  parent.getType()  ==  Token.NAME)  {	  if    (!renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    timeout    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	17	None	replace
1148	[BUG]  [BUGGY]  if  (!replacement.stripConstness())  {  [CE]  cannot  find  symbol  replacement  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacement.stripConstness())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacement.stripConstness())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!replacement.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  replacement	41	None	replace
1149	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer!=  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  renamer!=  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  renamer!=  null  &&  parent.getType()  ==  Token.NAME)  {	  if    (!replaceConstIfReplaced()    &&    renamer!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
1150	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n,  parent))  {  [CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n,  parent))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	non-compiled	[CE]  method  isFunctionDeclaration  in  class  NodeUtil  cannot  be  applied  to  given  types;	26	None	replace
1151	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	26	1	replace
1152	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n)&&!NodeUtil.mayHaveSideEffects(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	26	1	replace
1153	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isImmutableValue(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isImmutableValue(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	26	1	replace
1154	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isImmutableValue(n))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isImmutableValue(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isImmutableValue(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	26	1	replace
1155	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isVarDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isVarDeclaration(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	26	1	replace
1156	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isVarDeclaration(n))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isVarDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isVarDeclaration(n))  {	  if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	26	1	replace
1157	[BUG]  [BUGGY]  if  (parent.stripConstIfReplaced()  &&  renamer.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.stripConstIfReplaced()  &&  renamer.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.stripConstIfReplaced()  &&  renamer.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
1158	[BUG]  [BUGGY]  if  (parent.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.stripConstIfReplaced()  &&  parent.getType()!=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
1159	[BUG]  [BUGGY]  if  (referencedNames.contains(newName)&&!renamer.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.contains(newName)&&!renamer.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.contains(newName)&&!renamer.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	32	None	replace
1160	[BUG]  [BUGGY]  if  (referencedNames.contains(newName)&&!n.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.contains(newName)&&!n.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.contains(newName)&&!n.stripConstIfReplaced())  {	  if    (n.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	36	None	replace
1161	[BUG]  [BUGGY]  if  (referencedNames.size()  >  0  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.size()  >  0  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.size()  >  0  &&!referencedNames.contains(newName))  {	  if    (n.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	36	None	replace
1162	[BUG]  [BUGGY]  if  (referencedNames.isEmpty()  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.isEmpty()  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.isEmpty()  &&!referencedNames.contains(newName))  {	  if    (n.stripConstIfReplaced()    &&!referencedNames.contains(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	36	None	replace
1163	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  if  (!rerenamer.stripConstIfReplaced()  &&  newName!=  null)  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null)  {  if  (!rerenamer.stripConstIfReplaced()  &&  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    if  (!rerenamer.stripConstIfReplaced()  &&  newName!=  null)  {	  timeout    	non-compiled	[CE]  orphaned  case	14	None	add
1164	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!rerenamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!rerenamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (!rerenamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	25	None	add
1165	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&! "NodeUtil.isFunctionDeclaration(n))  {  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  &&! "NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if  (!renamer.stripConstIfReplaced()  &&! "NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  unclosed  string  literal	25	None	add
1166	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [CE]  cannot  find  symbol  removeConstness  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  >=  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    >=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	97	None	replace
1167	[BUG]  [BUGGY]  if  (!removeConstant  &&  renamer.removeConstant())  {  [CE]  cannot  find  symbol  removeConstant  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstant  &&  renamer.removeConstant())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstant  &&  renamer.removeConstant())  {	  if    (!removeConstant    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstant	59	None	replace
1168	[BUG]  [BUGGY]  if  (!removeConstant  &&  renamer.removeConstant(newName))  {  [CE]  cannot  find  symbol  removeConstant  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstant  &&  renamer.removeConstant(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstant  &&  renamer.removeConstant(newName))  {	  if    (!removeConstant    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstant	59	None	replace
1169	[BUG]  [BUGGY]  if  (!global  &&  renamer.stripConstantIfReplaced())  {  [CE]  cannot  find  symbol  global  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!global  &&  renamer.stripConstantIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!global  &&  renamer.stripConstantIfReplaced())  {	  if    (!removeConstant    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  global	59	None	replace
1170	[BUG]  [BUGGY]  if  (!removeConstant  &&  renamer.isConst())  {  [CE]  cannot  find  symbol  removeConstant  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstant  &&  renamer.isConst())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstant  &&  renamer.isConst())  {	  if    (!removeConstant    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstant	59	None	replace
1171	[BUG]  [BUGGY]  if  (!removeConstant  &&  renamer.isConstantValue())  {  [CE]  cannot  find  symbol  removeConstant  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstant  &&  renamer.isConstantValue())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstant  &&  renamer.isConstantValue())  {	  if    (!removeConstant    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstant	59	None	replace
1172	[BUG]  [BUGGY]  if  (stripConstIfReplaced(n,  parent,  renamer))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (stripConstIfReplaced(n,  parent,  renamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced(n,  parent,  renamer))  {	  if    (stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
1173	[BUG]  [BUGGY]  if  (stripConstIfReplaced(n,  parent)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (stripConstIfReplaced(n,  parent)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (stripConstIfReplaced(n,  parent)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);	  if    (stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  ')'  expected	113	None	replace
1174	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent)&&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent)&&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced(n,  parent)&&!referencedNames.contains(newName))  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	112	None	replace
1175	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced(n,  parent)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  ')'  expected	112	None	replace
1176	[BUG]  [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent)&&  renamer!=  null)  {  [CE]  cannot  find  symbol  referencedNames  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.stripConstIfReplaced(n,  parent)&&  renamer!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.stripConstIfReplaced(n,  parent)&&  renamer!=  null)  {	  if    (referencedNames.stripConstIfReplaced(n,    parent))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	112	None	replace
1177	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripconstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	compilable	timeout	130	1	replace
1178	[BUG]  [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripconstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	compilable	timeout	130	1	replace
1179	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripconstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	compilable	timeout	130	1	replace
1180	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  ||  renamer.stripConstIfReplaced()  ||  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripconstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	compilable	timeout	130	1	replace
1181	[BUG]  [BUGGY]  if  (referencedNames.containsKey(newName)&&!nameUsage.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.containsKey(newName)&&!nameUsage.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.containsKey(newName)&&!nameUsage.stripConstIfReplaced())  {	  if    (nameUsage.stripConstIfReplaced()    &&!referencedNames.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	69	None	replace
1182	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isExpressionNode(n))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isExpressionNode(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&!NodeUtil.isExpressionNode(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    If    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	44	None	replace
1183	[BUG]  [BUGGY]  if  (referencedNames.containsKey(newName)&&!renamer.containsKey(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (referencedNames.containsKey(newName)&&!renamer.containsKey(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (referencedNames.containsKey(newName)&&!renamer.containsKey(newName))  {	  if    (referencedNames.stripConstIfReplaced()    &&!renamer.containsKey(newName))    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	68	None	replace
1184	[BUG]  [BUGGY]  if(!removeConstness  &&  n.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  removeConstness  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   ".prototype       "))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	105	None	replace
1185	[BUG]  [BUGGY]  if(removeConstness  &&  n.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(removeConstness  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(removeConstness  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   ".prototype       "))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	105	None	replace
1186	[BUG]  [BUGGY]  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(n.getType()  ==  Token.NAME  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   ".prototype       "))    {    	compilable	timeout	105	1	replace
1187	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getString().equals( "prototype "))  {  timeout  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.NAME  &&  n.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.NAME  &&  n.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   ".prototype       "))    {    	compilable	timeout	105	1	replace
1188	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.getString().equals( "prototype "))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.getString().equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.getString().equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(       "prototype       "))    {    if    (renamer.stripConstIfReplaced()    &&    n.getString().equals(   ".prototype       "))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	105	None	replace
1189	[BUG]  [BUGGY]  if  (removeConstIfReplaced()  &&  newName.equals( "prototype   "))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstIfReplaced()  &&  newName.equals( "prototype   "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstIfReplaced()  &&  newName.equals( "prototype   "))  {	  if    (removeConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
1190	[BUG]  [BUGGY]  if  (removeConstIfReplaced()  &&  n.getString().endsWith( "prototype "))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (removeConstIfReplaced()  &&  n.getString().endsWith( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (removeConstIfReplaced()  &&  n.getString().endsWith( "prototype "))  {	  if    (removeConstIfReplaced()    &&    n.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
1191	[BUG]  [BUGGY]  if  (!removeConstancy  &&!renamer.stripConstancyIfReplaced())  {  [CE]  cannot  find  symbol  removeConstancy  [FE]            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstancy  &&!renamer.stripConstancyIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstancy  &&!renamer.stripConstancyIfReplaced())  {	  if    (!removeConstness    &&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstancy	129	None	replace
1192	[BUG]  [BUGGY]  if  (!removeConstANT  &&!renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstANT  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstANT  &&!renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstANT  &&!renamer.stripConstIfReplaced())  {	  if    (!removeConstness    &&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstANT	129	None	replace
1193	[BUG]  [BUGGY]  if  (!removeConstance  &&!renamer.stripConstancyIfReplaced())  {  [CE]  cannot  find  symbol  removeConstance  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstance  &&!renamer.stripConstancyIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstance  &&!renamer.stripConstancyIfReplaced())  {	  if    (!removeConstness    &&!renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstance	129	None	replace
1194	[BUG]  [BUGGY]  if(replacementStack.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(replacementStack.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(replacementStack.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (replacementStack.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	46	None	replace
1195	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isVarDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isVarDeclaration(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	10	1	replace
1196	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isVarDeclaration(n))  {  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isVarDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isVarDeclaration(n))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    timeout    	compilable	timeout	10	1	replace
1197	[BUG]  [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!newName.stripConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!newName.stripConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {	  if    (!newName.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1198	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (ramer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (ramer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    if  (ramer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	91	None	add
1199	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    if  (r.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	91	None	add
1200	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName.equals(namer.getString()))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName.equals(namer.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName.equals(namer.getString()))  {	  if    (!replaceConstIfReplaced()    &&    newName.equals(renamer.getString()))    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
1201	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName  ==  null(renamer.getString()))  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  newName  ==  null(renamer.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  newName  ==  null(renamer.getString()))  {	  if    (!replaceConstIfReplaced()    &&    newName.equals(renamer.getString()))    {    	non-compiled	[CE]  ')'  expected	52	None	replace
1202	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&!referencedNames.contains(newName))  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	non-compiled	[CE]  cannot  find  symbol  referencedNames	15	None	replace
1203	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.NAME)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
1204	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.NAME)  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.NAME)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
1205	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(parent)&&  newName!=  null)  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(parent)&&  newName!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(parent)&&  newName!=  null)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	15	None	replace
1206	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.VAR)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
1207	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.VAR)  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.VAR)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  newName!=  null  &&  parent.getType()  ==  Token.VAR)  {	  if    (!renamer.stripConstIfReplaced()    &&    newName!=    null)    {    timeout    	compilable	timeout	15	1	replace
1208	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!rerenamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!rerenamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (!rerenamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	154	None	add
1209	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!renamer.stripConstIfReplaced()  &&! "NodeUtil.mayHaveSideEffects(n))  {  [CE]  unclosed  string  literal  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!NodeUtil.mayHaveSideEffects(n))  {  if  (!renamer.stripConstIfReplaced()  &&! "NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!NodeUtil.mayHaveSideEffects(n))    {    if  (!renamer.stripConstIfReplaced()  &&! "NodeUtil.mayHaveSideEffects(n))  {	  timeout    	non-compiled	[CE]  unclosed  string  literal	154	None	add
1210	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (renamer.stripConstIfReplaced()    ||!NodeUtil.isFunctionDeclaration(n))    {    if  (!renamer.stripConstIfReplaced()  ||!NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	27	None	add
1211	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isVarDeclaration(n))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isVarDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isVarDeclaration(n))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
1212	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConst()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConst()  &&!NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConst()  &&!NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	136	None	replace
1213	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConst()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  removeConstness  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConst()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConst()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	94	None	replace
1214	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&   "prototype ".equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (renamer.stripConstIfReplaced()  &&   "prototype ".equals(n.getString()))  {	  if    (n.stripConstIfReplaced()    &&    renamer.getString().equals(   "prototype   "))    {    	compilable	timeout	116	1	replace
1215	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced()  &&   "prototype ".equals(n.getString()))  {  timeout  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced()  &&   "prototype ".equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced()  &&   "prototype ".equals(n.getString()))  {	  if    (n.stripConstIfReplaced()    &&    renamer.getString().equals(   "prototype   "))    {    	compilable	timeout	116	1	replace
1216	[BUG]  [BUGGY]  n.removeProp(Node.IS_PROP);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  n.removeProp(Node.IS_PROP);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.removeProp(Node.IS_PROP);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	182	None	replace
1217	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  n.removeChild(parent);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.removeChild(parent);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	182	None	replace
1218	[BUG]  [BUGGY]  n.removeProp(Node.IS_DECLARED_NAME);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  n.removeProp(Node.IS_DECLARED_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.removeProp(Node.IS_DECLARED_NAME);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	182	None	replace
1219	[BUG]  [BUGGY]  n.removeProp(Node.IS_NAME_PROP);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  n.removeProp(Node.IS_NAME_PROP);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	n.removeProp(Node.IS_NAME_PROP);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	182	None	replace
1220	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&  newName.equals( "prototype "))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&  newName.equals( "prototype "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&  newName.equals( "prototype "))  {	  if    (renamer.stripConstIfReplaced()    &&    newName.equals(   "prototype       "))    {    timeout    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
1221	[BUG]  [BUGGY]  if  (!removeConstness  &&!ramer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  removeConstness  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&!ramer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&!ramer.stripConstIfReplaced())  {	  if    (!renamer.stripConstIfReplaced())    {    if    (!ramer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	42	None	replace
1222	[BUG]  [BUGGY]  if  (!renameConstnessIfReplaced())  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstnessIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstnessIfReplaced())  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
1223	[BUG]  [BUGGY]  if  (!renameConstIfReplaced(newName))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced(newName))  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
1224	[BUG]  [BUGGY]  if  (!renameConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced()  &&  n.getString().endsWith( "__ "))  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
1225	[BUG]  [BUGGY]  if  (!renameConstIfReplaced(n,  parent))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced(n,  parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced(n,  parent))  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
1226	[BUG]  [BUGGY]  if  (!renameConstIfReplaced(parent))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renameConstIfReplaced(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renameConstIfReplaced(parent))  {	  if    (!renameConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
1227	[BUG]  [BUGGY]  If  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  If  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	If  (!removeConstness  &&  renamer.stripConstIfReplaced()  &&  parent.getType()  ==  Token.NAME)  {	  if    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    If    (renamer.stripConstIfReplaced()    &&    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	96	None	replace
1228	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	43	1	replace
1229	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(NodeUtil.isFunctionDeclaration(n)||  renamer.stripConstIfReplaced()  &&!NodeUtil.isFunctionDeclaration(n))  {	  if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&!NodeUtil.isFunctionDeclaration(n))    {    	compilable	timeout	43	1	replace
1230	[BUG]  [BUGGY]  if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstness  &&  renamer.removeProp(Node.IS_CONSTANT_NAME,  newName))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	180	None	replace
1231	[BUG]  [BUGGY]  if  (!removeConstncy  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  removeConstncy  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstncy  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstncy  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstncy	180	None	replace
1232	[BUG]  [BUGGY]  if  (!regionMatcher  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  regionMatcher  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!regionMatcher  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!regionMatcher  &&  renamer.removeProp(Node.IS_CONSTANT_NAME))  {	  if    (!removeConstness    &&    renamer.removeProp(Node.IS_CONSTANT_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  regionMatcher	180	None	replace
1233	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!rerenamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  if  (!rerenamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if  (!rerenamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n))  {	  timeout    	non-compiled	[CE]  orphaned  case	9	None	add
1234	[BUG]  [BUGGY]  if  (!idPrefix  &&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  idPrefix  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!idPrefix  &&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!idPrefix  &&  renamer.stripConstIfReplaced())  {	  if    (!removeConstANT    &&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  idPrefix	179	None	replace
1235	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  n.getString().equals(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  n.getString().equals(newName))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
1236	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  n.getString().equals(newName))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  n.getString().equals(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  n.getString().equals(newName))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
1237	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  n.getString().endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  n.getString().endsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
1238	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  n.getString().endsWith( "__ "))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  n.getString().endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent)&&  n.getString().endsWith( "__ "))  {	  if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    timeout    	compilable	timeout	19	1	replace
1239	[BUG]  [BUGGY]  if  (!referencedNames.remove(newName)&&  renamer.getProp(Node.IS_CONSTANT_NAME))  {  [CE]  cannot  find  symbol  referencedNames  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.remove(newName)&&  renamer.getProp(Node.IS_CONSTANT_NAME))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.remove(newName)&&  renamer.getProp(Node.IS_CONSTANT_NAME))  {	  if    (!referencedNames.remove(newName)&&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	57	None	replace
1240	[BUG]  [BUGGY]  if  (!referencedNames.remove(newName)||  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.remove(newName)||  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.remove(newName)||  renamer.stripConstIfReplaced())  {	  if    (!referencedNames.remove(newName)&&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	57	None	replace
1241	[BUG]  [BUGGY]  if  (!referencedNames.add(newName)&&  renamer.stripConstIfReplaced())  {  [CE]  cannot  find  symbol  referencedNames  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!referencedNames.add(newName)&&  renamer.stripConstIfReplaced())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!referencedNames.add(newName)&&  renamer.stripConstIfReplaced())  {	  if    (!referencedNames.remove(newName)&&    renamer.stripConstIfReplaced())    {    	non-compiled	[CE]  cannot  find  symbol  referencedNames	57	None	replace
1242	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isAssignmentOp(n))  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced()  &&  NodeUtil.isAssignmentOp(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced()  &&  NodeUtil.isAssignmentOp(n))  {	  if    (!replaceConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
1243	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  if  (!rerenamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  if  (!rerenamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&    NodeUtil.isFunction(parent))    {    if  (!rerenamer.stripConstIfReplaced()  &&  NodeUtil.isFunction(parent))  {	  timeout    	non-compiled	[CE]  orphaned  case	18	None	add
1244	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	add	if(n.getType()  ==  Token.VAR  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    	compilable	timeout	127	1	replace
1245	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(n.getType()  ==  Token.VAR  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(parent))    {    	compilable	timeout	127	1	replace
1246	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  ||!referencedNames.contains(newName))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  ||!referencedNames.contains(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  ||!referencedNames.contains(newName))  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
1247	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  &&  n.getString().endsWith( "__ "))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  &&  n.getString().endsWith( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  &&  n.getString().endsWith( "__ "))  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
1248	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  &&  n.hasChildren())  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  &&  n.hasChildren())  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  &&  n.hasChildren())  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
1249	[BUG]  [BUGGY]  if  (!renamer.stripConstness()  &&  n.getString().equals( "__ "))  {  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstness()  &&  n.getString().equals( "__ "))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstness()  &&  n.getString().equals( "__ "))  {	  if    (!renamer.stripConstness())    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
1250	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  if  (!rerenamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  if  (!rerenamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if    (!renamer.stripConstIfReplaced()    &&!newName.equals(n.getString()))    {    if  (!rerenamer.stripConstIfReplaced()  &&!newName.equals(n.getString()))  {	  timeout    	non-compiled	[CE]  orphaned  case	12	None	add
1251	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(parent,  n))  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(parent,  n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(parent,  n))  {	  if    (!replaceConstIfReplaced(n))    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
1252	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n)&&  renamer.hasProp(Node.IS_CONSTANT_NAME);	  if    (!replaceConstIfReplaced(n))    {    	non-compiled	[CE]  ')'  expected	48	None	replace
1253	[BUG]  [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)&&  renamer.getProp(Node.IS_CONSTANT_NAME)!=  null)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)&&  renamer.getProp(Node.IS_CONSTANT_NAME)!=  null)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!removeConstIfReplaced()  &&  NodeUtil.isFunctionDeclaration(n)&&  renamer.getProp(Node.IS_CONSTANT_NAME)!=  null)  {	  if    (!removeConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
1254	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(newName))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(newName))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(newName))  {	  if    (renamer.stripConstIfReplaced(n))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	110	None	replace
1255	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(newName,  renamer.cloneTree()))  {  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(newName,  renamer.cloneTree()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(newName,  renamer.cloneTree()))  {	  if    (!replaceConstIfReplaced(newName))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
1256	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(newName,  n))  {  [CE]  cannot  find  symbol  [FE]                                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(newName,  n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(newName,  n))  {	  if    (!replaceConstIfReplaced(newName))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
1257	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(newName,  renamer.getParent()))  {  [CE]  cannot  find  symbol  [FE]                                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(newName,  renamer.getParent()))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(newName,  renamer.getParent()))  {	  if    (!replaceConstIfReplaced(newName))    {    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
1258	[BUG]  [BUGGY]  renamer.replaceChild(n,  Node.newString(Token.NAME,  newName));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.replaceChild(n,  Node.newString(Token.NAME,  newName));  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.replaceChild(n,  Node.newString(Token.NAME,  newName));	  renamer.replaceChild(n,    parent);    	non-compiled	[CE]  orphaned  case	157	None	replace
1259	[BUG]  [BUGGY]  renamer.replaceChild(n,  NodeUtil.newString(newName));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  renamer.replaceChild(n,  NodeUtil.newString(newName));  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	renamer.replaceChild(n,  NodeUtil.newString(newName));	  renamer.replaceChild(n,    parent);    	non-compiled	[CE]  orphaned  case	157	None	replace
1260	[BUG]  [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  newName,  rootRenamer))  {  [CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!renamer.stripConstIfReplaced(parent,  newName,  rootRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!renamer.stripConstIfReplaced(parent,  newName,  rootRenamer))  {	  if    (renamer.stripConstIfReplaced(parent,    rootRenamer))    {    	non-compiled	[CE]  method  stripConstIfReplaced  in  interface  Renamer  cannot  be  applied  to  given  types;	143	None	replace
1261	[BUG]  [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  nameRenamer))  {  [CE]  cannot  find  symbol  nameRenamer  [FE]                AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (renamer.stripConstIfReplaced(n,  parent,  nameRenamer))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (renamer.stripConstIfReplaced(n,  parent,  nameRenamer))  {	  if    (renamer.stripConstIfReplaced(parent,    rootRenamer))    {    	non-compiled	[CE]  cannot  find  symbol  nameRenamer	143	None	replace
1262	[BUG]  [BUGGY]  if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  [CE]  cannot  find  symbol  replacementStack  [FE]                  AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replacementStack.peek()  &&  renamer.stripConstIfReplaced()  &&  NodeUtil.mayHaveSideEffects(n))  {	  if    (!replacementStack.peek()    &&    renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  replacementStack	137	None	replace
1263	[BUG]  [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(parent))  {  [CE]  cannot  find  symbol  removeConstness  [FE]                      AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if(!removeConstness  &&  renamer.stripConstIfReplaced()  &&  nodeUtil.isFunctionDeclaration(parent))  {	  if    (renamer.stripConstIfReplaced()    &&    NodeUtil.isFunctionDeclaration(n))    {    if    (renamer.stripConstIfReplaced()    &&    nodeUtil.isFunctionDeclaration(n))    {    	non-compiled	[CE]  cannot  find  symbol  removeConstness	128	None	replace
1264	[BUG]  [BUGGY]  if  (!replaceConstIfReplaced(n),  parent)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  void  visit(NodeTraversal  t,  Node  n,  Node  parent)  {  switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();      [BUGGY]  if  (!replaceConstIfReplaced(n),  parent)  {  [BUGGY]        n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  }  break;  case  Token.FUNCTION:  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	162	162	66	replace	if  (!replaceConstIfReplaced(n),  parent)  {	  if    (!replaceConstIfReplaced(parent))    {    	non-compiled	[CE]  ')'  expected	174	None	replace
