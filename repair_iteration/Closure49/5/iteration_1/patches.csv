bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  orphaned  case	5	None	replace
2	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  1);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  1);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  1);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  orphaned  case	5	None	replace
3	[BUG]  [BUGGY]  Node  name  =  n.getLastChild();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  Node  name  =  n.getLastChild();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getLastChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
4	[BUG]  [BUGGY]  Node  name  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  Node  name  =  parent.getFirstChild();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  parent.getFirstChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
5	[BUG]  [BUGGY]  Node  name  =  n.getNext();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  Node  name  =  n.getNext();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getNext();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
6	[BUG]  [BUGGY]  Node  name  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  Node  name  =  n.removeFirstChild();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.removeFirstChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
7	[BUG]  [BUGGY]  Node  name  =  node.getFirstChild();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  Node  name  =  node.getFirstChild();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  node.getFirstChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
8	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getFirstChild());  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getFirstChild());  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getFirstChild());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  orphaned  case	7	None	replace
9	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  orphaned  case	7	None	replace
10	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(newName);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(newName);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    	non-compiled	[CE]  orphaned  case	6	None	replace
11	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(renamer);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(renamer);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(renamer);	  n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    	non-compiled	[CE]  orphaned  case	6	None	replace
12	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    	non-compiled	[CE]  orphaned  case	4	None	replace
13	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    	non-compiled	[CE]  orphaned  case	4	None	replace
14	[BUG]  [BUGGY]  n.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.getCompiler().reportCodeChange();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.getCompiler().reportCodeChange();	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	1	None	replace
15	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION);	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	1	None	replace
16	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME);	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	1	None	replace
17	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  n.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  n.getCompiler().reportCodeChange();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  n.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	3	None	replace
18	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  t.getCompiler().reportCodeChange();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	3	None	replace
19	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  t.getCompiler().reportCodeChange();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	3	None	replace
20	[BUG]  [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.putProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	3	None	replace
21	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	3	None	replace
22	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  n.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  n.getCompiler().reportCodeChange();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  n.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	3	None	replace
23	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_PROP);	  n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  orphaned  case	2	None	replace
24	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.removeChild(parent);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeChild(parent);	  n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  orphaned  case	2	None	replace
25	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  1);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME  +  1);	  n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  orphaned  case	2	None	replace
26	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName);	  n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  orphaned  case	2	None	replace
27	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  parent);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeUtil.copyNameAnnotations(name,  parent);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(name,  parent);	  NodeUtil.copyNameAnnotations(n,    parent);    	non-compiled	[CE]  orphaned  case	10	None	replace
28	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  n);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeUtil.copyNameAnnotations(name,  n);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(name,  n);	  NodeUtil.copyNameAnnotations(n,    parent);    	non-compiled	[CE]  orphaned  case	10	None	replace
29	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(parent,  n);	  NodeUtil.copyNameAnnotations(n,    parent);    	non-compiled	[CE]  orphaned  case	10	None	replace
30	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  renamer);  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeUtil.copyNameAnnotations(n,  renamer);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  renamer);	  NodeUtil.copyNameAnnotations(n,    parent);    	non-compiled	[CE]  orphaned  case	10	None	replace
31	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  rootRenamer);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeUtil.copyNameAnnotations(n,  rootRenamer);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  rootRenamer);	  NodeUtil.copyNameAnnotations(n,    parent);    	non-compiled	[CE]  orphaned  case	10	None	replace
32	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  name);  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeUtil.copyNameAnnotations(n,  name);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  name);	  NodeUtil.copyNameAnnotations(n,    parent);    	non-compiled	[CE]  orphaned  case	10	None	replace
33	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  nameStack);  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeUtil.copyNameAnnotations(n,  nameStack);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  nameStack);	  NodeUtil.copyNameAnnotations(n,    parent);    	non-compiled	[CE]  orphaned  case	10	None	replace
34	[BUG]  [BUGGY]  Node  nameUsage  =  n.getLastChild();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  Node  nameUsage  =  n.getLastChild();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  n.getLastChild();	      	non-compiled	[CE]  orphaned  case	8	None	replace
35	[BUG]  [BUGGY]  Node  nameUsage  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  Node  nameUsage  =  n.getFirstChild();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	8	None	replace
36	[BUG]  [BUGGY]  Node  nameStack  =  n.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  Node  nameStack  =  n.getLastChild();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameStack  =  n.getLastChild();	      	non-compiled	[CE]  orphaned  case	8	None	replace
37	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild();	      	non-compiled	[CE]  orphaned  case	8	None	replace
38	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getString();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getString();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	11	None	replace
39	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getLastChild().getString();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getLastChild().getString();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getLastChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	11	None	replace
40	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getString();  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getString();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	11	None	replace
41	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getString();  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getString();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	11	None	replace
42	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	11	None	replace
43	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getValue();  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getValue();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getValue();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	11	None	replace
44	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  parent);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  parent);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  parent);	  n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  orphaned  case	2	None	replace
45	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  name);  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  name);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  name);	  n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  orphaned  case	2	None	replace
46	[BUG]  [BUGGY]  Node  name  =  n.getOwnerChild();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  Node  name  =  n.getOwnerChild();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getOwnerChild();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
47	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.getString());  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.getString());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    	non-compiled	[CE]  orphaned  case	4	None	replace
48	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  ARGUMENTS);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  ARGUMENTS);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  ARGUMENTS);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  orphaned  case	5	None	replace
49	[BUG]  [BUGGY]  n.removeChild(parent);  nameStack.pop();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.removeChild(parent);  nameStack.pop();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeChild(parent);  nameStack.pop();	  n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    	non-compiled	[CE]  orphaned  case	6	None	replace
50	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.toString());  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.toString());  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.toString());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  orphaned  case	7	None	replace
51	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getNameUsage();  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  nameUsage  =  n.getNameUsage();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getNameUsage();	      	non-compiled	[CE]  orphaned  case	8	None	replace
52	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  nameStack.peek();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  rootRenamer  =  nameStack.peek();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  nameStack.peek();	      	non-compiled	[CE]  orphaned  case	8	None	replace
53	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  n.getNameUsage();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  rootRenamer  =  n.getNameUsage();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  n.getNameUsage();	      	non-compiled	[CE]  orphaned  case	8	None	replace
54	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  n.getReferenceName();  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  ContextualRenamer  rootRenamer  =  n.getReferenceName();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	ContextualRenamer  rootRenamer  =  n.getReferenceName();	      	non-compiled	[CE]  orphaned  case	8	None	replace
55	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceURI();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceURI();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceURI();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	11	None	replace
56	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNameNode();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNameNode();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNameNode();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	11	None	replace
57	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  t.getCompiler().reportCodeChange();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	3	None	replace
58	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  renamer);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  renamer);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  parent,  renamer);	  NodeUtil.copyNameAnnotations(n,    parent);    	non-compiled	[CE]  orphaned  case	10	None	replace
59	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  orphaned  case	5	None	replace
60	[BUG]  [BUGGY]  Node  name  =  n.getQualifiedName();  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  Node  name  =  n.getQualifiedName();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getQualifiedName();	  Node    name    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	9	None	replace
61	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getName());  [CE]  orphaned  case  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getName());  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getName());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  orphaned  case	7	None	replace
62	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  t);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  t);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  parent,  t);	  NodeUtil.copyNameAnnotations(n,    parent);    	non-compiled	[CE]  orphaned  case	10	None	replace
63	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  nameStack);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  nameStack);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  parent,  nameStack);	  NodeUtil.copyNameAnnotations(n,    parent);    	non-compiled	[CE]  orphaned  case	10	None	replace
64	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  n.getFirstChild());  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeUtil.copyNameAnnotations(n,  n.getFirstChild());  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  n.getFirstChild());	  NodeUtil.copyNameAnnotations(n,    parent);    	non-compiled	[CE]  orphaned  case	10	None	replace
65	[BUG]  [BUGGY]  n.setString(newName);  [CE]  orphaned  case  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.setString(newName);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.setString(newName);	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	1	None	replace
66	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR);	  t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	1	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer);  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  rootRenamer);	      	non-compiled	[CE]  orphaned  case	8	None	replace
68	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getUniqueName();  [CE]  orphaned  case  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getUniqueName();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getUniqueName();	      	non-compiled	[CE]  orphaned  case	8	None	replace
69	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  nameStack.peek();  [CE]  orphaned  case  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  uniqueIdSupplier  =  nameStack.peek();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  nameStack.peek();	      	non-compiled	[CE]  orphaned  case	8	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  orphaned  case  [FE]                            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  parent);	      	non-compiled	[CE]  orphaned  case	8	None	replace
71	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  t.getCompiler().reportCodeChange();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	3	None	replace
72	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)+  1;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)+  1;  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME)+  1;	  n.removeProp(Node.IS_CONSTANT_NAME);    	non-compiled	[CE]  not  a  statement	2	None	replace
73	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.cloneTree());  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.cloneTree());  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.cloneTree());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    	non-compiled	[CE]  orphaned  case	4	None	replace
74	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.getName());  [CE]  orphaned  case  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.getName());  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.getName());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    	non-compiled	[CE]  orphaned  case	4	None	replace
75	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent));  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent));  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent));	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    	non-compiled	[CE]  orphaned  case	4	None	replace
76	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespace();  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespace();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespace();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	11	None	replace
77	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild().getString();  [CE]  orphaned  case  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild().getString();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	11	None	replace
78	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push();  [CE]  orphaned  case  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();    [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push();  [BUGGY]    break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push();	  n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.pop();    	non-compiled	[CE]  orphaned  case	6	None	replace
