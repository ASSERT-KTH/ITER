bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]  t.getCompiler().reportCodeChange();  [BUGGY]  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().reportCodeChange();	}  	non-compiled	[CE]  orphaned  case	9	None	replace
2	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);	}  	non-compiled	[CE]  orphaned  case	9	None	replace
3	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]        AssertionFailedError  [CONTEXT]  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();  [BUGGY]  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();	}  	non-compiled	[CE]  orphaned  case	9	None	replace
4	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  [CE]  orphaned  case  [FE]          AssertionFailedError  [CONTEXT]  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  [BUGGY]  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);	}  	non-compiled	[CE]  orphaned  case	9	None	replace
5	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  orphaned  case  [FE]            AssertionFailedError  [CONTEXT]  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);	}  	non-compiled	[CE]  orphaned  case	9	None	replace
6	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [CE]  orphaned  case  [FE]              AssertionFailedError  [CONTEXT]  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [BUGGY]  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();	}  	non-compiled	[CE]  orphaned  case	9	None	replace
7	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  [CE]  orphaned  case  [FE]                AssertionFailedError  [CONTEXT]  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  [BUGGY]  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);	}  	non-compiled	[CE]  orphaned  case	9	None	replace
8	[BUG]  [BUGGY]    [CE]  orphaned  case  [FE]                  AssertionFailedError  [CONTEXT]  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]    [BUGGY]  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	  	}  	non-compiled	[CE]  orphaned  case	9	None	replace
9	[BUG]  [BUGGY]  Node  name  =  n.getFirstChild();  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]  Node  name  =  n.getFirstChild();  [BUGGY]  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getFirstChild();	}  	non-compiled	[CE]  orphaned  case	9	None	replace
10	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  [CE]  orphaned  case  [FE]    AssertionFailedError  [CONTEXT]  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent);  [BUGGY]  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  parent);	}  	non-compiled	[CE]  orphaned  case	9	None	replace
11	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getString();  [CE]  orphaned  case  [FE]      AssertionFailedError  [CONTEXT]  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getString();  [BUGGY]  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getString();	}  	non-compiled	[CE]  orphaned  case	9	None	replace
