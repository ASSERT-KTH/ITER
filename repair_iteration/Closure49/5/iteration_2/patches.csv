bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.setString(idPrefix);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.setString(idPrefix);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.setString(idPrefix);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	65	None	replace
2	[BUG]  [BUGGY]  n.removeProp(Node.IS_NAME_PROP);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_NAME_PROP);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_NAME_PROP);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	65	None	replace
3	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_PROP);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_FUNCTION_PROP);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_FUNCTION_PROP);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	65	None	replace
4	[BUG]  [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_UNKNOWN_PROP);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_UNKNOWN_PROP);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	65	None	replace
5	[BUG]  [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_FUNCTION_NAME);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_FUNCTION_NAME);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	65	None	replace
6	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getLastChild();	  NameUsage    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
7	[BUG]  [BUGGY]  NameUsage  nameUsage  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  parent.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  parent.getFirstChild();	  NameUsage    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
8	[BUG]  [BUGGY]  NameUsage  n  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  n  =  n.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  n  =  n.getFirstChild();	  NameUsage    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
9	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getQualifiedName();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getQualifiedName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getQualifiedName();	  NameUsage    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
10	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getNext();  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getNext();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getNext();	  NameUsage    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
11	[BUG]  [BUGGY]  NameUsage  idPrefix  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  idPrefix  =  n.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  idPrefix  =  n.getFirstChild();	  NameUsage    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
12	[BUG]  [BUGGY]  Node  name  =  parent.getQualifiedName();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  parent.getQualifiedName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  parent.getQualifiedName();	  Node    name    =    n.getQualifiedName();    	non-compiled	[CE]  orphaned  case	60	None	replace
13	[BUG]  [BUGGY]  Node  name  =  n.getString();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getString();	  Node    name    =    n.getQualifiedName();    	non-compiled	[CE]  orphaned  case	60	None	replace
14	[BUG]  [BUGGY]  Node  name  =  n.getQualifiedName()  +  1;  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getQualifiedName()  +  1;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getQualifiedName()  +  1;	  Node    name    =    n.getQualifiedName();    	non-compiled	[CE]  orphaned  case	60	None	replace
15	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  n.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  n.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  n.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	17	None	replace
16	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getLastChild().getQualifiedName();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getLastChild().getQualifiedName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getLastChild().getQualifiedName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  orphaned  case	42	None	replace
17	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getQualifiedName();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getQualifiedName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getQualifiedName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  orphaned  case	42	None	replace
18	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName(newName);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName(newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName(newName);	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  orphaned  case	42	None	replace
19	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getQualifiedName();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getQualifiedName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getQualifiedName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  orphaned  case	42	None	replace
20	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName(idPrefix);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName(idPrefix);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName(idPrefix);	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  orphaned  case	42	None	replace
21	[BUG]  [BUGGY]  UniqueIdSupplier  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  UniqueIdSupplier  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	UniqueIdSupplier  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  orphaned  case	42	None	replace
22	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  name);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  name);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  name);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	66	None	replace
23	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  newName);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	66	None	replace
24	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameUsage);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameUsage);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  nameUsage);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	66	None	replace
25	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()!=  Token.VAR);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	66	None	replace
26	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	66	None	replace
27	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameName);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  nameName);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	66	None	replace
28	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getLastChild().getString();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getLastChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getLastChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	77	None	replace
29	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getLastChild().getString();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getLastChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getLastChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	77	None	replace
30	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild().getNext().getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild().getNext().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild().getNext().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	77	None	replace
31	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getFirstChild().getLastChild().getString();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getFirstChild().getLastChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getFirstChild().getLastChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	77	None	replace
32	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getFirstChild().getString();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getFirstChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getFirstChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	77	None	replace
33	[BUG]  [BUGGY]  n.removeChild(newName);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeChild(newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeChild(newName);	  n.removeChild(parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
34	[BUG]  [BUGGY]  n.removeChild(name);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeChild(name);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeChild(name);	  n.removeChild(parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
35	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.replaceChild(n,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.replaceChild(n,  parent);	  n.removeChild(parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
36	[BUG]  [BUGGY]  n.removeChild(rootRenamer);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeChild(rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeChild(rootRenamer);	  n.removeChild(parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
37	[BUG]  [BUGGY]  n.removeChild(nameUsage);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeChild(nameUsage);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeChild(nameUsage);	  n.removeChild(parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
38	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getLastChild().getNamespace();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getLastChild().getNamespace();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getLastChild().getNamespace();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespace();    	non-compiled	[CE]  orphaned  case	76	None	replace
39	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getNamespace();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getNamespace();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getNamespace();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespace();    	non-compiled	[CE]  orphaned  case	76	None	replace
40	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getParent().getNamespace();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getParent().getNamespace();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getParent().getNamespace();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespace();    	non-compiled	[CE]  orphaned  case	76	None	replace
41	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getPrefix();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getPrefix();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getPrefix();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespace();    	non-compiled	[CE]  orphaned  case	76	None	replace
42	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNamespace();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNamespace();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getNamespace();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespace();    	non-compiled	[CE]  orphaned  case	76	None	replace
43	[BUG]  [BUGGY]  NameUsage  nameUsage  =  parent.getNameUsage();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  parent.getNameUsage();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  parent.getNameUsage();	  NameUsage    nameUsage    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	51	None	replace
44	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getReferenceNameUsage();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getReferenceNameUsage();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getReferenceNameUsage();	  NameUsage    nameUsage    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	51	None	replace
45	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getLocalName();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getLocalName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getLocalName();	  NameUsage    nameUsage    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	51	None	replace
46	[BUG]  [BUGGY]  NameUsage  nUsage  =  n.getNameUsage();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nUsage  =  n.getNameUsage();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nUsage  =  n.getNameUsage();	  NameUsage    nameUsage    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	51	None	replace
47	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getSimpleName();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getSimpleName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getSimpleName();	  NameUsage    nameUsage    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	51	None	replace
48	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getImmediateParentNode();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getImmediateParentNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getImmediateParentNode();	  NameUsage    nameUsage    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	51	None	replace
49	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	15	None	replace
50	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	15	None	replace
51	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  name);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  name);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  name);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	15	None	replace
52	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.FUNCTION);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.FUNCTION);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()!=  Token.FUNCTION);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	15	None	replace
53	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack.peek());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack.peek());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameStack.peek());	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	15	None	replace
54	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  orphaned  case	59	None	replace
55	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  orphaned  case	59	None	replace
56	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  name);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  name);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  name);	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  orphaned  case	59	None	replace
57	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getFirstChild());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getFirstChild());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getFirstChild());	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  orphaned  case	59	None	replace
58	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  orphaned  case	59	None	replace
59	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  parent);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  parent);	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  orphaned  case	59	None	replace
60	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  t.getCompiler().reportCodeChange();	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	71	None	replace
61	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  t.getCompiler().reportCodeChange();	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	71	None	replace
62	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  name);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  name);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  name);  t.getCompiler().reportCodeChange();	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	71	None	replace
63	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  parent);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  parent);  t.getCompiler().reportCodeChange();	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	71	None	replace
64	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getLastChild().getNamespaceURI();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getLastChild().getNamespaceURI();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getLastChild().getNamespaceURI();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespaceURI();    	non-compiled	[CE]  orphaned  case	55	None	replace
65	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceURI(parent);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceURI(parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceURI(parent);	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespaceURI();    	non-compiled	[CE]  orphaned  case	55	None	replace
66	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getNamespaceURI();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getNamespaceURI();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getNamespaceURI();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespaceURI();    	non-compiled	[CE]  orphaned  case	55	None	replace
67	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceURI(n.getLastChild());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceURI(n.getLastChild());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceURI(n.getLastChild());	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespaceURI();    	non-compiled	[CE]  orphaned  case	55	None	replace
68	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getReferenceName();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getReferenceName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getReferenceName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespaceURI();    	non-compiled	[CE]  orphaned  case	55	None	replace
69	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.cloneTree());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.cloneTree());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.cloneTree());    	non-compiled	[CE]  orphaned  case	73	None	replace
70	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer.cloneTree());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer.cloneTree());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer.cloneTree());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.cloneTree());    	non-compiled	[CE]  orphaned  case	73	None	replace
71	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent.cloneTree());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent.cloneTree());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent.cloneTree());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.cloneTree());    	non-compiled	[CE]  orphaned  case	73	None	replace
72	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  name);  n.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  name);  n.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  name);  n.getCompiler().reportCodeChange();	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	22	None	replace
73	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  n.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  n.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  n.getCompiler().reportCodeChange();	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	22	None	replace
74	[BUG]  [BUGGY]  NodeUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	22	None	replace
75	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getUniqueName();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getUniqueName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  parent.getUniqueName();	  NameUsage    uniqueIdSupplier    =    n.getUniqueName();    	non-compiled	[CE]  orphaned  case	68	None	replace
76	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  nameUsage.getUniqueName();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  nameUsage.getUniqueName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  nameUsage.getUniqueName();	  NameUsage    uniqueIdSupplier    =    n.getUniqueName();    	non-compiled	[CE]  orphaned  case	68	None	replace
77	[BUG]  [BUGGY]  UniqueIdSupplier  uniqueIdSupplier  =  n.getUniqueId();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  UniqueIdSupplier  uniqueIdSupplier  =  n.getUniqueId();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	UniqueIdSupplier  uniqueIdSupplier  =  n.getUniqueId();	  NameUsage    uniqueIdSupplier    =    n.getUniqueName();    	non-compiled	[CE]  orphaned  case	68	None	replace
78	[BUG]  [BUGGY]  UniqueIdSupplier  uniqueIdSupplier  =  n.getUniqueIdSupplier();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  UniqueIdSupplier  uniqueIdSupplier  =  n.getUniqueIdSupplier();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	UniqueIdSupplier  uniqueIdSupplier  =  n.getUniqueIdSupplier();	  NameUsage    uniqueIdSupplier    =    n.getUniqueName();    	non-compiled	[CE]  orphaned  case	68	None	replace
79	[BUG]  [BUGGY]  UniqueNamesUnique  uniqueIdSupplier  =  n.getUniqueName();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  UniqueNamesUnique  uniqueIdSupplier  =  n.getUniqueName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	UniqueNamesUnique  uniqueIdSupplier  =  n.getUniqueName();	  NameUsage    uniqueIdSupplier    =    n.getUniqueName();    	non-compiled	[CE]  orphaned  case	68	None	replace
80	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getUniqueName()  +  1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getUniqueName()  +  1;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getUniqueName()  +  1;	  NameUsage    uniqueIdSupplier    =    n.getUniqueName();    	non-compiled	[CE]  orphaned  case	68	None	replace
81	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getLastChild().getString();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getLastChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  parent.getLastChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getLastChild().getString();    	non-compiled	[CE]  orphaned  case	39	None	replace
82	[BUG]  [BUGGY]  UniqueIdSupplier  uniqueIdSupplier  =  n.getFirstChild().getString();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  UniqueIdSupplier  uniqueIdSupplier  =  n.getFirstChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	UniqueIdSupplier  uniqueIdSupplier  =  n.getFirstChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getLastChild().getString();    	non-compiled	[CE]  orphaned  case	39	None	replace
83	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getLastChild().getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getLastChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getLastChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getLastChild().getString();    	non-compiled	[CE]  orphaned  case	39	None	replace
84	[BUG]  [BUGGY]  Node  nameUsage  =  parent.getLastChild();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  parent.getLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  parent.getLastChild();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
85	[BUG]  [BUGGY]  Node  nameUsage  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  parent.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  parent.getFirstChild();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
86	[BUG]  [BUGGY]  Node  nameUsage  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  n.removeFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  n.removeFirstChild();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
87	[BUG]  [BUGGY]  Node  nameUsage  =  t.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  t.getLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  t.getLastChild();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
88	[BUG]  [BUGGY]  Node  nameUsage  =  node.getLastChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  node.getLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  node.getLastChild();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
89	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString()  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString()  +  1);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString()  +  1);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getString());    	non-compiled	[CE]  orphaned  case	1	None	replace
90	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName.getString());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName.getString());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getString());    	non-compiled	[CE]  orphaned  case	1	None	replace
91	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString(),  parent);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString(),  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString(),  parent);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getString());    	non-compiled	[CE]  orphaned  case	1	None	replace
92	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getQualifiedName());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getQualifiedName());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getQualifiedName());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getString());    	non-compiled	[CE]  orphaned  case	1	None	replace
93	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(rootRenamer,  n);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(rootRenamer,  n);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(rootRenamer,  n);	  NodeUtil.copyNameAnnotations(parent,    n);    	non-compiled	[CE]  orphaned  case	29	None	replace
94	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(referencedNames,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(referencedNames,  n);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(referencedNames,  n);	  NodeUtil.copyNameAnnotations(parent,    n);    	non-compiled	[CE]  orphaned  case	29	None	replace
95	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  n);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  n);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(nameStack,  n);	  NodeUtil.copyNameAnnotations(parent,    n);    	non-compiled	[CE]  orphaned  case	29	None	replace
96	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(newName,  n);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(newName,  n);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(newName,  n);	  NodeUtil.copyNameAnnotations(parent,    n);    	non-compiled	[CE]  orphaned  case	29	None	replace
97	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n,  nameStack);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n,  nameStack);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(parent,  n,  nameStack);	  NodeUtil.copyNameAnnotations(parent,    n);    	non-compiled	[CE]  orphaned  case	29	None	replace
98	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getLastChild());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getLastChild());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getLastChild());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	8	None	replace
99	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getNext());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getNext());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getNext());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	8	None	replace
100	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent.getFirstChild());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent.getFirstChild());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent.getFirstChild());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	8	None	replace
101	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getName();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNext().getString();    	non-compiled	[CE]  orphaned  case	38	None	replace
102	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getNext().getString();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getNext().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getNext().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNext().getString();    	non-compiled	[CE]  orphaned  case	38	None	replace
103	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNext().getString();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNext().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getNext().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNext().getString();    	non-compiled	[CE]  orphaned  case	38	None	replace
104	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getParent().getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getParent().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getParent().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNext().getString();    	non-compiled	[CE]  orphaned  case	38	None	replace
105	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getQualifiedName().getString();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getQualifiedName().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getQualifiedName().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNext().getString();    	non-compiled	[CE]  orphaned  case	38	None	replace
106	[BUG]  [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getNext().getString();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getNext().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  idSupplier  =  n.getFirstChild().getNext().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNext().getString();    	non-compiled	[CE]  orphaned  case	38	None	replace
107	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  n.peek();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  n.peek();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  n.peek();	  NameUsage    rootRenamer    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	52	None	replace
108	[BUG]  [BUGGY]  NameUsage  nameRenamer  =  nameStack.peek();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameRenamer  =  nameStack.peek();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameRenamer  =  nameStack.peek();	  NameUsage    rootRenamer    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	52	None	replace
109	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  parent.peek();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  parent.peek();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  parent.peek();	  NameUsage    rootRenamer    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	52	None	replace
110	[BUG]  [BUGGY]  NameUsage  nameRenamer  =  n.peek();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameRenamer  =  n.peek();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameRenamer  =  n.peek();	  NameUsage    rootRenamer    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	52	None	replace
111	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  nameStack.peek()  -  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  nameStack.peek()  -  1;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  nameStack.peek()  -  1;	  NameUsage    rootRenamer    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	52	None	replace
112	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  renamer.peek();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  renamer.peek();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  renamer.peek();	  NameUsage    rootRenamer    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	52	None	replace
113	[BUG]  [BUGGY]  Node  name  =  parent.getLastChild();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  parent.getLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  parent.getLastChild();	  Node    name    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	3	None	replace
114	[BUG]  [BUGGY]  Node  name  =  node.getLastChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  node.getLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  node.getLastChild();	  Node    name    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	3	None	replace
115	[BUG]  [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  name);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  name);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.putProp(Node.IS_CONSTANT_NAME,  name);  t.getCompiler().reportCodeChange();	  n.putProp(Node.IS_CONSTANT_NAME,    newName);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	20	None	replace
116	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  t.getCompiler().reportCodeChange();	  n.putProp(Node.IS_CONSTANT_NAME,    newName);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	20	None	replace
117	[BUG]  [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.putProp(Node.IS_CONSTANT_NAME,  newName);	  n.putProp(Node.IS_CONSTANT_NAME,    newName);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	20	None	replace
118	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName.toString());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName.toString());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName.toString());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.toString());    	non-compiled	[CE]  orphaned  case	50	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  uniqueIdSupplier);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  uniqueIdSupplier);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  parent,  uniqueIdSupplier);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	70	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nameUsage);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nameUsage);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  parent,  nameUsage);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	70	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  global);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  global);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  parent,  global);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	70	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  rootRenamer);  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  parent,  rootRenamer);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	70	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newName);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  parent,  newName);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	70	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	70	None	replace
125	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n  +  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n  +  1);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n  +  1);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName    +    1);    	non-compiled	[CE]  orphaned  case	2	None	replace
126	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  2);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  2);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  2);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName    +    1);    	non-compiled	[CE]  orphaned  case	2	None	replace
127	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  3);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  3);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  3);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName    +    1);    	non-compiled	[CE]  orphaned  case	2	None	replace
128	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  /  1);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  /  1);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  /  1);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName    +    1);    	non-compiled	[CE]  orphaned  case	2	None	replace
129	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(0);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(0);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(0);	  n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.push();    	non-compiled	[CE]  orphaned  case	78	None	replace
130	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  n,  t);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(name,  n,  t);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(name,  n,  t);	  NodeUtil.copyNameAnnotations(n,    parent,    t);    	non-compiled	[CE]  orphaned  case	62	None	replace
131	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  n,  parent);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(name,  n,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(name,  n,  parent);	  NodeUtil.copyNameAnnotations(n,    parent,    t);    	non-compiled	[CE]  orphaned  case	62	None	replace
132	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  n,  parent);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  n,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  n,  parent);	  NodeUtil.copyNameAnnotations(n,    parent,    t);    	non-compiled	[CE]  orphaned  case	62	None	replace
133	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  parent,  t);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(name,  parent,  t);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(name,  parent,  t);	  NodeUtil.copyNameAnnotations(n,    parent,    t);    	non-compiled	[CE]  orphaned  case	62	None	replace
134	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(rootRenamer,  n,  parent);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(rootRenamer,  n,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(rootRenamer,  n,  parent);	  NodeUtil.copyNameAnnotations(n,    parent,    t);    	non-compiled	[CE]  orphaned  case	62	None	replace
135	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  n,  parent);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  n,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(nameStack,  n,  parent);	  NodeUtil.copyNameAnnotations(n,    parent,    t);    	non-compiled	[CE]  orphaned  case	62	None	replace
136	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  t,  parent);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  t,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  t,  parent);	  NodeUtil.copyNameAnnotations(n,    parent,    t);    	non-compiled	[CE]  orphaned  case	62	None	replace
137	[BUG]  [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  n.getString());  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  n.getString());  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.putProp(Node.IS_CONSTANT_NAME,  n.getString());  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getString());    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	57	None	replace
138	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  parent);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(nameStack,  parent);	  NodeUtil.copyNameAnnotations(n,    parent,    nameStack);    	non-compiled	[CE]  orphaned  case	63	None	replace
139	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  parent,  nameStack);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(name,  parent,  nameStack);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(name,  parent,  nameStack);	  NodeUtil.copyNameAnnotations(n,    parent,    nameStack);    	non-compiled	[CE]  orphaned  case	63	None	replace
140	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  parent,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(name,  parent,  n);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(name,  parent,  n);	  NodeUtil.copyNameAnnotations(n,    parent,    nameStack);    	non-compiled	[CE]  orphaned  case	63	None	replace
141	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  nameStack,  parent);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  nameStack,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  nameStack,  parent);	  NodeUtil.copyNameAnnotations(n,    parent,    nameStack);    	non-compiled	[CE]  orphaned  case	63	None	replace
142	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  nameStack,  nameUsage);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  nameStack,  nameUsage);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  nameStack,  nameUsage);	  NodeUtil.copyNameAnnotations(n,    parent,    nameStack);    	non-compiled	[CE]  orphaned  case	63	None	replace
143	[BUG]  [BUGGY]  Name  name  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Name  name  =  n.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Name  name  =  n.getFirstChild();	  Node    name    =    node.getFirstChild();    	non-compiled	[CE]  orphaned  case	7	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  rootRenamer);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  parent,  rootRenamer);	  NodeTraversal.traverse(compiler,    n,    rootRenamer);    	non-compiled	[CE]  orphaned  case	67	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRenamer,  n);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  rootRenamer,  n);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  rootRenamer,  n);	  NodeTraversal.traverse(compiler,    n,    rootRenamer);    	non-compiled	[CE]  orphaned  case	67	None	replace
146	[BUG]  [BUGGY]  ContextualRenamer.traverse(compiler,  n,  parent);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  ContextualRenamer.traverse(compiler,  n,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	ContextualRenamer.traverse(compiler,  n,  parent);	  NodeTraversal.traverse(compiler,    n,    rootRenamer);    	non-compiled	[CE]  orphaned  case	67	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nameStack);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nameStack);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  nameStack);	  NodeTraversal.traverse(compiler,    n,    rootRenamer);    	non-compiled	[CE]  orphaned  case	67	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRenamer,  parent);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  rootRenamer,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  rootRenamer,  parent);	  NodeTraversal.traverse(compiler,    n,    rootRenamer);    	non-compiled	[CE]  orphaned  case	67	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  rootRenamer,  newName);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  rootRenamer,  newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  rootRenamer,  newName);	  NodeTraversal.traverse(compiler,    n,    rootRenamer);    	non-compiled	[CE]  orphaned  case	67	None	replace
150	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  nameUsage.getFirstChild().getString();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  nameUsage.getFirstChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  nameUsage.getFirstChild().getString();	  NameUsage    uniqueIdSupplier    =    parent.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	40	None	replace
151	[BUG]  [BUGGY]  NameUsage  singleIdSupplier  =  n.getFirstChild().getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  singleIdSupplier  =  n.getFirstChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  singleIdSupplier  =  n.getFirstChild().getString();	  NameUsage    uniqueIdSupplier    =    parent.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	40	None	replace
152	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  nameStack);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  nameStack);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(parent,  nameStack);	  NodeUtil.copyNameAnnotations(n,    nameStack);    	non-compiled	[CE]  orphaned  case	33	None	replace
153	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  nameStack);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(name,  nameStack);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(name,  nameStack);	  NodeUtil.copyNameAnnotations(n,    nameStack);    	non-compiled	[CE]  orphaned  case	33	None	replace
154	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  name);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  name);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(nameStack,  name);	  NodeUtil.copyNameAnnotations(n,    nameStack);    	non-compiled	[CE]  orphaned  case	33	None	replace
155	[BUG]  [BUGGY]  Node  name  =  parent.removeFirstChild();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  parent.removeFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  parent.removeFirstChild();	  Node    name    =    n.removeFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
156	[BUG]  [BUGGY]  Node  name  =  n.removeLastChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.removeLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.removeLastChild();	  Node    name    =    n.removeFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
157	[BUG]  [BUGGY]  Node  name  =  n.replaceChild(n,  parent);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.replaceChild(n,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.replaceChild(n,  parent);	  Node    name    =    n.removeFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
158	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  null);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  null);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  null);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    ARGUMENTS);    	non-compiled	[CE]  orphaned  case	48	None	replace
159	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(rootRenamer,  renamer);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(rootRenamer,  renamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(rootRenamer,  renamer);	  NodeUtil.copyNameAnnotations(n,    renamer);    	non-compiled	[CE]  orphaned  case	30	None	replace
160	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  renamer);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  renamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(parent,  renamer);	  NodeUtil.copyNameAnnotations(n,    renamer);    	non-compiled	[CE]  orphaned  case	30	None	replace
161	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  renamer);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(name,  renamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(name,  renamer);	  NodeUtil.copyNameAnnotations(n,    renamer);    	non-compiled	[CE]  orphaned  case	30	None	replace
162	[BUG]  [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  renamer);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.putProp(Node.IS_CONSTANT_NAME,  renamer);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.putProp(Node.IS_CONSTANT_NAME,  renamer);  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	19	None	replace
163	[BUG]  [BUGGY]  Node  nameStack  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameStack  =  n.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameStack  =  n.getFirstChild();	  Node    nameStack    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	36	None	replace
164	[BUG]  [BUGGY]  Node  nameStack  =  parent.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameStack  =  parent.getLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameStack  =  parent.getLastChild();	  Node    nameStack    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	36	None	replace
165	[BUG]  [BUGGY]  Node  nameStack  =  parent.getFirstChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameStack  =  parent.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameStack  =  parent.getFirstChild();	  Node    nameStack    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	36	None	replace
166	[BUG]  [BUGGY]  Node  nameStack  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameStack  =  n.removeFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameStack  =  n.removeFirstChild();	  Node    nameStack    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	36	None	replace
167	[BUG]  [BUGGY]  Node  nameStack  =  t.getLastChild();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameStack  =  t.getLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameStack  =  t.getLastChild();	  Node    nameStack    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	36	None	replace
168	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(newName,  parent);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(newName,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(newName,  parent);	  NodeUtil.copyNameAnnotations(name,    parent);    	non-compiled	[CE]  orphaned  case	27	None	replace
169	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  rootRenamer);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(name,  rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(name,  rootRenamer);	  NodeUtil.copyNameAnnotations(name,    parent);    	non-compiled	[CE]  orphaned  case	27	None	replace
170	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(referencedNames,  name);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(referencedNames,  name);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(referencedNames,  name);	  NodeUtil.copyNameAnnotations(name,    parent);    	non-compiled	[CE]  orphaned  case	27	None	replace
171	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  name);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  name);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(parent,  name);	  NodeUtil.copyNameAnnotations(name,    parent);    	non-compiled	[CE]  orphaned  case	27	None	replace
172	[BUG]  [BUGGY]  n.removeChild(parent);  nameStack.peek();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeChild(parent);  nameStack.peek();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeChild(parent);  nameStack.peek();	  n.removeChild(parent);    nameStack.pop();    	non-compiled	[CE]  orphaned  case	49	None	replace
173	[BUG]  [BUGGY]  n.removeChild(name);  nameStack.pop();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeChild(name);  nameStack.pop();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeChild(name);  nameStack.pop();	  n.removeChild(parent);    nameStack.pop();    	non-compiled	[CE]  orphaned  case	49	None	replace
174	[BUG]  [BUGGY]  n.removeChild(newName);  nameStack.pop();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeChild(newName);  nameStack.pop();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeChild(newName);  nameStack.pop();	  n.removeChild(parent);    nameStack.pop();    	non-compiled	[CE]  orphaned  case	49	None	replace
175	[BUG]  [BUGGY]  n.removeChild(parent);  nameStack.push(newName);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeChild(parent);  nameStack.push(newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeChild(parent);  nameStack.push(newName);	  n.removeChild(parent);    nameStack.pop();    	non-compiled	[CE]  orphaned  case	49	None	replace
176	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  2);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  2);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME  +  2);	  n.removeProp(Node.IS_CONSTANT_NAME    +    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
177	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  4);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  4);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME  +  4);	  n.removeProp(Node.IS_CONSTANT_NAME    +    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
178	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  3);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME  +  3);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME  +  3);	  n.removeProp(Node.IS_CONSTANT_NAME    +    1);    	non-compiled	[CE]  orphaned  case	25	None	replace
179	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  ARGUMENTS);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  ARGUMENTS);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  ARGUMENTS);	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  orphaned  case	26	None	replace
180	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  nameUsage);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  nameUsage);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  nameUsage);	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  orphaned  case	26	None	replace
181	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.peek();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.peek();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.peek();	  NameUsage    uniqueIdSupplier    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	69	None	replace
182	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.peek();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.peek();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  parent.peek();	  NameUsage    uniqueIdSupplier    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	69	None	replace
183	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  renamer.peek();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  renamer.peek();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  renamer.peek();	  NameUsage    uniqueIdSupplier    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	69	None	replace
184	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  nameStack.peek()  -  1;  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  nameStack.peek()  -  1;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  nameStack.peek()  -  1;	  NameUsage    uniqueIdSupplier    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	69	None	replace
185	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  rootRenamer.peek();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  rootRenamer.peek();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  rootRenamer.peek();	  NameUsage    uniqueIdSupplier    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	69	None	replace
186	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  nameStack.peek(),  newName;  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  nameStack.peek(),  newName;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  nameStack.peek(),  newName;	  NameUsage    uniqueIdSupplier    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	69	None	replace
187	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.replaceChild(n,  parent));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.replaceChild(n,  parent));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.replaceChild(n,  parent));	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.replaceChild(n,    parent));    	non-compiled	[CE]  orphaned  case	75	None	replace
188	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  newName);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  newName);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.replaceChild(n,    parent));    	non-compiled	[CE]  orphaned  case	75	None	replace
189	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  rootRenamer);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  rootRenamer);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.replaceChild(n,    parent));    	non-compiled	[CE]  orphaned  case	75	None	replace
190	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  rootRenamer));  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  rootRenamer));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  rootRenamer));	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.replaceChild(n,    parent));    	non-compiled	[CE]  orphaned  case	75	None	replace
191	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  true);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  true);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  true);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.replaceChild(n,    parent));    	non-compiled	[CE]  orphaned  case	75	None	replace
192	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  false);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  false);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  false);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.replaceChild(n,    parent));    	non-compiled	[CE]  orphaned  case	75	None	replace
193	[BUG]  [BUGGY]  n.getCompiler().report(JSError.make(t,  n,  newName));  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.getCompiler().report(JSError.make(t,  n,  newName));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.getCompiler().report(JSError.make(t,  n,  newName));	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	14	None	replace
194	[BUG]  [BUGGY]  n.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAME));  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAME));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAME));	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	14	None	replace
195	[BUG]  [BUGGY]  n.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_ID_SEPARATOR));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_ID_SEPARATOR));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_ID_SEPARATOR));	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	14	None	replace
196	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)+  2;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)+  2;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME)+  2;	  n.removeProp(Node.IS_CONSTANT_NAME)+    1;    	non-compiled	[CE]  not  a  statement	72	None	replace
197	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)/  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)/  1;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME)/  1;	  n.removeProp(Node.IS_CONSTANT_NAME)+    1;    	non-compiled	[CE]  not  a  statement	72	None	replace
198	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)+  4;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)+  4;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME)+  4;	  n.removeProp(Node.IS_CONSTANT_NAME)+    1;    	non-compiled	[CE]  not  a  statement	72	None	replace
199	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)+  3;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)+  3;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME)+  3;	  n.removeProp(Node.IS_CONSTANT_NAME)+    1;    	non-compiled	[CE]  not  a  statement	72	None	replace
200	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getLastChild().getValue();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getLastChild().getValue();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getLastChild().getValue();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getValue();    	non-compiled	[CE]  orphaned  case	43	None	replace
201	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getValue();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getValue();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getValue();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getValue();    	non-compiled	[CE]  orphaned  case	43	None	replace
202	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild().getValue();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild().getValue();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild().getValue();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getValue();    	non-compiled	[CE]  orphaned  case	43	None	replace
203	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getValue();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getValue();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getValue();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getValue();    	non-compiled	[CE]  orphaned  case	43	None	replace
204	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getValue();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getValue();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getValue();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getValue();    	non-compiled	[CE]  orphaned  case	43	None	replace
205	[BUG]  [BUGGY]  Node  name  =  t.getFirstChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  t.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  t.getFirstChild();	  Node    name    =    parent.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
206	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer.getName());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer.getName());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer.getName());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.getName());    	non-compiled	[CE]  orphaned  case	74	None	replace
207	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent.getName());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent.getName());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent.getName());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.getName());    	non-compiled	[CE]  orphaned  case	74	None	replace
208	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.rootRenamer);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.rootRenamer);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.rootRenamer);    	non-compiled	[CE]  orphaned  case	13	None	replace
209	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  parent);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  parent);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.rootRenamer);    	non-compiled	[CE]  orphaned  case	13	None	replace
210	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.name);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.name);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.name);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.rootRenamer);    	non-compiled	[CE]  orphaned  case	13	None	replace
211	[BUG]  [BUGGY]  Node  name  =  parent.getOwnerChild();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  parent.getOwnerChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  parent.getOwnerChild();	  Node    name    =    n.getOwnerChild();    	non-compiled	[CE]  orphaned  case	46	None	replace
212	[BUG]  [BUGGY]  Node  name  =  n.getImmediateParentNode();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getImmediateParentNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getImmediateParentNode();	  Node    name    =    n.getOwnerChild();    	non-compiled	[CE]  orphaned  case	46	None	replace
213	[BUG]  [BUGGY]  Node  name  =  n.getOwnerName();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getOwnerName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getOwnerName();	  Node    name    =    n.getOwnerChild();    	non-compiled	[CE]  orphaned  case	46	None	replace
214	[BUG]  [BUGGY]  Node  name  =  n.getName();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getName();	  Node    name    =    n.getOwnerChild();    	non-compiled	[CE]  orphaned  case	46	None	replace
215	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(rootRenamer,  name);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(rootRenamer,  name);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(rootRenamer,  name);	  NodeUtil.copyNameAnnotations(n,    name);    	non-compiled	[CE]  orphaned  case	32	None	replace
216	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(newName,  name);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(newName,  name);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(newName,  name);	  NodeUtil.copyNameAnnotations(n,    name);    	non-compiled	[CE]  orphaned  case	32	None	replace
217	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getLocalName());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getLocalName());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getLocalName());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getName());    	non-compiled	[CE]  orphaned  case	61	None	replace
218	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getPrefix());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getPrefix());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getPrefix());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getName());    	non-compiled	[CE]  orphaned  case	61	None	replace
219	[BUG]  [BUGGY]  Node  nameUsage  =  n.getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  n.getNext();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  n.getNext();	  Node    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	35	None	replace
220	[BUG]  [BUGGY]  Node  nameUsage  =  node.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  node.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  node.getFirstChild();	  Node    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	35	None	replace
221	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent.getFirstChild());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent.getFirstChild());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  parent.getFirstChild());	  NodeUtil.copyNameAnnotations(n,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	64	None	replace
222	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  n.getFirstChild());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(name,  n.getFirstChild());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(name,  n.getFirstChild());	  NodeUtil.copyNameAnnotations(n,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	64	None	replace
223	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n.getFirstChild());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n.getFirstChild());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(parent,  n.getFirstChild());	  NodeUtil.copyNameAnnotations(n,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	64	None	replace
224	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  n.getLastChild());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  n.getLastChild());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  n.getLastChild());	  NodeUtil.copyNameAnnotations(n,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	64	None	replace
225	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  n.getFirstChild(),  parent);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  n.getFirstChild(),  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  n.getFirstChild(),  parent);	  NodeUtil.copyNameAnnotations(n,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	64	None	replace
226	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(newName,  n.getFirstChild());  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(newName,  n.getFirstChild());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(newName,  n.getFirstChild());	  NodeUtil.copyNameAnnotations(n,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	64	None	replace
227	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  n.getString());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  n.getString());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  n.getString());	  NodeUtil.copyNameAnnotations(n,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	64	None	replace
228	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  name);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  name);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  name);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	16	None	replace
229	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  newName);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	16	None	replace
230	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameStack.peek());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameStack.peek());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  nameStack.peek());	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	16	None	replace
231	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameUsage);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameUsage);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  nameUsage);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	16	None	replace
232	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameStack);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameStack);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  nameStack);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	16	None	replace
233	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  rootRenamer,  renamer);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  rootRenamer,  renamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  rootRenamer,  renamer);	  NodeUtil.copyNameAnnotations(n,    parent,    renamer);    	non-compiled	[CE]  orphaned  case	58	None	replace
234	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  n,  rootRenamer);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  n,  rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  n,  rootRenamer);	  NodeUtil.copyNameAnnotations(n,    parent,    renamer);    	non-compiled	[CE]  orphaned  case	58	None	replace
235	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(referencedNames,  n,  parent);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(referencedNames,  n,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(referencedNames,  n,  parent);	  NodeUtil.copyNameAnnotations(n,    parent,    renamer);    	non-compiled	[CE]  orphaned  case	58	None	replace
236	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  rootRenamer);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  parent,  rootRenamer);	  NodeUtil.copyNameAnnotations(n,    parent,    renamer);    	non-compiled	[CE]  orphaned  case	58	None	replace
237	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  nameName);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  nameName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  nameName);	  n.removeProp(Node.IS_CONSTANT_NAME,    parent);    	non-compiled	[CE]  orphaned  case	44	None	replace
238	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.setString(newName));  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.setString(newName));  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.setString(newName));  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	18	None	replace
239	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent.getString());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent.getString());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.getString());    	non-compiled	[CE]  orphaned  case	47	None	replace
240	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer.getString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer.getString());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer.getString());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.getString());    	non-compiled	[CE]  orphaned  case	47	None	replace
241	[BUG]  [BUGGY]  NameUsage  nameRenamer  =  n.getNameUsage();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameRenamer  =  n.getNameUsage();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameRenamer  =  n.getNameUsage();	  NameUsage    rootRenamer    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	53	None	replace
242	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  parent.getNameUsage();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  parent.getNameUsage();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  parent.getNameUsage();	  NameUsage    rootRenamer    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	53	None	replace
243	[BUG]  [BUGGY]  NameUsage  n  =  n.getNameUsage();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  n  =  n.getNameUsage();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  n  =  n.getNameUsage();	  NameUsage    rootRenamer    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	53	None	replace
244	[BUG]  [BUGGY]  NameUsage  n  =  parent.getNameUsage();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  n  =  parent.getNameUsage();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  n  =  parent.getNameUsage();	  NameUsage    rootRenamer    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	53	None	replace
245	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  n.getRootNode();  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  n.getRootNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  n.getRootNode();	  NameUsage    rootRenamer    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	53	None	replace
246	[BUG]  [BUGGY]  NameUsage  nameUsage  =  parent.getFirstChild().getString();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  parent.getFirstChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  parent.getFirstChild().getString();	  NameUsage    nameUsage    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	41	None	replace
247	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getName();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getName();	  NameUsage    nameUsage    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	41	None	replace
248	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getLastChild().getNameNode();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getLastChild().getNameNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getLastChild().getNameNode();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNameNode();    	non-compiled	[CE]  orphaned  case	56	None	replace
249	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getNameNode();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getNameNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  parent.getFirstChild().getNameNode();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNameNode();    	non-compiled	[CE]  orphaned  case	56	None	replace
250	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getReferenceNameNode();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getReferenceNameNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getReferenceNameNode();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNameNode();    	non-compiled	[CE]  orphaned  case	56	None	replace
251	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNode();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNode();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNameNode();    	non-compiled	[CE]  orphaned  case	56	None	replace
252	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNameNode();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNameNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getNameNode();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNameNode();    	non-compiled	[CE]  orphaned  case	56	None	replace
253	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP,  parent);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_PROP,  parent);	  n.removeProp(Node.IS_CONSTANT_PROP);    	non-compiled	[CE]  orphaned  case	23	None	replace
254	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP  +  1);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP  +  1);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_PROP  +  1);	  n.removeProp(Node.IS_CONSTANT_PROP);    	non-compiled	[CE]  orphaned  case	23	None	replace
255	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP,  newName);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_PROP,  newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_PROP,  newName);	  n.removeProp(Node.IS_CONSTANT_PROP);    	non-compiled	[CE]  orphaned  case	23	None	replace
256	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  parent.getReferenceName();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  ContextualRenamer  rootRenamer  =  parent.getReferenceName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	ContextualRenamer  rootRenamer  =  parent.getReferenceName();	  ContextualRenamer    rootRenamer    =    n.getReferenceName();    	non-compiled	[CE]  orphaned  case	54	None	replace
257	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  n.getRootNode();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  ContextualRenamer  rootRenamer  =  n.getRootNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	ContextualRenamer  rootRenamer  =  n.getRootNode();	  ContextualRenamer    rootRenamer    =    n.getReferenceName();    	non-compiled	[CE]  orphaned  case	54	None	replace
258	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  renamer.getReferenceName();  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  ContextualRenamer  rootRenamer  =  renamer.getReferenceName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	ContextualRenamer  rootRenamer  =  renamer.getReferenceName();	  ContextualRenamer    rootRenamer    =    n.getReferenceName();    	non-compiled	[CE]  orphaned  case	54	None	replace
259	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  n.getReferenceName()  +  1;  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  ContextualRenamer  rootRenamer  =  n.getReferenceName()  +  1;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	ContextualRenamer  rootRenamer  =  n.getReferenceName()  +  1;	  ContextualRenamer    rootRenamer    =    n.getReferenceName();    	non-compiled	[CE]  orphaned  case	54	None	replace
260	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  n.getReferenceName(parent);  [CE]  orphaned  case  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  ContextualRenamer  rootRenamer  =  n.getReferenceName(parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	ContextualRenamer  rootRenamer  =  n.getReferenceName(parent);	  ContextualRenamer    rootRenamer    =    n.getReferenceName();    	non-compiled	[CE]  orphaned  case	54	None	replace
261	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  n.getName();  [CE]  orphaned  case  [FE]                                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  ContextualRenamer  rootRenamer  =  n.getName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	ContextualRenamer  rootRenamer  =  n.getName();	  ContextualRenamer    rootRenamer    =    n.getReferenceName();    	non-compiled	[CE]  orphaned  case	54	None	replace
262	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  rootRenamer);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(parent,  rootRenamer);	  NodeUtil.copyNameAnnotations(n,    rootRenamer);    	non-compiled	[CE]  orphaned  case	31	None	replace
263	[BUG]  [BUGGY]  Node  name  =  parent.getNext();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  parent.getNext();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  parent.getNext();	  Node    name    =    n.getNext();    	non-compiled	[CE]  orphaned  case	5	None	replace
264	[BUG]  [BUGGY]  Node  name  =  n.getType()  ==  Token.NAME?  n.getString()  :  n.getNext();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getType()  ==  Token.NAME?  n.getString()  :  n.getNext();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getType()  ==  Token.NAME?  n.getString()  :  n.getNext();	  Node    name    =    n.getNext();    	non-compiled	[CE]  orphaned  case	5	None	replace
265	[BUG]  [BUGGY]  Node  name  =  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getNext();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getNext();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getNext();	  Node    name    =    n.getNext();    	non-compiled	[CE]  orphaned  case	5	None	replace
266	[BUG]  [BUGGY]  Node  name  =  n.getParent();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getParent();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getParent();	  Node    name    =    n.getNext();    	non-compiled	[CE]  orphaned  case	5	None	replace
267	[BUG]  [BUGGY]  Node  name  =  n.getPrefix();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getPrefix();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getPrefix();	  Node    name    =    n.getNext();    	non-compiled	[CE]  orphaned  case	5	None	replace
268	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  nameStack.pop();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  nameStack.pop();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  nameStack.pop();	  NameUsage    uniqueIdSupplier    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	69	None	replace
269	[BUG]  [BUGGY]  NameUsage  nameUsage  =  nameStack.peek();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  nameStack.peek();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  nameStack.peek();	  NameUsage    uniqueIdSupplier    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	69	None	replace
270	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.setString(newName));  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.setString(newName));  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.setString(newName));  t.getCompiler().reportCodeChange();	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	71	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer,  parent);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  rootRenamer,  parent);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  orphaned  case	70	None	replace
272	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNamespaceURI();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNamespaceURI();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getNamespaceURI();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespaceURI();    	non-compiled	[CE]  orphaned  case	55	None	replace
273	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getParent().getNamespaceURI();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getParent().getNamespaceURI();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getParent().getNamespaceURI();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespaceURI();    	non-compiled	[CE]  orphaned  case	55	None	replace
274	[BUG]  [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getNamespaceURI();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getNamespaceURI();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  idSupplier  =  n.getFirstChild().getNamespaceURI();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespaceURI();    	non-compiled	[CE]  orphaned  case	55	None	replace
275	[BUG]  [BUGGY]  Node  nameUsage  =  n.getLastChild().getString();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  n.getLastChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  n.getLastChild().getString();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
276	[BUG]  [BUGGY]  Node  nameUsage  =  n.getLastChild().getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  n.getLastChild().getNext();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  n.getLastChild().getNext();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
277	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.replaceChild(parent,  renamer));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.replaceChild(parent,  renamer));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.replaceChild(parent,  renamer));	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.replaceChild(n,    parent));    	non-compiled	[CE]  orphaned  case	75	None	replace
278	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  global);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  global);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  global);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.replaceChild(n,    parent));    	non-compiled	[CE]  orphaned  case	75	None	replace
279	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getName());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getName());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getName());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getName());    	non-compiled	[CE]  orphaned  case	61	None	replace
280	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString()  +  1);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString()  +  1);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString()  +  1);  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getString());    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	57	None	replace
281	[BUG]  [BUGGY]  n.setString(newName);  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.setString(newName);  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.setString(newName);  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getString());    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	57	None	replace
282	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getString());    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	57	None	replace
283	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  nameStack.pop();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  nameStack.pop();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  nameStack.pop();	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	22	None	replace
284	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  n.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  n.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  n.getCompiler().reportCodeChange();	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	22	None	replace
285	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  n.setString(newName);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  n.setString(newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  n.setString(newName);	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	22	None	replace
286	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n,  renamer);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n,  renamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(parent,  n,  renamer);	  NodeUtil.copyNameAnnotations(n,    parent,    renamer);    	non-compiled	[CE]  orphaned  case	58	None	replace
287	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  renamer,  rootRenamer);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  renamer,  rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  parent,  renamer,  rootRenamer);	  NodeUtil.copyNameAnnotations(n,    parent,    renamer);    	non-compiled	[CE]  orphaned  case	58	None	replace
288	[BUG]  [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getValue();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getValue();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  idSupplier  =  n.getFirstChild().getValue();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getValue();    	non-compiled	[CE]  orphaned  case	43	None	replace
289	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getValue()  +  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getValue()  +  1;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getValue()  +  1;	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getValue();    	non-compiled	[CE]  orphaned  case	43	None	replace
290	[BUG]  [BUGGY]  n.removeChild(parent);  nameStack.push(renamer);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeChild(parent);  nameStack.push(renamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeChild(parent);  nameStack.push(renamer);	  n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.push(renamer);    	non-compiled	[CE]  orphaned  case	11	None	replace
291	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(rootRenamer);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.push(rootRenamer);	  n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.push(renamer);    	non-compiled	[CE]  orphaned  case	11	None	replace
292	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	15	None	replace
293	[BUG]  [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getLastChild().getString();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getLastChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  idSupplier  =  n.getFirstChild().getLastChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	77	None	replace
294	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild().getName();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild().getName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild().getName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	77	None	replace
295	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  parent);  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	18	None	replace
296	[BUG]  [BUGGY]  Node  name  =  n.getLowerChild();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getLowerChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getLowerChild();	  Node    name    =    n.getOwnerChild();    	non-compiled	[CE]  orphaned  case	46	None	replace
297	[BUG]  [BUGGY]  Node  name  =  n.getNode();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getNode();	  Node    name    =    n.getOwnerChild();    	non-compiled	[CE]  orphaned  case	46	None	replace
298	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNext();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getNext();	  NameUsage    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
299	[BUG]  [BUGGY]  NameUsage  nUsage  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nUsage  =  n.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nUsage  =  n.getFirstChild();	  NameUsage    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
300	[BUG]  [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getQualifiedName();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getQualifiedName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  idSupplier  =  n.getFirstChild().getQualifiedName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  orphaned  case	42	None	replace
301	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName(parent);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName(parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName(parent);	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  orphaned  case	42	None	replace
302	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName()  +  1;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName()  +  1;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName()  +  1;	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  orphaned  case	42	None	replace
303	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  getReplacementName(n.getString()));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  getReplacementName(n.getString()));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  getReplacementName(n.getString()));	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getString());    	non-compiled	[CE]  orphaned  case	1	None	replace
304	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  n.getReferenceName();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  n.getReferenceName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  n.getReferenceName();	  NameUsage    rootRenamer    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	53	None	replace
305	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  n.getRootName();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  n.getRootName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  n.getRootName();	  NameUsage    rootRenamer    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	53	None	replace
306	[BUG]  [BUGGY]  n.removeProp(Node.IS_NEW_NAME);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_NEW_NAME);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_NEW_NAME);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	65	None	replace
307	[BUG]  [BUGGY]  n.removeProp(Node.IS_OBJECT_NAME);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_OBJECT_NAME);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_OBJECT_NAME);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	65	None	replace
308	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  ARGUMENTS)+  1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  ARGUMENTS)+  1;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  ARGUMENTS)+  1;	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    ARGUMENTS);    	non-compiled	[CE]  not  a  statement	48	None	replace
309	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  global);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  global);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  global);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.rootRenamer);    	non-compiled	[CE]  orphaned  case	13	None	replace
310	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  rootRenamer);  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	19	None	replace
311	[BUG]  [BUGGY]  n.setString(newName);  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.setString(newName);  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.setString(newName);  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	19	None	replace
312	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  renamer);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  renamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  renamer);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	16	None	replace
313	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameName);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  nameName);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	16	None	replace
314	[BUG]  [BUGGY]  t.getCompiler().report(n.getString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getString());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getString());	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	16	None	replace
315	[BUG]  [BUGGY]  Node  name  =  n.replaceChild(parent,  newName);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.replaceChild(parent,  newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.replaceChild(parent,  newName);	  Node    name    =    n.removeFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
316	[BUG]  [BUGGY]  Node  name  =  n.cloneTree();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.cloneTree();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.cloneTree();	  Node    name    =    n.removeFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
317	[BUG]  [BUGGY]  n.getCompiler().report(JSError.make(t,  n,  NAME_ID_SEPARATOR));  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.getCompiler().report(JSError.make(t,  n,  NAME_ID_SEPARATOR));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.getCompiler().report(JSError.make(t,  n,  NAME_ID_SEPARATOR));	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	14	None	replace
318	[BUG]  [BUGGY]  n.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAME,  newName));  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAME,  newName));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.getCompiler().report(JSError.make(t,  n,  NON_GLOBAL_NAME,  newName));	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	14	None	replace
319	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNameNode(parent);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNameNode(parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNameNode(parent);	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNameNode();    	non-compiled	[CE]  orphaned  case	56	None	replace
320	[BUG]  [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getNameNode();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getNameNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  idSupplier  =  n.getFirstChild().getNameNode();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNameNode();    	non-compiled	[CE]  orphaned  case	56	None	replace
321	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer,  global);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer,  global);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  rootRenamer,  global);	  NodeTraversal.traverse(compiler,    n,    rootRenamer);    	non-compiled	[CE]  orphaned  case	67	None	replace
322	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    n,    rootRenamer);    	non-compiled	[CE]  orphaned  case	67	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer,  this);  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  rootRenamer,  this);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  rootRenamer,  this);	  NodeTraversal.traverse(compiler,    n,    rootRenamer);    	non-compiled	[CE]  orphaned  case	67	None	replace
324	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  rootRenamer);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  this,  rootRenamer);	  NodeTraversal.traverse(compiler,    n,    rootRenamer);    	non-compiled	[CE]  orphaned  case	67	None	replace
325	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  n.getReferenceNames();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  ContextualRenamer  rootRenamer  =  n.getReferenceNames();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	ContextualRenamer  rootRenamer  =  n.getReferenceNames();	  ContextualRenamer    rootRenamer    =    n.getReferenceName();    	non-compiled	[CE]  orphaned  case	54	None	replace
326	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  n,  t);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  n,  t);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  n,  t);	  NodeUtil.copyNameAnnotations(n,    parent,    t);    	non-compiled	[CE]  orphaned  case	62	None	replace
327	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  rootRenamer,  t);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  rootRenamer,  t);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  rootRenamer,  t);	  NodeUtil.copyNameAnnotations(n,    parent,    t);    	non-compiled	[CE]  orphaned  case	62	None	replace
328	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  name,  t);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  name,  t);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  name,  t);	  NodeUtil.copyNameAnnotations(n,    parent,    t);    	non-compiled	[CE]  orphaned  case	62	None	replace
329	[BUG]  [BUGGY]  NameUsage[]  uniqueIdSupplier  =  n.getFirstChild().getString();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage[]  uniqueIdSupplier  =  n.getFirstChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage[]  uniqueIdSupplier  =  n.getFirstChild().getString();	  NameUsage    uniqueIdSupplier    =    parent.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	40	None	replace
330	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  parent,  n);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  parent,  n);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(nameStack,  parent,  n);	  NodeUtil.copyNameAnnotations(n,    parent,    nameStack);    	non-compiled	[CE]  orphaned  case	63	None	replace
331	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  nameStack.peek());  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  parent,  nameStack.peek());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  parent,  nameStack.peek());	  NodeUtil.copyNameAnnotations(n,    parent,    nameStack);    	non-compiled	[CE]  orphaned  case	63	None	replace
332	[BUG]  [BUGGY]  Node  nameUsage  =  n.getFirstChild().getNext();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  n.getFirstChild().getNext();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  n.getFirstChild().getNext();	  Node    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	35	None	replace
333	[BUG]  [BUGGY]  Node  nameUsage  =  n.getFirstChild().getLastChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  n.getFirstChild().getLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  n.getFirstChild().getLastChild();	  Node    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	35	None	replace
334	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getNode().getString();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getNode().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getNode().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNext().getString();    	non-compiled	[CE]  orphaned  case	38	None	replace
335	[BUG]  [BUGGY]  n.replaceChild(parent,  newName);  nameStack.pop();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.replaceChild(parent,  newName);  nameStack.pop();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.replaceChild(parent,  newName);  nameStack.pop();	  n.removeChild(parent);    nameStack.pop();    	non-compiled	[CE]  orphaned  case	49	None	replace
336	[BUG]  [BUGGY]  NameUsage  renamer  =  nameStack.peek();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  renamer  =  nameStack.peek();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  renamer  =  nameStack.peek();	  NameUsage    rootRenamer    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	52	None	replace
337	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  n.getFirstChild(),  renamer);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  n.getFirstChild(),  renamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  n.getFirstChild(),  renamer);	  NodeUtil.copyNameAnnotations(n,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	64	None	replace
338	[BUG]  [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getString();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  idSupplier  =  n.getFirstChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  idSupplier  =  n.getFirstChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getLastChild().getString();    	non-compiled	[CE]  orphaned  case	39	None	replace
339	[BUG]  [BUGGY]  NameUsage  idSupplier  =  n.getLastChild().getString();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  idSupplier  =  n.getLastChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  idSupplier  =  n.getLastChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getLastChild().getString();    	non-compiled	[CE]  orphaned  case	39	None	replace
340	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  name,  renamer);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  name,  renamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  name,  renamer);	  NodeUtil.copyNameAnnotations(n,    name);    	non-compiled	[CE]  orphaned  case	32	None	replace
341	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  nameStack.peek());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  nameStack.peek());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  nameStack.peek());	  NodeUtil.copyNameAnnotations(n,    name);    	non-compiled	[CE]  orphaned  case	32	None	replace
342	[BUG]  [BUGGY]  n.removeChild(parent);  nameStack.push();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeChild(parent);  nameStack.push();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeChild(parent);  nameStack.push();	  n.removeProp(Node.IS_CONSTANT_NAME);    nameStack.push();    	non-compiled	[CE]  orphaned  case	78	None	replace
343	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getQualifiedName();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getQualifiedName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getQualifiedName();	  NameUsage    uniqueIdSupplier    =    n.getUniqueName();    	non-compiled	[CE]  orphaned  case	68	None	replace
344	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getName();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getName();	  NameUsage    uniqueIdSupplier    =    n.getUniqueName();    	non-compiled	[CE]  orphaned  case	68	None	replace
345	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getReferenceName();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getReferenceName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getReferenceName();	  NameUsage    uniqueIdSupplier    =    n.getUniqueName();    	non-compiled	[CE]  orphaned  case	68	None	replace
346	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getUniqueId();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getUniqueId();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getUniqueId();	  NameUsage    uniqueIdSupplier    =    n.getUniqueName();    	non-compiled	[CE]  orphaned  case	68	None	replace
347	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n,  rootRenamer);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n,  rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(parent,  n,  rootRenamer);	  NodeUtil.copyNameAnnotations(parent,    n);    	non-compiled	[CE]  orphaned  case	29	None	replace
348	[BUG]  [BUGGY]  Node  name  =  n.getfirstChild();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getfirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getfirstChild();	  Node    name    =    parent.getFirstChild();    	non-compiled	[CE]  orphaned  case	4	None	replace
349	[BUG]  [BUGGY]  Node  nameStack  =  n.getLastChild().getNext();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameStack  =  n.getLastChild().getNext();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameStack  =  n.getLastChild().getNext();	  Node    nameStack    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	36	None	replace
350	[BUG]  [BUGGY]  Node  nameStack  =  n.getfirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameStack  =  n.getfirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameStack  =  n.getfirstChild();	  Node    nameStack    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	36	None	replace
351	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(referencedNames,  parent);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(referencedNames,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(referencedNames,  parent);	  NodeUtil.copyNameAnnotations(name,    parent);    	non-compiled	[CE]  orphaned  case	27	None	replace
352	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  nameStack,  renamer);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  nameStack,  renamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  nameStack,  renamer);	  NodeUtil.copyNameAnnotations(n,    nameStack);    	non-compiled	[CE]  orphaned  case	33	None	replace
353	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  null);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  null);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  null);	  n.removeProp(Node.IS_CONSTANT_NAME,    parent);    	non-compiled	[CE]  orphaned  case	44	None	replace
354	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNameUsage();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNameUsage();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getNameUsage();	  NameUsage    nameUsage    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	41	None	replace
355	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNodeName();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getNodeName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getNodeName();	  NameUsage    nameUsage    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	41	None	replace
356	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName  +  1);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName  +  1);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName  +  1);	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  orphaned  case	26	None	replace
357	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  n.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  n.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getString());  n.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName);    n.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	17	None	replace
358	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.cloneTree());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.cloneTree());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.cloneTree());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.cloneTree());    	non-compiled	[CE]  orphaned  case	73	None	replace
359	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.cloneName());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.cloneName());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.cloneName());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.cloneTree());    	non-compiled	[CE]  orphaned  case	73	None	replace
360	[BUG]  [BUGGY]  n.replaceChild(n,  Node.IS_CONSTANT_PROP);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.replaceChild(n,  Node.IS_CONSTANT_PROP);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.replaceChild(n,  Node.IS_CONSTANT_PROP);	  n.removeProp(Node.IS_CONSTANT_PROP);    	non-compiled	[CE]  orphaned  case	23	None	replace
361	[BUG]  [BUGGY]  n.setProp(Node.IS_CONSTANT_PROP);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.setProp(Node.IS_CONSTANT_PROP);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.setProp(Node.IS_CONSTANT_PROP);	  n.removeProp(Node.IS_CONSTANT_PROP);    	non-compiled	[CE]  orphaned  case	23	None	replace
362	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  1).replaceChild(n,  parent);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  1).replaceChild(n,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  1).replaceChild(n,  parent);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName    +    1);    	non-compiled	[CE]  orphaned  case	2	None	replace
363	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  4);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  4);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  +  4);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName    +    1);    	non-compiled	[CE]  orphaned  case	2	None	replace
364	[BUG]  [BUGGY]  n.replaceChild(parent,  newName);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.replaceChild(parent,  newName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.replaceChild(parent,  newName);	  n.removeChild(parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
365	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.NAME));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.replaceChild(parent,  new  Node(Token.NAME));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.replaceChild(parent,  new  Node(Token.NAME));	  n.removeChild(parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
366	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.replaceChild(parent,  new  Node(Token.FUNCTION));	  n.removeChild(parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
367	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceReference();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceReference();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceReference();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespace();    	non-compiled	[CE]  orphaned  case	76	None	replace
368	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getUniqueName();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getUniqueName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getUniqueName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespace();    	non-compiled	[CE]  orphaned  case	76	None	replace
369	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.toString());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.toString());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.toString());	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  orphaned  case	59	None	replace
370	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(name,  n,  rootRenamer);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(name,  n,  rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(name,  n,  rootRenamer);	  NodeUtil.copyNameAnnotations(name,    n);    	non-compiled	[CE]  orphaned  case	28	None	replace
371	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getNodeNameUsage();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getNodeNameUsage();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getNodeNameUsage();	  NameUsage    nameUsage    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	51	None	replace
372	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getNameUsage(parent);  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getNameUsage(parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getNameUsage(parent);	  NameUsage    nameUsage    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	51	None	replace
373	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  t);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  t);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.replaceChild(n,  parent),  t);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.replaceChild(n,    parent));    	non-compiled	[CE]  orphaned  case	75	None	replace
374	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.replaceChild(parent,  parent));  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.replaceChild(parent,  parent));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.replaceChild(parent,  parent));	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.replaceChild(n,    parent));    	non-compiled	[CE]  orphaned  case	75	None	replace
375	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.replaceChild(parent,  newName));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.replaceChild(parent,  newName));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.replaceChild(parent,  newName));	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.replaceChild(n,    parent));    	non-compiled	[CE]  orphaned  case	75	None	replace
376	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  t.getCompiler());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  t.getCompiler());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  t.getCompiler());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.rootRenamer);    	non-compiled	[CE]  orphaned  case	13	None	replace
377	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  n);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  n);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  n);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.rootRenamer);    	non-compiled	[CE]  orphaned  case	13	None	replace
378	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  null);  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  null);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.rootRenamer,  null);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.rootRenamer);    	non-compiled	[CE]  orphaned  case	13	None	replace
379	[BUG]  [BUGGY]  Node  nameUsage  =  n.getQualifiedName();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  n.getQualifiedName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  n.getQualifiedName();	  Node    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	35	None	replace
380	[BUG]  [BUGGY]  n.addChildToFront(new  Node(Token.FUNCTION,  parent));  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.addChildToFront(new  Node(Token.FUNCTION,  parent));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.addChildToFront(new  Node(Token.FUNCTION,  parent));	  n.removeChild(parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
381	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.replaceChild(n,  new  Node(Token.FUNCTION));	  n.removeChild(parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
382	[BUG]  [BUGGY]  n.addChildToFront(new  Node(Token.FUNCTION));  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.addChildToFront(new  Node(Token.FUNCTION));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.addChildToFront(new  Node(Token.FUNCTION));	  n.removeChild(parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
383	[BUG]  [BUGGY]  n.addChildToFront(new  Node(Token.NAME,  parent));  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.addChildToFront(new  Node(Token.NAME,  parent));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.addChildToFront(new  Node(Token.NAME,  parent));	  n.removeChild(parent);    	non-compiled	[CE]  orphaned  case	24	None	replace
384	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  n.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  n.getFirstChild();	  NameUsage    rootRenamer    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	53	None	replace
385	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  n.getLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  n.getLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  n.getLastChild();	  NameUsage    rootRenamer    =    n.getNameUsage();    	non-compiled	[CE]  orphaned  case	53	None	replace
386	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(t,  n,  parent);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(t,  n,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(t,  n,  parent);	  NodeUtil.copyNameAnnotations(n,    parent,    t);    	non-compiled	[CE]  orphaned  case	62	None	replace
387	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(t,  parent,  n);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(t,  parent,  n);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(t,  parent,  n);	  NodeUtil.copyNameAnnotations(n,    parent,    t);    	non-compiled	[CE]  orphaned  case	62	None	replace
388	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getImmediateParentNode());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getImmediateParentNode());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getImmediateParentNode());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getName());    	non-compiled	[CE]  orphaned  case	61	None	replace
389	[BUG]  [BUGGY]  Node  name  =  n.item();  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.item();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.item();	  Node    name    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	3	None	replace
390	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName(n.getString());  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName(n.getString());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getQualifiedName(n.getString());	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getQualifiedName();    	non-compiled	[CE]  orphaned  case	42	None	replace
391	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceURI(n.getString());  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceURI(n.getString());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNamespaceURI(n.getString());	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespaceURI();    	non-compiled	[CE]  orphaned  case	55	None	replace
392	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  n.getFirstChild(),  n);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  n.getFirstChild(),  n);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  n.getFirstChild(),  n);	  NodeUtil.copyNameAnnotations(n,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	64	None	replace
393	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.setString(newName);  t.getCompiler().reportCodeChange();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.setString(newName);  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  ')'  expected	18	None	replace
394	[BUG]  [BUGGY]  n.setString(newName);  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.setString(newName);  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.setString(newName);  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	18	None	replace
395	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.removeFirstChild());  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.removeFirstChild());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.removeFirstChild());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getFirstChild());    	non-compiled	[CE]  orphaned  case	8	None	replace
396	[BUG]  [BUGGY]  Node  nameStack  =  n.getImmediateParentNode();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameStack  =  n.getImmediateParentNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameStack  =  n.getImmediateParentNode();	  Node    nameStack    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	36	None	replace
397	[BUG]  [BUGGY]  Node  nameStack  =  n.removeLastChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameStack  =  n.removeLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameStack  =  n.removeLastChild();	  Node    nameStack    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	36	None	replace
398	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getfirstChild().getString();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getfirstChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getfirstChild().getString();	  NameUsage    uniqueIdSupplier    =    n.getLastChild().getString();    	non-compiled	[CE]  orphaned  case	39	None	replace
399	[BUG]  [BUGGY]  Node  nameUsage  =  n.getImmediateParentNode();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  nameUsage  =  n.getImmediateParentNode();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  nameUsage  =  n.getImmediateParentNode();	  Node    nameUsage    =    n.getLastChild();    	non-compiled	[CE]  orphaned  case	34	None	replace
400	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  PROP);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  PROP);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  PROP);	  n.removeProp(Node.IS_CONSTANT_NAME,    name);    	non-compiled	[CE]  orphaned  case	45	None	replace
401	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  -  1);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  -  1);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName  -  1);	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    newName    +    1);    	non-compiled	[CE]  orphaned  case	2	None	replace
402	[BUG]  [BUGGY]  n.removeProp(Node.IS_NEW_PROP);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_NEW_PROP);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_NEW_PROP);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	65	None	replace
403	[BUG]  [BUGGY]  n.removeProp(Node.IS_PROP);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_PROP);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_PROP);	  n.setString(newName);    	non-compiled	[CE]  orphaned  case	65	None	replace
404	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)-  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME)-  1;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME)-  1;	  n.removeProp(Node.IS_CONSTANT_NAME)+    1;    	non-compiled	[CE]  not  a  statement	72	None	replace
405	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  node.getFirstChild().getString();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  node.getFirstChild().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  node.getFirstChild().getString();	  NameUsage    uniqueIdSupplier    =    parent.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	40	None	replace
406	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getLastChild();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.getFirstChild().getLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.getFirstChild().getLastChild();	  NameUsage    nameUsage    =    n.getFirstChild().getString();    	non-compiled	[CE]  orphaned  case	41	None	replace
407	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild();	  NameUsage    uniqueIdSupplier    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	69	None	replace
408	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getNamespace();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getNamespace();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getNamespace();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNext().getString();    	non-compiled	[CE]  orphaned  case	38	None	replace
409	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getQualifiedName();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getQualifiedName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getQualifiedName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNext().getString();    	non-compiled	[CE]  orphaned  case	38	None	replace
410	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getReferenceName();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getReferenceName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getNext().getReferenceName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNext().getString();    	non-compiled	[CE]  orphaned  case	38	None	replace
411	[BUG]  [BUGGY]  NameUsage  nameUsage  =  n.removeFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  nameUsage  =  n.removeFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  nameUsage  =  n.removeFirstChild();	  NameUsage    nameUsage    =    n.getFirstChild();    	non-compiled	[CE]  orphaned  case	37	None	replace
412	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  INVALID_NAME);  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  INVALID_NAME);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeTraversal.traverse(compiler,  n,  INVALID_NAME);	  NodeTraversal.traverse(compiler,    n,    rootRenamer);    	non-compiled	[CE]  orphaned  case	67	None	replace
413	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  n.getFirstChild();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  ContextualRenamer  rootRenamer  =  n.getFirstChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	ContextualRenamer  rootRenamer  =  n.getFirstChild();	  ContextualRenamer    rootRenamer    =    n.getReferenceName();    	non-compiled	[CE]  orphaned  case	54	None	replace
414	[BUG]  [BUGGY]  ContextualRenamer  rootRenamer  =  n.getParent();  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  ContextualRenamer  rootRenamer  =  n.getParent();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	ContextualRenamer  rootRenamer  =  n.getParent();	  ContextualRenamer    rootRenamer    =    n.getReferenceName();    	non-compiled	[CE]  orphaned  case	54	None	replace
415	[BUG]  [BUGGY]  n.setProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.setProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.setProp(Node.IS_CONSTANT_NAME,  newName);  t.getCompiler().reportCodeChange();	  n.putProp(Node.IS_CONSTANT_NAME,    newName);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	20	None	replace
416	[BUG]  [BUGGY]  Node  name  =  n.getAncestor(1);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.getAncestor(1);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.getAncestor(1);	  Node    name    =    n.getOwnerChild();    	non-compiled	[CE]  orphaned  case	46	None	replace
417	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getName());  t.getCompiler().reportCodeChange();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getName());  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getName());  t.getCompiler().reportCodeChange();	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    n.getString());    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  orphaned  case	57	None	replace
418	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  idPrefix);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  idPrefix);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  idPrefix);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	66	None	replace
419	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.NAME);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  orphaned  case	66	None	replace
420	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getAssignedName();  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getAssignedName();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getAssignedName();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNamespace();    	non-compiled	[CE]  orphaned  case	76	None	replace
421	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getFirstChild().getNext().getString();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getFirstChild().getNext().getString();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getFirstChild().getNext().getString();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getLastChild().getString();    	non-compiled	[CE]  orphaned  case	77	None	replace
422	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.VAR);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  orphaned  case	15	None	replace
423	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  idPrefix);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  idPrefix);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  idPrefix);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	16	None	replace
424	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	t.getCompiler().report(n.getType()!=  Token.NAME);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  orphaned  case	16	None	replace
425	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  n));  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  n));	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    parent);    	non-compiled	[CE]  ';'  expected	9	None	replace
426	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  n);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  n);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  n);	  n.removeProp(Node.IS_CONSTANT_NAME,    parent);    	non-compiled	[CE]  orphaned  case	44	None	replace
427	[BUG]  [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName  + ": ");  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  n.removeProp(Node.IS_CONSTANT_NAME,  newName  + ": ");  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	n.removeProp(Node.IS_CONSTANT_NAME,  newName  + ": ");	  n.removeProp(Node.IS_CONSTANT_NAME,    newName);    	non-compiled	[CE]  orphaned  case	26	None	replace
428	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.setString(newName);  t.getCompiler().reportCodeChange();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.setString(newName);  t.getCompiler().reportCodeChange();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.setString(newName);  t.getCompiler().reportCodeChange();	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    t.getCompiler().reportCodeChange();    	non-compiled	[CE]  ')'  expected	71	None	replace
429	[BUG]  [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.getPrefix());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.getPrefix());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer.getPrefix());	  nameUsage.putProp(Node.IS_CONSTANT_NAME,    renamer.getName());    	non-compiled	[CE]  orphaned  case	74	None	replace
430	[BUG]  [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getLastChild());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getLastChild());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage.putProp(Node.IS_CONSTANT_NAME,  n.getLastChild());	  NameUsage.putProp(Node.IS_CONSTANT_NAME,    n);    	non-compiled	[CE]  orphaned  case	59	None	replace
431	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getParent();  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getParent();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getParent();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getNameNode();    	non-compiled	[CE]  orphaned  case	56	None	replace
432	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(n,  n,  renamer,  rootRenamer);  [CE]  orphaned  case  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(n,  n,  renamer,  rootRenamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(n,  n,  renamer,  rootRenamer);	  NodeUtil.copyNameAnnotations(n,    parent,    renamer);    	non-compiled	[CE]  orphaned  case	58	None	replace
433	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getLastChild();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getValue();    	non-compiled	[CE]  orphaned  case	43	None	replace
434	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getKey();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getKey();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getKey();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getValue();    	non-compiled	[CE]  orphaned  case	43	None	replace
435	[BUG]  [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getAssignedValue();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  uniqueIdSupplier  =  n.getFirstChild().getAssignedValue();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  uniqueIdSupplier  =  n.getFirstChild().getAssignedValue();	  NameUsage    uniqueIdSupplier    =    n.getFirstChild().getValue();    	non-compiled	[CE]  orphaned  case	43	None	replace
436	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  parent,  parent);  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  parent,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(nameStack,  parent,  parent);	  NodeUtil.copyNameAnnotations(n,    parent,    nameStack);    	non-compiled	[CE]  orphaned  case	63	None	replace
437	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  parent,  nameName);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(nameStack,  parent,  nameName);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(nameStack,  parent,  nameName);	  NodeUtil.copyNameAnnotations(n,    parent,    nameStack);    	non-compiled	[CE]  orphaned  case	63	None	replace
438	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  nameStack.peek(),  renamer;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  nameStack.peek(),  renamer;  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  nameStack.peek(),  renamer;	  NameUsage    rootRenamer    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	52	None	replace
439	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  nameStack.peek(),  renamer);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  nameStack.peek(),  renamer);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  nameStack.peek(),  renamer);	  NameUsage    rootRenamer    =    nameStack.peek();    	non-compiled	[CE]  ';'  expected	52	None	replace
440	[BUG]  [BUGGY]  NameUsage  rootRenamer  =  nameStack.pop();  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NameUsage  rootRenamer  =  nameStack.pop();  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NameUsage  rootRenamer  =  nameStack.pop();	  NameUsage    rootRenamer    =    nameStack.peek();    	non-compiled	[CE]  orphaned  case	52	None	replace
441	[BUG]  [BUGGY]  Node  name  =  n.replaceChild(parent,  n.removeFirstChild());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  Node  name  =  n.replaceChild(parent,  n.removeFirstChild());  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	Node  name  =  n.replaceChild(parent,  n.removeFirstChild());	  Node    name    =    n.removeFirstChild();    	non-compiled	[CE]  orphaned  case	6	None	replace
442	[BUG]  [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n,  parent);  [CE]  orphaned  case  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);  t.getCompiler().reportCodeChange();      [BUGGY]  NodeUtil.copyNameAnnotations(parent,  n,  parent);  [BUGGY]      break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	168	168	66	replace	NodeUtil.copyNameAnnotations(parent,  n,  parent);	  NodeUtil.copyNameAnnotations(parent,    n);    	non-compiled	[CE]  orphaned  case	29	None	replace
