bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getQualifiedName();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	add	String  name  =  c.getQualifiedName();	String  name  =  c.getString();  	compilable	timeout	15	1	replace
2	[BUG]  [BUGGY]  String  name  =  c.getQualifiedName();  timeout  [FE]    AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getQualifiedName();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	String  name  =  c.getQualifiedName();	String  name  =  c.getString();  	compilable	timeout	15	1	replace
3	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  declarationRoot.getString();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	add	String  name  =  declarationRoot.getString();	String  name  =  c.getString();  	compilable	timeout	15	1	replace
4	[BUG]  [BUGGY]  String  name  =  declarationRoot.getString();  timeout  [FE]      AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  declarationRoot.getString();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	String  name  =  declarationRoot.getString();	String  name  =  c.getString();  	compilable	timeout	15	1	replace
5	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + ": ";  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	add	String  name  =  c.getString()  + ": ";	String  name  =  c.getString();  	compilable	timeout	15	1	replace
6	[BUG]  [BUGGY]  String  name  =  c.getString()  + ": ";  timeout  [FE]        AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + ": ";  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	String  name  =  c.getString()  + ": ";	String  name  =  c.getString();  	compilable	timeout	15	1	replace
7	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + ";n ";  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	add	String  name  =  c.getString()  + ";n ";	String  name  =  c.getString();  	compilable	timeout	15	1	replace
8	[BUG]  [BUGGY]  String  name  =  c.getString()  + ";n ";  timeout  [FE]          AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + ";n ";  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	String  name  =  c.getString()  + ";n ";	String  name  =  c.getString();  	compilable	timeout	15	1	replace
9	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + "n ";  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	add	String  name  =  c.getString()  + "n ";	String  name  =  c.getString();  	compilable	timeout	15	1	replace
10	[BUG]  [BUGGY]  String  name  =  c.getString()  + "n ";  timeout  [FE]            AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + "n ";  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	String  name  =  c.getString()  + "n ";	String  name  =  c.getString();  	compilable	timeout	15	1	replace
11	[BUG]  [BUGGY]  String  name  =  c.getName();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getName();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	String  name  =  c.getName();	String  name  =  c.getString();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
12	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]    [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	  	String  name  =  c.getString();  	non-compiled	[CE]  cannot  find  symbol  name	15	None	replace
13	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + ": "  +  c.getQualifiedName();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	add	String  name  =  c.getString()  + ": "  +  c.getQualifiedName();	String  name  =  c.getString();  	compilable	timeout	15	1	replace
14	[BUG]  [BUGGY]  String  name  =  c.getString()  + ": "  +  c.getQualifiedName();  timeout  [FE]    AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + ": "  +  c.getQualifiedName();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	String  name  =  c.getString()  + ": "  +  c.getQualifiedName();	String  name  =  c.getString();  	compilable	timeout	15	1	replace
15	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + "_ "+nameStack.peek();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	add	String  name  =  c.getString()  + "_ "+nameStack.peek();	String  name  =  c.getString();  	compilable	timeout	15	1	replace
16	[BUG]  [BUGGY]  String  name  =  c.getString()  + "_ "+nameStack.peek();  timeout  [FE]      AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + "_ "+nameStack.peek();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	String  name  =  c.getString()  + "_ "+nameStack.peek();	String  name  =  c.getString();  	compilable	timeout	15	1	replace
17	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + "_ "  +  c.getQualifiedName();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	add	String  name  =  c.getString()  + "_ "  +  c.getQualifiedName();	String  name  =  c.getString();  	compilable	timeout	15	1	replace
18	[BUG]  [BUGGY]  String  name  =  c.getString()  + "_ "  +  c.getQualifiedName();  timeout  [FE]    AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + "_ "  +  c.getQualifiedName();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	String  name  =  c.getString()  + "_ "  +  c.getQualifiedName();	String  name  =  c.getString();  	compilable	timeout	15	1	replace
19	[BUG]  [BUGGY]  String  name  =  c.getString()  + "_ "  +  c.getName();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + "_ "  +  c.getName();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	String  name  =  c.getString()  + "_ "  +  c.getName();	String  name  =  c.getString();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
20	[BUG]  [BUGGY]  String  name  =  c.getString()  + ": "  +  c.getName();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + ": "  +  c.getName();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	String  name  =  c.getString()  + ": "  +  c.getName();	String  name  =  c.getString();  	non-compiled	[CE]  cannot  find  symbol	15	None	replace
21	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + ", "  +  c.getQualifiedName();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	add	String  name  =  c.getString()  + ", "  +  c.getQualifiedName();	String  name  =  c.getString();  	compilable	timeout	15	1	replace
22	[BUG]  [BUGGY]  String  name  =  c.getString()  + ", "  +  c.getQualifiedName();  timeout  [FE]          AssertionFailedError  [CONTEXT]  declarationRoot.getType()  !=  Token.FUNCTION  ||  !(rootRenamer  instanceof  ContextualRenamer));  Preconditions.checkState(t.inGlobalScope());  renamer  =  rootRenamer;  }  else  {  renamer  =  nameStack.peek().forChildScope();  }  if  (declarationRoot.getType()  ==  Token.FUNCTION)  {  for  (Node  c  =  declarationRoot.getFirstChild().getNext().getFirstChild();  c  !=  null;  c  =  c.getNext())  {  [BUGGY]  String  name  =  c.getString()  + ", "  +  c.getQualifiedName();  [BUGGY]  renamer.addDeclaredName(name);  }  Node  functionBody  =  declarationRoot.getLastChild();  findDeclaredNames(functionBody,  null,  renamer);  }else  if  (declarationRoot.getType()  !=  Token.FUNCTION)  {  findDeclaredNames(declarationRoot,  null,  renamer);  }  nameStack.push(renamer);  [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  enterScope  [RETURN_TYPE]  void  NodeTraversal  t  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  c  declarationRoot  functionBody  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.5385948274776263	93	93	66	replace	String  name  =  c.getString()  + ", "  +  c.getQualifiedName();	String  name  =  c.getString();  	compilable	timeout	15	1	replace
