bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  frumoase);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	4	None	replace
2	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.NAME);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.NAME);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  Token.NAME);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	4	None	replace
3	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	4	None	replace
4	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >  Token.NAME);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]                    AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  >  Token.NAME);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >  Token.NAME);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	4	None	replace
5	[BUG]  [BUGGY]  t.getCompiler().report(n.getType(),  UNIQUE_ID_SEPARATOR);  [CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR  [FE]                      AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType(),  UNIQUE_ID_SEPARATOR);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType(),  UNIQUE_ID_SEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR	4	None	replace
6	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.NAME,  newName);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  {  Token.NAME,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.NAME,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	4	None	replace
7	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  name);  [CE]  cannot  find  symbol  name  [FE]                          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  name);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  name);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  name	4	None	replace
8	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	8	1	replace
9	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getString());  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	8	1	replace
10	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	8	1	replace
11	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getString());  timeout  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	8	1	replace
12	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.VAR);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  frumoase,  Token.VAR);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  frumoase,  Token.VAR);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	3	None	replace
13	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  newName);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	3	None	replace
14	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameUsage);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  nameUsage);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	3	None	replace
15	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  name);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  name);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  name);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  name	3	None	replace
16	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.VAR,  newName);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  {  Token.VAR,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.VAR,  newName);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	3	None	replace
17	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.VAR,  nameUsage);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  {  Token.VAR,  nameUsage);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.VAR,  nameUsage);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	3	None	replace
18	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.FUNCTION,  newName);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  {  Token.FUNCTION,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	2	None	replace
19	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	2	None	replace
20	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >  Token.FUNCTION);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  >  Token.FUNCTION);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >  Token.FUNCTION);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	2	None	replace
21	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.FUNCTION,  name);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  {  Token.FUNCTION,  name);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.FUNCTION,  name);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	2	None	replace
22	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.FUNCTION,  nameStack);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  {  Token.FUNCTION,  nameStack);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.FUNCTION,  nameStack);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	2	None	replace
23	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  name);  [CE]  cannot  find  symbol  name  [FE]                    AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  name);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  name);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  name	2	None	replace
24	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getName());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
25	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
26	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Unknown  name: "  +  newName);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    timeout    	compilable	timeout	11	1	replace
27	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  newName);  timeout  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  newName);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    timeout    	compilable	timeout	11	1	replace
28	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	        n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	5	1	add
29	[BUG]  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  timeout  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	        n.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	compilable	timeout	5	1	add
30	[BUG]  [BUGGY]      nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  [CE]  cannot  find  symbol  nameUsage  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]      nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	        nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	5	None	add
31	[BUG]  [BUGGY]      nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  [CE]  cannot  find  symbol  nameUsage  [FE]                    AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]      nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	        nameUsage.putProp(Node.IS_CONSTANT_NAME,  newName);	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	5	None	add
32	[BUG]  [BUGGY]      renamer.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]      renamer.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	        renamer.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol	5	None	add
33	[BUG]  [BUGGY]      nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  [CE]  cannot  find  symbol  nameUsage  [FE]                        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]      nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	        nameUsage.putProp(Node.IS_CONSTANT_NAME,  n);	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	5	None	add
34	[BUG]  [BUGGY]      nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  nameUsage  [FE]                          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]      nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  compiler.reportCodeChange();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	        nameUsage.putProp(Node.IS_CONSTANT_NAME,  renamer);  compiler.reportCodeChange();	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	5	None	add
35	[BUG]  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  compiler  [FE]                            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  compiler.reportCodeChange();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	        n.removeProp(Node.IS_CONSTANT_NAME);  compiler.reportCodeChange();	  timeout    	non-compiled	[CE]  cannot  find  symbol  compiler	5	None	add
36	[BUG]  [BUGGY]      nameUsage.removeProp(Node.IS_CONSTANT_NAME);  [CE]  cannot  find  symbol  nameUsage  [FE]                              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]      nameUsage.removeProp(Node.IS_CONSTANT_NAME);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	        nameUsage.removeProp(Node.IS_CONSTANT_NAME);	  timeout    	non-compiled	[CE]  cannot  find  symbol  nameUsage	5	None	add
37	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  newName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	9	None	replace
38	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name);  [CE]  cannot  find  symbol  name  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  name);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  name	9	None	replace
39	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  nameUsage);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  nameUsage);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	9	None	replace
40	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT,  newName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	9	None	replace
41	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  nameName);  [CE]  cannot  find  symbol  nameName  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  nameName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  nameName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  nameName	9	None	replace
42	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                    AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getString());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	9	None	replace
43	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  {  Token.EXPR_RESULT,  newName);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  {  Token.EXPR_RESULT,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  {  Token.EXPR_RESULT,  newName);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	9	None	replace
44	[BUG]  [BUGGY]  renamer.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  renamer.getCompiler().reportCodeChange();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	renamer.getCompiler().reportCodeChange();	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
45	[BUG]  [BUGGY]  parent.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  parent.getCompiler().reportCodeChange();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parent.getCompiler().reportCodeChange();	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
46	[BUG]  [BUGGY]  parser.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  parser  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  parser.getCompiler().reportCodeChange();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	parser.getCompiler().reportCodeChange();	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  parser	1	None	replace
47	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  n.getCompiler();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  ContextualRenamer  compiler  =  n.getCompiler();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  n.getCompiler();	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
48	[BUG]  [BUGGY]  ner.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  ner  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  ner.getCompiler().reportCodeChange();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ner.getCompiler().reportCodeChange();	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  ner	1	None	replace
49	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	10	1	add
50	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	10	1	add
51	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [CE]  cannot  find  symbol  T  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    T.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol  T	10	None	add
52	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    Node  t.getCompiler().addToDebugLog( "Unknown  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  	10	None	add
53	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	10	1	add
54	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());  timeout  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	10	1	add
55	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	7	1	add
56	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	7	1	add
57	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  [CE]  cannot  find  symbol  T  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  T.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    T.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  cannot  find  symbol  T	7	None	add
58	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	7	1	add
59	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.getString());  timeout  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ",Inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	7	1	add
60	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  Node  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    Node  t.getCompiler().addToDebugLog( "Inlined  name:   "  +  n.getString());	  timeout    	non-compiled	[CE]  	7	None	add
61	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
62	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getName());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  name: "  +  n.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
63	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  n.getName());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  n.getName());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  n.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
64	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getName());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getName());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  parent.getName());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
65	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getName());  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getName());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n.getName());	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
66	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  renamer);  [CE]  no  suitable  method  found  for  report(boolean,Renamer)  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  renamer);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  renamer);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Renamer)	9	None	replace
67	[BUG]  [BUGGY]  NodeUtil.getCompiler().reportCodeChange();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  NodeUtil.getCompiler().reportCodeChange();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	NodeUtil.getCompiler().reportCodeChange();	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
68	[BUG]  [BUGGY]  ContextualRenamer  compiler  =  t.getCompiler();  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  ContextualRenamer  compiler  =  t.getCompiler();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	ContextualRenamer  compiler  =  t.getCompiler();	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  incompatible  types	1	None	replace
69	[BUG]  [BUGGY]  compiler.reportCodeChange();  [CE]  cannot  find  symbol  compiler  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  compiler.reportCodeChange();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	compiler.reportCodeChange();	      timeout    	non-compiled	[CE]  cannot  find  symbol  compiler	6	None	replace
70	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  nameUsage);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  nameUsage);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	4	None	replace
71	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.NAME,  newName);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	4	None	replace
72	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "unknown  name: "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    timeout    	compilable	timeout	11	1	replace
73	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "unknown  name: "  +  n.getString());  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "unknown  name: "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "unknown  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    timeout    	compilable	timeout	11	1	replace
74	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameName);  [CE]  cannot  find  symbol  nameName  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  nameName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  nameName);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  nameName	3	None	replace
75	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.VAR,  newName);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	3	None	replace
76	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.VAR,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.VAR,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.VAR,  newName);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	3	None	replace
77	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  name);  [CE]  cannot  find  symbol  name  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  name);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.VAR,  name);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  name	3	None	replace
78	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	        n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();	  timeout    	compilable	timeout	5	1	add
79	[BUG]  [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  timeout  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]      n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	        n.removeProp(Node.IS_CONSTANT_NAME);  nameStack.pop();	  timeout    	compilable	timeout	5	1	add
80	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.FUNCTION,  newName);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()!=  Token.FUNCTION,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	2	None	replace
81	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameName);  [CE]  cannot  find  symbol  nameName  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  nameName	2	None	replace
82	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameUsage);  [CE]  cannot  find  symbol  nameUsage  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameUsage);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  nameUsage);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  nameUsage	2	None	replace
83	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.FUNCTION,  newName);  [CE]  no  suitable  method  found  for  report(int,String)  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  >>  Token.FUNCTION,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  >>  Token.FUNCTION,  newName);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  report(int,String)	2	None	replace
84	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.toString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.toString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	compilable	timeout	12	1	replace
85	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.toString());  timeout  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.toString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.toString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	compilable	timeout	12	1	replace
86	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "inlined  name: "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "inlined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	8	1	replace
87	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "inlined  name: "  +  n.getString());  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "inlined  name: "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "inlined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	8	1	replace
88	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.EXPR_RESULT);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	9	None	replace
89	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n);  [CE]  no  suitable  method  found  for  report(boolean,Node)  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  n);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,Node)	9	None	replace
90	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  idPrefix);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.EXPR_RESULT,  idPrefix);	  t.getCompiler().report(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	9	None	replace
91	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName);  [CE]  no  suitable  method  found  for  addToDebugLog(String,String)  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n,  newName);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,String)	12	None	replace
92	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  n);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getName(),  n);	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getName());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
93	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  idPrefix);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  idPrefix);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	4	None	replace
94	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()!=  Token.NAME,  idPrefix);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.NAME,  idPrefix);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	4	None	replace
95	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  UNIQUE_ID_SEPARATOR);  [CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR  [FE]                  AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  UNIQUE_ID_SEPARATOR);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  UNIQUE_ID_SEPARATOR);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  UNIQUE_ID_SEPARATOR	4	None	replace
96	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS);  [CE]  no  suitable  method  found  for  report(boolean,String)  [FE]                    AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.NAME,  ARGUMENTS);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean,String)	4	None	replace
97	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.NAME);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  }  Token.NAME);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.NAME);	  t.getCompiler().report(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	4	None	replace
98	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	8	1	replace
99	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getString());  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  constant  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	8	1	replace
100	[BUG]  [BUGGY]  timeout  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	8	1	replace
101	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getString());  timeout  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Inlining  empty  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    timeout    	compilable	timeout	8	1	replace
102	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Inlined  name: "  +  n.getString());	  t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
103	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  parent.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog( "Unknown  name: "  +  parent.getString());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    timeout    	compilable	timeout	11	1	replace
104	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  parent.getString());  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  parent.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  parent.getString());	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    timeout    	compilable	timeout	11	1	replace
105	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  newName);  [CE]  no  suitable  method  found  for  addToDebugLog(String,String)  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  newName);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog( "Unknown  name: "  +  n.getString(),  newName);	  t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    timeout    	non-compiled	[CE]  no  suitable  method  found  for  addToDebugLog(String,String)	11	None	replace
106	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	7	1	add
107	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  n.getString());  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Inlined  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Inlined    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")Inlined  name:   "  +  n.getString());	  timeout    	compilable	timeout	7	1	add
108	[BUG]  [BUGGY]  Deque  referencedNames  =  n.getReferencedNames();  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  Deque  referencedNames  =  n.getReferencedNames();  compiler.reportCodeChange();  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	Deque  referencedNames  =  n.getReferencedNames();  compiler.reportCodeChange();	      timeout    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
109	[BUG]  [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  n.getName());  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  n.getCompiler().addToDebugLog( "Unknown  component: "  +  n.getName());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	n.getCompiler().addToDebugLog( "Unknown  component: "  +  n.getName());	  n.getCompiler().reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
110	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.FUNCTION);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]          AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()!=  Token.FUNCTION);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.FUNCTION);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	2	None	replace
111	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  idPrefix);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.FUNCTION,  idPrefix);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	2	None	replace
112	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  }  Token.FUNCTION);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  }  Token.FUNCTION);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  }  Token.FUNCTION);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	2	None	replace
113	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  [Delete]  Token.FUNCTION);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  [Delete]  Token.FUNCTION);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  [Delete]  Token.FUNCTION);	  t.getCompiler().report(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ')'  expected	2	None	replace
114	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	add	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	10	1	add
115	[BUG]  [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name:   "  +  n.getString());  timeout  [FE]        AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().addToDebugLog(   "Unknown  name:   "  +  n.getString());  t.getCompiler().addToDebugLog( ")Unknown  name:   "  +  n.getString());  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().addToDebugLog(   "Unknown    name:   "    +    n.getString());    t.getCompiler().addToDebugLog( ")Unknown  name:   "  +  n.getString());	  timeout    	compilable	timeout	10	1	add
116	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]            AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()  ==  Token.VAR,  idPrefix);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()  ==  Token.VAR,  idPrefix);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	3	None	replace
117	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  idPrefix);  [CE]  cannot  find  symbol  idPrefix  [FE]              AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR,  idPrefix);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.VAR,  idPrefix);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol  idPrefix	3	None	replace
118	[BUG]  [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR);  [CE]  no  suitable  method  found  for  report(boolean)  [FE]                AssertionFailedError    [CONTEXT]    switch  (n.getType())  {  case  Token.NAME:  String  newName  =  getReplacementName(n.getString());  if  (newName  !=  null)  {  Renamer  renamer  =  nameStack.peek();  if  (renamer.stripConstIfReplaced())  {  n.removeProp(Node.IS_CONSTANT_NAME);  }  n.setString(newName);    [BUGGY]  t.getCompiler().report(n.getType()!=  Token.VAR);  [BUGGY]    }  break;  case  Token.FUNCTION:    nameStack.pop();  break;    [CLASS]  MakeDeclaredNamesUnique  ContextualRenameInverter  ContextualRenamer  InlineRenamer  BoilerplateRenamer  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Renamer  renamer  rootRenamer  AbstractCompiler  compiler  Set  referencedNames  boolean  global  removeConstness  NodeTraversal  t  Node  n  parent  Multiset  nameUsage  Supplier  uniqueIdSupplier  String  ARGUMENTS  UNIQUE_ID_SEPARATOR  idPrefix  name  newName  Deque  nameStack  referenceStack  Map  declarations  nameMap  	projects/Closure49/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java	0.6890719439107154	167	167	66	replace	t.getCompiler().report(n.getType()!=  Token.VAR);	  t.getCompiler().report(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  no  suitable  method  found  for  report(boolean)	3	None	replace
